setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/Output/holding") #setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM")
smry = read.table("summary_ABM_run.10.12.22_b_all.csv", header=T, sep=",")
table = read.table("summary_ABM_run.10.12.22_b_all.csv", header=T, sep=",")
head(table)
smry = read.table("summary_ABM_run.10.12.22_b_all.csv", header=T, sep=",")
head(smry)
yr       = smry[,1]   #year
n        = smry[,2]   #population size
propmig  = smry[,3]   #proportion of pop that are migrants
He       = smry[,4]   #He
Ho       = smry[,5]   #Ho
fis      = smry[,6]   #fis vs initialized pop
nadult   = smry[,7]   #number of indv that have reached maturity
sx       = smry[,8]   #sex ratio
nmig     = smry[,9]   #number of migrants
fst      = smry[,10]  #fst vs initialized pop
rep      = smry[,11]  #replicate number
noff     = smry[,13]  #number of offspring produced that year
fstvs    = smry[,14]  #fst vs the source pop
fisvs    = smry[,15]  #fis vs the source pop
outdir = paste(directory, "/figs/", sep = "")
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/Output/holding") #setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM")
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/Output/holding") #setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM")
smry = read.table("summary_ABM_run.10.12.22_b_all.csv", header=T, sep=",")
outdir = paste(directory, "/figs/", sep = "")
directory = getwd()
outdir = paste(directory, "/figs/", sep = "")
#create names for data so taht it is easier to call and change when the data change
yr       = smry[,1]   #year
n        = smry[,2]   #population size
propmig  = smry[,3]   #proportion of pop that are migrants
He       = smry[,4]   #He
Ho       = smry[,5]   #Ho
fis      = smry[,6]   #fis vs initialized pop
nadult   = smry[,7]   #number of indv that have reached maturity
sx       = smry[,8]   #sex ratio
nmig     = smry[,9]   #number of migrants
fst      = smry[,10]  #fst vs initialized pop
rep      = smry[,11]  #replicate number
noff     = smry[,13]  #number of offspring produced that year
fstvs    = smry[,14]  #fst vs the source pop
fisvs    = smry[,15]  #fis vs the source pop
png("popsize_overtime.png")
plot(-100, -100 , xlab="year", ylab="population size", xlim=c(0, max(yr)), ylim=c(0, max(n)))
max(yr)
#create names for data so taht it is easier to call and change when the data change
yr       = smry[,1]   #year
yr
max(yr)
#create names for data so taht it is easier to call and change when the data change
yr       = as.numeric(smry[,1])   #year
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/Output/holding") #setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM")
smry = read.table("summary_ABM_run.10.12.22_b_all.csv", header=T, sep=",")
directory = getwd()
outdir = paste(directory, "/figs/", sep = "")
n        = smry[,2]   #population size
n
#create names for data so taht it is easier to call and change when the data change
yr       = smry[,1]   #year
n        = smry[,2]   #population size
propmig  = smry[,3]   #proportion of pop that are migrants
He       = smry[,4]   #He
Ho       = smry[,5]   #Ho
fis      = smry[,6]   #fis vs initialized pop
nadult   = smry[,7]   #number of indv that have reached maturity
sx       = smry[,8]   #sex ratio
nmig     = smry[,9]   #number of migrants
fst      = smry[,10]  #fst vs initialized pop
rep      = smry[,11]  #replicate number
noff     = smry[,13]  #number of offspring produced that year
fstvs    = smry[,14]  #fst vs the source pop
fisvs    = smry[,15]  #fis vs the source pop
png("popsize_overtime.png")
plot(-100, -100 , xlab="year", ylab="population size", xlim=c(0, max(yr)), ylim=c(0, max(n)))
points(yr, n, col="firebrick")
dev.off()
dev.off()
dev.off()
png("popsize_overtime.png")
plot(-100, -100 , xlab="year", ylab="population size", xlim=c(0, max(yr)), ylim=c(0, max(n)))
points(yr, n, col="firebrick")
dev.off()
plot(-100, -100 , xlab="year", ylab="Ho", xlim=c(0, max(yr)), ylim=c((min(Ho)-.1), (max(Ho)+.1)))
points(yr,Ho,col="orchid")
dev.copy(png, "../figs/Ho_over_time.png")
dev.off()
dev.off()
plot(-100, -100 , xlab="year", ylab="Ho", xlim=c(0, max(yr)), ylim=c((min(Ho)-.1), (max(Ho)+.1)))
points(yr,Ho,col="orchid")
dev.copy(png, "/figs/Ho_over_time.png")
dev.'off()
dev.'off()
dev.'off()
dev.off()
mn ''
dev.off()
plot(-100, -100 , xlab="year", ylab="Ho", xlim=c(0, max(yr)), ylim=c((min(Ho)-.1), (max(Ho)+.1)))
points(yr,Ho,col="orchid")
dev.copy(png, "Ho_over_time.png")
ng("Ho_overtime.png")
dev.off()
plot(-100, -100 , xlab="year", ylab="Fis", xlim=c(0, max(yr)), ylim=c((min(fis)-.1), (max(fis)+.1)))
points(yr,Ho,col="orchid")
points(yr,fis,col="dodgerblue")
dev.off()
plot(-100, -100 , xlab="year", ylab="Fis", xlim=c(0, max(yr)), ylim=c((min(fis)-.1), (max(fis)+.1)))
points(yr,fis,col="dodgerblue")
png("fis_overtime.png")
dev.off()
dev.off()
plot(-100, -100 , xlab="year", ylab="Fis", xlim=c(0, max(yr)), ylim=c((min(fis)-.1), (max(fis)+.1)))
points(yr,fis,col="dodgerblue")
png("fis_overtime.png")
dev.off()
png("popsize_overtime.png")
plot(-100, -100 , xlab="year", ylab="population size", xlim=c(0, max(yr)), ylim=c(0, max(n)))
points(yr, n, col="firebrick")
dev.off()
plot(-100, -100 , xlab="year", ylab="Ho", xlim=c(0, max(yr)), ylim=c((min(Ho)-.1), (max(Ho)+.1)))
points(yr,Ho,col="orchid")
png("Ho_overtime.png")
dev.off()
plot(-100, -100 , xlab="year", ylab="Fis", xlim=c(0, max(yr)), ylim=c((min(fis)-.1), (max(fis)+.1)))
points(yr,fis,col="dodgerblue")
png("fis_overtime.png")
dev.off()
png("Ho_overtime.png")
plot(-100, -100 , xlab="year", ylab="Ho", xlim=c(0, max(yr)), ylim=c((min(Ho)-.1), (max(Ho)+.1)))
points(yr,Ho,col="orchid")
dev.off()
png("popsize_overtime.png")
plot(-100, -100 , xlab="year", ylab="population size", xlim=c(0, max(yr)), ylim=c(0, max(n)))
points(yr, n, col="firebrick")
dev.off()
png("fis_overtime.png")
plot(-100, -100 , xlab="year", ylab="Fis", xlim=c(0, max(yr)), ylim=c((min(fis)-.1), (max(fis)+.1)))
points(yr,fis,col="dodgerblue")
dev.off()
plot(-100, -100 , xlab="year", ylab="sex ratio", xlim=c(0, max(yr)), ylim=c((min(sx)-.1), (max(sx)+.1)))
points(yr,sx,col="black")
dev.off()
plot(-100, -100 , xlab="year", ylab="sex ratio", xlim=c(0, max(yr)), ylim=c((min(sx)-.1), (max(sx)+.1)))
lines(yr,sx,col="black")
points(yr,sx,col="black")
dev.off()
png("sexratio_overtime.png")
plot(-100, -100 , xlab="year", ylab="sex ratio", xlim=c(0, max(yr)), ylim=c((min(sx)-.1), (max(sx)+.1)))
points(yr,sx,col="black")
dev.off()
plot(-100, -100 , xlab="year", ylab="Fst", xlim=c(0, max(yr)), ylim=c((min(fst)-.1), (max(fst)+.1)))
points(yr,fst,col="pink")
png("fst_overtime.png")
plot(-100, -100 , xlab="year", ylab="Fst", xlim=c(0, max(yr)), ylim=c((min(fst)-.1), (max(fst)+.1)))
points(yr,fst,col="pink")
dev.off()
dev.off()
plot(-100, -100 , xlab="year", ylab="number of offpsring produced", xlim=c(0, max(yr)), ylim=c(0, (max(noff)))
)
points(yr,noff,col="yellow")
dev.off()
plot(-100, -100 , xlab="year", ylab="Fst vs source", xlim=c(0, max(yr)), ylim=c((min(fstvs)-.1), (max(fstvs)+.1)))
(min(fstvs)-.1)
14
fstvs    = smry[,14]  #fst vs the source pop
min(fstvs)
fstcs
plot(-100, -100 , xlab="year", ylab="Fst vs source", xlim=c(0, max(yr)), ylim=c(0, (max(fstvs)+.1)))
plot(-100, -100 , xlab="year", ylab="Fst vs source", xlim=c(0, max(yr)), ylim=c(0, (max(fstvs)+.1)))
plot(-100, -100 , xlab="year", ylab="Fst vs source", xlim=c(0, max(yr)), ylim=c(0, 1)))
plot(-100, -100 , xlab="year", ylab="Fst vs source", xlim=c(0, max(yr)), ylim=c(0, 1))
points(yr,fstvs,col="pink")
plot(-100, -100 , xlab="year", ylab="Fst vs source", xlim=c(0, max(yr)), ylim=c(0, 0.5))
points(yr,fstvs,col="pink")
points(yr,fstvs,col="goldenrod")
dev.off()
plot(-100, -100 , xlab="year", ylab="Fis vs source", xlim=c(0, max(yr)), ylim=c(0, 0.5))
points(yr,fisvs,col="green")
dev.off()
tab1 = read.table("summary_ABM_run.10.12.22_b_all.csv", header=T, sep=",")
tab2 = read.table("summary_ABM_run.10.12.22_c_all.csv", header=T, sep=",")
tab3 = read.table("summary_ABM_run.10.12.22_d_all.csv", header=T, sep=",")
smry = rbind(tab1,tab2,tab3)
#create names for data so taht it is easier to call and change when the data change
yr       = smry[,1]   #year
n        = smry[,2]   #population size
propmig  = smry[,3]   #proportion of pop that are migrants
He       = smry[,4]   #He
Ho       = smry[,5]   #Ho
fis      = smry[,6]   #fis vs initialized pop
nadult   = smry[,7]   #number of indv that have reached maturity
sx       = smry[,8]   #sex ratio
nmig     = smry[,9]   #number of migrants
fst      = smry[,10]  #fst vs initialized pop
rep      = smry[,11]  #replicate number
noff     = smry[,13]  #number of offspring produced that year
fstvs    = smry[,14]  #fst vs the source pop
fisvs    = smry[,15]  #fis vs the source pop
plot(-100, -100 , xlab="year", ylab="population size", xlim=c(0, max(yr)), ylim=c(0, max(n)))
points(yr, n, col="firebrick")
dev.off()
plot(-100, -100 , xlab="year", ylab="Ho", xlim=c(0, max(yr)), ylim=c((min(Ho)-.1), (max(Ho)+.1)))
points(yr,Ho,col="orchid")
dev.off()
plot(-100, -100 , xlab="year", ylab="Fis", xlim=c(0, max(yr)), ylim=c((min(fis)-.1), (max(fis)+.1)))
points(yr,fis,col="dodgerblue")
dev.off()
plot(-100, -100 , xlab="year", ylab="sex ratio", xlim=c(0, max(yr)), ylim=c((min(sx)-.1), (max(sx)+.1)))
points(yr,sx,col="black")
dev.off()
plot(-100, -100 , xlab="year", ylab="Fst", xlim=c(0, max(yr)), ylim=c((min(fst)-.1), (max(fst)+.1)))
points(yr,fst,col="pink")
dev.off()
plot(-100, -100 , xlab="year", ylab="number of offpsring produced", xlim=c(0, max(yr)), ylim=c(0, (max(noff))))
points(yr,noff,col="yellow")
dev.off()
plot(-100, -100 , xlab="year", ylab="Fst vs source", xlim=c(0, max(yr)), ylim=c(0, 0.5))
points(yr,fstvs,col="goldenrod")
dev.off()
plot(-100, -100 , xlab="year", ylab="Fis vs source", xlim=c(0, max(yr)), ylim=c(0, 0.5))
points(yr,fisvs,col="green")
dev.off()
y=175
#select number of migrants, from 1-5
#  N = sum(pop[,8])  #gets census size
#  Nmig = round(N*.05)  #5% of N will be new migrants == vary this later == perhaps as a parameter???
#  Vmig = round(N*.01)  #adds 1% variance +/- Nmig
#  mig = sample(c((Nmig-Vmig):(Nmig+Vmig)), 1, replace=T) #randomly sample within the variance of Nmig the number of migrants that year
#NOTE-- TO IMPLEMENT THIS, will need to change the number of indv in the source pop, probs around 10k. this will take time tho so I will do this later
#remember that H DROPS significantly when there is only 1-5 migrants per year when K stays around 1000. this is an argument AGAINST the 1 mig per generation rule
if(y == 175){
mig = 50 #sample(c(1:15), 1, replace=T) #put in the number of migrants for this set of runs #OLD
#note that the 1:mig might affect the number. pay attention to this.
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
}
if(y == 175)
#select number of migrants, from 1-5
#  N = sum(pop[,8])  #gets census size
#  Nmig = round(N*.05)  #5% of N will be new migrants == vary this later == perhaps as a parameter???
#  Vmig = round(N*.01)  #adds 1% variance +/- Nmig
#  mig = sample(c((Nmig-Vmig):(Nmig+Vmig)), 1, replace=T) #randomly sample within the variance of Nmig the number of migrants that year
#NOTE-- TO IMPLEMENT THIS, will need to change the number of indv in the source pop, probs around 10k. this will take time tho so I will do this later
#remember that H DROPS significantly when there is only 1-5 migrants per year when K stays around 1000. this is an argument AGAINST the 1 mig per generation rule
if(y == 175){print("yes")}
y
#select number of migrants, from 1-5
#  N = sum(pop[,8])  #gets census size
#  Nmig = round(N*.05)  #5% of N will be new migrants == vary this later == perhaps as a parameter???
#  Vmig = round(N*.01)  #adds 1% variance +/- Nmig
#  mig = sample(c((Nmig-Vmig):(Nmig+Vmig)), 1, replace=T) #randomly sample within the variance of Nmig the number of migrants that year
#NOTE-- TO IMPLEMENT THIS, will need to change the number of indv in the source pop, probs around 10k. this will take time tho so I will do this later
#remember that H DROPS significantly when there is only 1-5 migrants per year when K stays around 1000. this is an argument AGAINST the 1 mig per generation rule
if(y == 175|y == 201|y==225){paste("T")}
y=202
#select number of migrants, from 1-5
#  N = sum(pop[,8])  #gets census size
#  Nmig = round(N*.05)  #5% of N will be new migrants == vary this later == perhaps as a parameter???
#  Vmig = round(N*.01)  #adds 1% variance +/- Nmig
#  mig = sample(c((Nmig-Vmig):(Nmig+Vmig)), 1, replace=T) #randomly sample within the variance of Nmig the number of migrants that year
#NOTE-- TO IMPLEMENT THIS, will need to change the number of indv in the source pop, probs around 10k. this will take time tho so I will do this later
#remember that H DROPS significantly when there is only 1-5 migrants per year when K stays around 1000. this is an argument AGAINST the 1 mig per generation rule
if(y == 175|y == 201|y==225){paste("T")}
