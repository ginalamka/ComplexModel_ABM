Removed ideas and code
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

From Cover.R
#consider adding in rbinom() ?? not sure why it would be relevant yet >>> binomials are for success/failures. would that be helpful?


#Use Janna's papers to look at inbreeding - check other models to see how to put an **inbreeding cost on indvs
#things that her paper has: 
#survival to maturity             .981 and .988
#lifespan (years)                1.971 and 1.986
#juvenile offspring              3.149 and 3.171
#lifetime reproductive success   4.662 nd 4.707

#apply = give data, apply this function over all rows or all columns. can use apply then sample from 0-149

~~~~~~~~~~~~~~~~~~~~~~~~~~~~

From MateChoice.R

#NOTES FROM JANNA 10/19/2021
#try this flow: get all females that are mature, randomize them, then match them with males
#that will rearrange this whole function, but can be done -- SIMPLIFY
#the main thing is to randomize the pairs so that offspring generated are from a random pair
# https://stackoverflow.com/questions/9081498/randomly-re-order-shuffle-rows-of-a-matrix

#*note, because krats have a promiscuous system, allow replacement so multiple indv can mate more than once (monogamous would be set up different)
#as set up currently, only the sex with the most indv will be used more than once (i.e. not both sexes with multiple mating events)
#consider requiring that migrants mate, or dont and then can compare N and Ne(?)


##MAKE SURE TO KNOW IF MALE/FEMALE IS MATE 1or2**





#############################################################################################################
#############################################################################################################
REMOVED CODE
############

#OLD ATTEMPT AT STOCHASTIC.R
#  dead = pop[pop[,8] == 0, , drop=FALSE]                 #remove dead indv
#  alive = pop[-which(pop[,1]%in%dead), , drop = FALSE]
#  #since only returning numboff, dont need to rbind dead and alive into pop
  
  #pop = pop[pop[,4] >= maturity, , drop=FALSE]          #isolate adults -- if only want effective pop size to count here
  
  #calculate the current population size
#  Nt = nrow(alive)
  
  #find new K
  #will k need to be changed for every year or can it get back to the original K? think about these implications
#  if(stoch == 2){
#    new_k = Nt * .95    #drop in K by 5% of pop size
#  }else if(stoch == 1){
#    new_k = Nt * .7    #drop in K by 30%
#  }
  #randomly select indv to die
  #syntax: sample(group, X, replace) with group being the column in the matrix, X being the number to kill per run
#  kill = sample(alive[,1], (Nt - new_k), replace = FALSE)
#  alive = alive[-which(alive[,1]%in%kill),]
  
#  k <- new_k
  
#  print(paste("K is now", k, ". ", nrow(kill), "have been killed"))
  
#  return(alive)

#ADDITONAL ATTEMPT FROM STOCHASTIC.R
#stkill = sample(pop[,1], v, replace = FALSE)     #randomly select
      #killed = pop[-which(pop[,1]%NOTin%stkill), , drop = FALSE]
      
      #if(!is.null(nrow(killed))){                      #kill them
      #  killed[,8] = 0
      #}else if(v<=0){
      #  next
      #}
      #pop <- rbind(pop, killed)
      
#ADDITONAL ATTEMPT FROM STOCHASTIC.R      
      #killed = pop[-which(pop[,1]%NOTin%stkill), , drop = FALSE]   #kill them
      #pop = pop[-which(pop[,1]%in%stkill), , drop = FALSE] 

#    if(!is.null(nrow(killed))){
 #     killed[,8] = 0
  #    pop <- rbind(pop, killed)
   # }
    
    
##################################################################################################################
#REMOVED FROM REPSUCC.R

#calc the longevity of indv
#alive = pop[pop[,8] == 1, , drop=FALSE]          #remove dead indvs

#long = pop[-which(pop[,1]%in%alive), , drop=FALSE]
#table(long[,4])
#hist(long[,4])

##################################################################################################################

#REMOVED FROM DEATH.R

#fake = matrix(nrow=5, ncol = 5)
#fake[,1] = c(1:5)
#fake[,2] = c(-2:2)
#m = fake[fake[,2] <=0, , drop=FALSE]
#m
#if(fake[,1]%in%m){
#  fake[,3] = 1
#}else{
#  fake[,3] = 0
#}