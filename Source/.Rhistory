b=Sepal_L_mm=c(50,46,48,49,51,50) #set b values
a #view column
y=Petal_W_mm=c(2,2,2,1,2,2) #set y values
z=Petal_L_mm=c(14,10,16,14,16,16) #set z values
a=Sepal_W_mm=c(33,36,31,36,38,30) #set a values
b=Sepal_L_mm=c(50,46,48,49,51,50) #set b values
a #view column
b #view column
x #view column
df=manual_df<-data.frame(x,y,z,a,b) #name data frame as "manual_df"
df #view table of data
#Ch 6 Exercise
samples=as.data.frame(matrix(rexp(1000*40,0.01),ncol=40)
#Ch 6 Exercise
samples=as.data.frame(matrix(rexp(1000*40,0.01),ncol=40)
#Ch 6 Exercise
#Ch 6 Exercise
samples=as.data.frame(matrix(rexp(1000*40,0.01),ncol=40)
mean_5=rowMeans(samples[,1:5])
#Ch 6 Exercise
samples=as.data.frame(matrix(rexp(1000*40,0.01),ncol=40))
mean_5=rowMeans(samples[,1:5])
mean_15=rowMeans(samples[,1:15])
mean_40=rowMeans(samples[,1:40])
mean_40=rowMeans(samples[,1:40])
mean(mean_5)
sd(mean_5)
mean(mean_15)
sd(mean_15)
mean(mean_40)
sd(mean_40)
shapiro.test(samples[,1])
shapiro.test(mean_5)
shapiro.test(mean_25)
shapiro.test(mean_15)
shapiro.test(mean_40)
boxplot(cbind(samples[,1],mean_5,mean_15,mean_40))
#Ch 6 Exercise
samples=as.data.frame(matrix(rexp(1000*40,0.01),ncol=40))
mean_5=rowMeans(samples[,1:5])
mean_15=rowMeans(samples[,1:15])
mean_40=rowMeans(samples[,1:40])
mean(mean_5)
sd(mean_5)
mean(mean_15)
sd(mean_15)
mean(mean_40)
sd(mean_40)
shapiro.test(samples[,1])
shapiro.test(mean_5)
shapiro.test(mean_15)
shapiro.test(mean_40)
boxplot(cbind(samples[,1],mean_5,mean_15,mean_40))
#Cover.R
#used for the complex migration model
setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM") #setwd("C:/Users/HP/Box/New Computer/Auburn/Data/ComplexModel_ABM")
directory = getwd()
outdir = paste(directory, "/Output/", sep = "")
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
#parameters
k.V           = 1000 #c(1000, 5000, 10000)                #carrying capacity
nSNP.V        = 10  #scaleup                #number of SNPs simulated, used to track drift
maxage.V      = 9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = 1                   #age indv becomes reproductively mature
years.V       = 10#250  #scaleup               #total run time; 200 year run following 50 year stabilization period
r0.V          = 1 #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #1 is stable, <1 is decreasing, >1 is increasing
ratemort.V    = 1/(maxage.V*2) ###0.2225 #??##(1/(maxage.V+2))      #proportion of adults that die each year --CHECK WITH JANNA WHERE THIS NUMBER CAME FROM; current value of .2225 is from Waser and Jones 1991
nSNP.mig.V    = 10                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons.V   = 10        #number of conserved alleles within species -- used to track mutation
### when adding variables already marked out, don't forget to add 3 times below, on RunModel, and other functions that need the variable fed in
#REMOVED###allele.V      = c(0,1)              #alleles assigned to individuals, equal probability of each at all loci, A = 1, a = 0
#REMOVED###nMicro.V      = 100 #tbd                 #number of microsats simulated
#REMOVED###sex.V         = c(0,1)              #males and females in population, 0 = Female, 1 = Male
#REMOVED###sexratio.V    = 0.5                 #equal ratio of females:males; consider a more real life value here, taken from pedigree data with Poisson dist
#REMOVED###reps.V        = 5 #scaleup                 #number of replications of the simulation
#potential migration rates: 1-5 indv, 5-10 indv, no migration
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "maxage", "broodsize", "maturity", "years", "r0", "ratemort", "nSNP.mig", "nSNP.cons")
#clean up, remember that these are still available in parameters
remove(nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V) #k.V
#2/28/22 I am removing k.V from this so I can reference it in Stochastsic.R
replicates    = 2 #20 #5 #10
plotit        = 1    #1=yes, 0=no
plotit2       = 1    #1=yes, 0=no
r             = 1
stoch         = 0    #2=stairstep decrease every year, 1=dramatic drop in k, 0=no
mutate        = 0    #1=yes, 0=no   #average mammalian genome mutation rate is 2.2 x 10^-9 per base pair per year, https://doi.org/10.1073/pnas.022629899
#krats = 2844.77 MB = 2844770000 bp x 2.2*10-9  = 6.258494 === does this matter here???
#bannertailed 0.0081 mutants/generation/locus, in Busch, Waser, and DeWoody 2007 doi: 10.1111/j.1365-294X.2007.03283.x.
mu            = 0.001  #mutation rate
styr          = 100 #year to start pop decline
edyr          = 150 #year to end pop decline, first year at low pop size
nwk           = 250 #pop size after decline -- probs makes sense to keep these even in vary decline years and decline rate. should end @ same pt for all pop sizes
dur           = 50  #duration of small pop size before pop growth
s             = 5000 #size of source pop
#run model iterating over parameters
theEND = NULL
repEND = NULL
for(r in 1:nrow(parameters)){
ALL = RunModel(parameters, r, directory, replicates)
FINAL = ALL[[1]]
POP = ALL[[2]]
REP = ALL[[3]]
####REMOVED## POP = RunModel(parameters, r, directory, replicates)
####REMOVED## write.table(POP, paste(directory, "/Output/CoverPop", r, ".csv", sep=""), sep=",", col.names=TRUE, row.names=F)
#####REMOVED##write.table(POP, paste(directory, "/Output/CoverPop.txt", sep=""), sep="\t", col.names=TRUE, row.names=F)  #use this for a .txt file, good for in a text editor. ; "/t" for macs
theEND = rbind(theEND, FINAL)
repEND = rbind(repEND, REP)
}
#write.table(theEND, paste(directory, "/Output/summary_", r, ".csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE)
#summary table should have nrows = nparameters * nyears * nreplicates
#^^ may have some fewer than above because some simulations may break before all years are able to be run
Plot(theEND)
Plot2(repEND)
#Cover.R
#used for the complex migration model
setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM") #setwd("C:/Users/HP/Box/New Computer/Auburn/Data/ComplexModel_ABM")
directory = getwd()
outdir = paste(directory, "/Output/", sep = "")
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
#parameters
k.V           = 1000 #c(1000, 5000, 10000)                #carrying capacity
nSNP.V        = 10  #scaleup                #number of SNPs simulated, used to track drift
maxage.V      = 9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = 1                   #age indv becomes reproductively mature
years.V       = 10#250  #scaleup               #total run time; 200 year run following 50 year stabilization period
r0.V          = 1 #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #1 is stable, <1 is decreasing, >1 is increasing
ratemort.V    = 1/(maxage.V*2) ###0.2225 #??##(1/(maxage.V+2))      #proportion of adults that die each year --CHECK WITH JANNA WHERE THIS NUMBER CAME FROM; current value of .2225 is from Waser and Jones 1991
nSNP.mig.V    = 10                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons.V   = 10        #number of conserved alleles within species -- used to track mutation
### when adding variables already marked out, don't forget to add 3 times below, on RunModel, and other functions that need the variable fed in
#REMOVED###allele.V      = c(0,1)              #alleles assigned to individuals, equal probability of each at all loci, A = 1, a = 0
#REMOVED###nMicro.V      = 100 #tbd                 #number of microsats simulated
#REMOVED###sex.V         = c(0,1)              #males and females in population, 0 = Female, 1 = Male
#REMOVED###sexratio.V    = 0.5                 #equal ratio of females:males; consider a more real life value here, taken from pedigree data with Poisson dist
#REMOVED###reps.V        = 5 #scaleup                 #number of replications of the simulation
#potential migration rates: 1-5 indv, 5-10 indv, no migration
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "maxage", "broodsize", "maturity", "years", "r0", "ratemort", "nSNP.mig", "nSNP.cons")
#clean up, remember that these are still available in parameters
remove(nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V) #k.V
#2/28/22 I am removing k.V from this so I can reference it in Stochastsic.R
replicates    = 2 #20 #5 #10
plotit        = 1    #1=yes, 0=no
plotit2       = 1    #1=yes, 0=no
r             = 1
stoch         = 0    #2=stairstep decrease every year, 1=dramatic drop in k, 0=no
mutate        = 0    #1=yes, 0=no   #average mammalian genome mutation rate is 2.2 x 10^-9 per base pair per year, https://doi.org/10.1073/pnas.022629899
#krats = 2844.77 MB = 2844770000 bp x 2.2*10-9  = 6.258494 === does this matter here???
#bannertailed 0.0081 mutants/generation/locus, in Busch, Waser, and DeWoody 2007 doi: 10.1111/j.1365-294X.2007.03283.x.
mu            = 0.001  #mutation rate
styr          = 100 #year to start pop decline
edyr          = 150 #year to end pop decline, first year at low pop size
nwk           = 250 #pop size after decline -- probs makes sense to keep these even in vary decline years and decline rate. should end @ same pt for all pop sizes
dur           = 50  #duration of small pop size before pop growth
s             = 5000 #size of source pop
#run model iterating over parameters
theEND = NULL
repEND = NULL
for(r in 1:nrow(parameters)){
ALL = RunModel(parameters, r, directory, replicates)
FINAL = ALL[[1]]
POP = ALL[[2]]
REP = ALL[[3]]
####REMOVED## POP = RunModel(parameters, r, directory, replicates)
####REMOVED## write.table(POP, paste(directory, "/Output/CoverPop", r, ".csv", sep=""), sep=",", col.names=TRUE, row.names=F)
#####REMOVED##write.table(POP, paste(directory, "/Output/CoverPop.txt", sep=""), sep="\t", col.names=TRUE, row.names=F)  #use this for a .txt file, good for in a text editor. ; "/t" for macs
theEND = rbind(theEND, FINAL)
repEND = rbind(repEND, REP)
}
#write.table(theEND, paste(directory, "/Output/summary_", r, ".csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE)
#summary table should have nrows = nparameters * nyears * nreplicates
#^^ may have some fewer than above because some simulations may break before all years are able to be run
Plot(theEND)
Plot2(repEND)
plot(-100, -100 , xlab="Generation born", ylab="LRS", xlim=c(min(yr), max(yr)), ylim=c(0, (mxLRS+mxSDL)))
for(p in unique(par)){
for(i in unique(rep)){  #this allows each rep to be a dif line rather than the lines through it. DO THIS FOR ALL PLOTS
temp <- repEND[rep == i,] #create temp matrix for each unique replicate
LRS <- temp[,3]
lines(yr, LRS, lwd=2) #points(sub[,1], Ho, lwd=2)
sd <- temp[,4]
uppersd = LRS + sd
lowersd = LRS - sd
lines(yr, uppersd, lwd=1)
lines(yr, lowersd, lwd=1)
polygon(x = c(yr, rev(yr)), y = c(uppersd, rev(lowersd)), col = "lightblue", density = 40, angle = 90)
}
}
dev.copy(png, "../Output/LRS_over_time.png")
dev.off()
rep = repEND[,9]                 #grabs replicate
par = repEND[,10]                #grabs parameter set
yr = unique(repEND[,1])          #grabs unique year values
mxLRS = ceiling(max(repEND[,3])) #rounds up the maximum LRS
mxRRS = ceiling(max(repEND[,7])) #rounds up the maximum RRS
mxindv= ceiling(max(repEND[,2])) #rounds up the maximum number of indv born
mxSDL = ceiling(max(repEND[,4])) #rounds up the maximum SD in LRS
mxSDR = ceiling(max(repEND[,8])) #rounds up the maximum SD in RRS
plot(-100, -100 , xlab="Generation born", ylab="LRS", xlim=c(min(yr), max(yr)), ylim=c(0, (mxLRS+mxSDL)))
for(p in unique(par)){
for(i in unique(rep)){  #this allows each rep to be a dif line rather than the lines through it. DO THIS FOR ALL PLOTS
temp <- repEND[rep == i,] #create temp matrix for each unique replicate
LRS <- temp[,3]
lines(yr, LRS, lwd=2) #points(sub[,1], Ho, lwd=2)
sd <- temp[,4]
uppersd = LRS + sd
lowersd = LRS - sd
lines(yr, uppersd, lwd=1)
lines(yr, lowersd, lwd=1)
polygon(x = c(yr, rev(yr)), y = c(uppersd, rev(lowersd)), col = "lightblue", density = 40, angle = 90)
}
}
dev.copy(png, "../Output/LRS_over_time.png")
dev.off()
plot(-100, -100 , xlab="Generation born", ylab="RRS", xlim=c(min(yr), max(yr)), ylim=c(0, (mxRRS+mxSDR)))
for(p in unique(par)){
for(i in unique(rep)){  #this allows each rep to be a dif line rather than the lines through it. DO THIS FOR ALL PLOTS
temp <- repEND[rep == i,] #create temp matrix for each unique replicate
RRS <- temp[,7]
lines(yr, RRS, lwd=2) #points(sub[,1], Ho, lwd=2)
sd <- temp[,8]
uppersd = RRS + sd
lowersd = RRS - sd
lines(yr, uppersd, lwd=1)
lines(yr, lowersd, lwd=1)
polygon(x = c(yr, rev(yr)), y = c(uppersd, rev(lowersd)), col = "lightpink", density = 40, angle = 45)
}
}
dev.copy(png, "../Output/RRS_over_time.png")
dev.off()
#Cover.R
#used for the complex migration model
setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM") #setwd("C:/Users/HP/Box/New Computer/Auburn/Data/ComplexModel_ABM")
directory = getwd()
outdir = paste(directory, "/Output/", sep = "")
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
#parameters
k.V           = 1000 #c(1000, 5000, 10000)                #carrying capacity
nSNP.V        = 10  #scaleup                #number of SNPs simulated, used to track drift
maxage.V      = 9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = 1                   #age indv becomes reproductively mature
years.V       = 250  #scaleup               #total run time; 200 year run following 50 year stabilization period
r0.V          = 1 #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #1 is stable, <1 is decreasing, >1 is increasing
ratemort.V    = 1/(maxage.V*2) ###0.2225 #??##(1/(maxage.V+2))      #proportion of adults that die each year --CHECK WITH JANNA WHERE THIS NUMBER CAME FROM; current value of .2225 is from Waser and Jones 1991
nSNP.mig.V    = 10                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons.V   = 10        #number of conserved alleles within species -- used to track mutation
### when adding variables already marked out, don't forget to add 3 times below, on RunModel, and other functions that need the variable fed in
#REMOVED###allele.V      = c(0,1)              #alleles assigned to individuals, equal probability of each at all loci, A = 1, a = 0
#REMOVED###nMicro.V      = 100 #tbd                 #number of microsats simulated
#REMOVED###sex.V         = c(0,1)              #males and females in population, 0 = Female, 1 = Male
#REMOVED###sexratio.V    = 0.5                 #equal ratio of females:males; consider a more real life value here, taken from pedigree data with Poisson dist
#REMOVED###reps.V        = 5 #scaleup                 #number of replications of the simulation
#potential migration rates: 1-5 indv, 5-10 indv, no migration
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "maxage", "broodsize", "maturity", "years", "r0", "ratemort", "nSNP.mig", "nSNP.cons")
#clean up, remember that these are still available in parameters
remove(nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V) #k.V
#2/28/22 I am removing k.V from this so I can reference it in Stochastsic.R
replicates    = 3 #20 #5 #10
plotit        = 1    #1=yes, 0=no
plotit2       = 1    #1=yes, 0=no
r             = 1
stoch         = 0    #2=stairstep decrease every year, 1=dramatic drop in k, 0=no
mutate        = 0    #1=yes, 0=no   #average mammalian genome mutation rate is 2.2 x 10^-9 per base pair per year, https://doi.org/10.1073/pnas.022629899
#krats = 2844.77 MB = 2844770000 bp x 2.2*10-9  = 6.258494 === does this matter here???
#bannertailed 0.0081 mutants/generation/locus, in Busch, Waser, and DeWoody 2007 doi: 10.1111/j.1365-294X.2007.03283.x.
mu            = 0.001  #mutation rate
styr          = 100 #year to start pop decline
edyr          = 150 #year to end pop decline, first year at low pop size
nwk           = 250 #pop size after decline -- probs makes sense to keep these even in vary decline years and decline rate. should end @ same pt for all pop sizes
dur           = 50  #duration of small pop size before pop growth
s             = 5000 #size of source pop
#run model iterating over parameters
theEND = NULL
repEND = NULL
for(r in 1:nrow(parameters)){
ALL = RunModel(parameters, r, directory, replicates)
FINAL = ALL[[1]]
POP = ALL[[2]]
REP = ALL[[3]]
####REMOVED## POP = RunModel(parameters, r, directory, replicates)
####REMOVED## write.table(POP, paste(directory, "/Output/CoverPop", r, ".csv", sep=""), sep=",", col.names=TRUE, row.names=F)
#####REMOVED##write.table(POP, paste(directory, "/Output/CoverPop.txt", sep=""), sep="\t", col.names=TRUE, row.names=F)  #use this for a .txt file, good for in a text editor. ; "/t" for macs
theEND = rbind(theEND, FINAL)
repEND = rbind(repEND, REP)
}
#write.table(theEND, paste(directory, "/Output/summary_", r, ".csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE)
#summary table should have nrows = nparameters * nyears * nreplicates
#^^ may have some fewer than above because some simulations may break before all years are able to be run
Plot(theEND)
Plot2(repEND)
traceback()
Plot(theEND)
rep      = theEND[,11]                 #grabs replicate column
para      = theEND[,12]                 #grabs parameter set
yr       = unique(theEND[, 1])         #grabs unique years
mxk      = ceiling(max(theEND[,2]))    #rounds up the maximum pop size. Note should = k
N        = theEND[,2]                  #grabs population size
adults   = theEND[,7]                  #grabs total number of adults
He       = theEND[,4]                  #grabs expected heterozygosity
Ho       = theEND[,5]                  #grabs observed heterozygosity
sxratio  = theEND[,8]                  #grabs the sex ratio
migprop  = theEND[,3]                  #grabs the proportion of migrants in the population
nmig     = theEND[,9]                  #grabs the number of migrants in the population
fst      = theEND[,10]
#########################################################
#Plot the population size and number of adults over time
plot(-100, -100 , xlab="Time (generation)", ylab="Population Size", xlim=c(0, max(yr)), ylim=c(0, mxk))
for(p in unique(para)){
for(i in unique(rep)){
sub <- theEND[rep == i,] #unique replicate
lines(yr, sub[,2], lwd=2)
lines(yr, sub[,7], col="blue", lwd=2)
}
}
legend("bottomleft", legend=c("total population size", "total number of adults"),
col=c("black", "blue"), lty=1:1, cex=0.8)
dev.copy(png, "../Output/total_and_adult_population_size_over_time.png")
dev.off()
##########################################################
#Plot the proportion of migrants in the population over time
plot(-100, -100 , xlab="Time (generation)", ylab="Proprtion of migrants in population", xlim=c(0, max(yr)), ylim=c(0, 1))
for(p in unique(para)){
for(i in unique(rep)){  #this allows each rep to be a dif line rather than the lines through it. DO THIS FOR ALL PLOTS
sub <- theEND[rep == i,]  #unique replicate
lines(yr, sub[,3], lwd=2)
}
}
dev.copy(png, "../Output/proportion_of_migrants_in_the_population_over_time.png")
dev.off()
###########################################################
#Plot the observed vs expected hetero
plot(-100, -100 , xlab="Expected heterozygosity", ylab="Observed heterozygosity", xlim=c(0, 1), ylim=c(0, 1))
for(p in unique(para)){
for(i in unique(rep)){  #this allows each rep to be a dif line rather than the lines through it. DO THIS FOR ALL PLOTS
sub <- theEND[rep == i,] #unique replicate
HE <- sub[,4]
HO <- sub[,5]
points(HE, HO, lwd=2)
}
}
abline(coef = c(0,1), col = "red")
dev.copy(png, "../Output/observed_vs_expected_heterozygosity.png")
View(FINAL)
plot(-100, -100 , xlab="Time (generation)", ylab="Population Size", xlim=c(0, max(yr)), ylim=c(0, mxk))
for(p in unique(para)){
for(i in unique(rep)){
sub <- theEND[rep == i,] #unique replicate
lines(yr, sub[,2], lwd=2)
lines(yr, sub[,7], col="blue", lwd=2)
}
}
legend("bottomleft", legend=c("total population size", "total number of adults"),
col=c("black", "blue"), lty=1:1, cex=0.8)
dev.copy(png, "../Output/total_and_adult_population_size_over_time.png")
rep
para
unique(para)
unique(rep)
i
#########################################################
#Plot the population size and number of adults over time
plot(-100, -100 , xlab="Time (generation)", ylab="Population Size", xlim=c(0, max(yr)), ylim=c(0, mxk))
for(p in unique(para)){
for(i in unique(rep)){
sub <- theEND[rep == i,] #unique replicate
lines(yr, sub[,2], lwd=2)
lines(yr, sub[,7], col="blue", lwd=2)
}
}
traceback()
#########################################################
#Plot the population size and number of adults over time
plot(-100, -100 , xlab="Time (generation)", ylab="Population Size", xlim=c(0, max(yr)), ylim=c(0, mxk))
for(p in unique(para)){
temp <- theEND[para == p,]
for(i in unique(rep)){
sub <- theEND[rep == i,] #unique replicate
lines(yr, sub[,2], lwd=2)
lines(yr, sub[,7], col="blue", lwd=2)
}
}
legend("bottomleft", legend=c("total population size", "total number of adults"),
col=c("black", "blue"), lty=1:1, cex=0.8)
#########################################################
#Plot the population size and number of adults over time
plot(-100, -100 , xlab="Time (generation)", ylab="Population Size", xlim=c(0, max(yr)), ylim=c(0, mxk))
for(p in unique(para)){
#temp <- theEND[para == p,]
for(i in unique(rep)){
sub <- theEND[rep == i,] #unique replicate
lines(yr, sub[,2], lwd=2)
lines(yr, sub[,7], col="blue", lwd=2)
}
}
for(p in unique(para)){
temp <- theEND[para == p,]
for(i in unique(rep)){
sub <- theEND[rep == i,] #unique replicate
lines(yr, sub[,2], lwd=2)
lines(yr, sub[,7], col="blue", lwd=2)
}
}
for(p in unique(para)){
temp <- theEND[para == p,]
for(i in unique(rep)){
sub <- theEND[rep == i,] #unique replicate
lines(yr, sub[,2], lwd=2)
lines(yr, sub[,7], col="blue", lwd=2)
}
}
#########################################################
#Plot the population size and number of adults over time
plot(-100, -100 , xlab="Time (generation)", ylab="Population Size", xlim=c(0, max(yr)), ylim=c(0, mxk))
for(p in unique(para)){
temp <- theEND[para == p,]
for(i in unique(rep)){
sub <- theEND[rep == i,] #unique replicate
lines(yr, sub[,2], lwd=2)
lines(yr, sub[,7], col="blue", lwd=2)
}
}
length(sub[,2])
length(yr)
View(theEND)
View(theEND)
#########################################################
#Plot the population size and number of adults over time
plot(-100, -100 , xlab="Time (generation)", ylab="Population Size", xlim=c(0, max(yr)), ylim=c(0, mxk))
for(p in unique(para)){
temp <- theEND[para == p,]
for(i in unique(rep)){
sub <- temp[rep == i,] #unique replicate
lines(yr, sub[,2], lwd=2)
lines(yr, sub[,7], col="blue", lwd=2)
}
}
length(theEND[,1])
length(unique((theEND[,1]))
)
length(theEND[,2])
length(unique((theEND[,1])))
