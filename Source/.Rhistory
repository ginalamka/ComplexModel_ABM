remove(nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V) #k.V
#2/28/22 I am removing k.V from this so I can reference it in Stochastsic.R
replicates    = 2 #20 #5 #10
plotit        = 1    #1=yes, 0=no
plotit2       = 1    #1=yes, 0=no
r             = 1
stoch         = 0    #2=stairstep decrease every year, 1=dramatic drop in k, 0=no
mutate        = 0    #1=yes, 0=no   #average mammalian genome mutation rate is 2.2 x 10^-9 per base pair per year, https://doi.org/10.1073/pnas.022629899
#krats = 2844.77 MB = 2844770000 bp x 2.2*10-9  = 6.258494 === does this matter here???
#bannertailed 0.0081 mutants/generation/locus, in Busch, Waser, and DeWoody 2007 doi: 10.1111/j.1365-294X.2007.03283.x.
mu            = 0.001  #mutation rate
styr          = 100 #year to start pop decline
edyr          = 150 #year to end pop decline, first year at low pop size
nwk           = 250 #pop size after decline -- probs makes sense to keep these even in vary decline years and decline rate. should end @ same pt for all pop sizes
dur           = 50  #duration of small pop size before pop growth
s             = 5000 #size of source pop
#run model iterating over parameters
theEND = NULL
repEND = NULL
FINAL = NULL
REP   = NULL
rr=1
k             = parameters$k[r]
#REMOVED###allele        = parameters$allele[r]
nSNP          = parameters$nSNP[r]
nMicro        = parameters$nMicro[r]
#REMOVED###sex           = parameters$sex[r]
maxage        = parameters$maxage[r]
broodsize     = parameters$broodsize[r]
#REMOVED###sexratio      = parameters$sexratio[r]
maturity      = parameters$maturity[r]
years         = parameters$years[r]
r0            = parameters$r0[r]
ratemort      = parameters$ratemort[r]
nSNP.mig      = parameters$nSNP.mig[r]                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons     = parameters$nSNP.cons[r]                  #number of conserved alleles
#initialize population
pop = matrix(nrow=k, ncol=11)            #each individual gets its own row.. matrix > dataframe -- "ncol = 7 + (nloci)*2
colnames(pop) <- c("id", "mom", "dad", "age", "sex", "n offspring", "n adult offspring", "alive", "gen born", "gen died", "relative fitness") #just to give a better understanding of what these variables are, set names
pop[,1] = seq(1,k,1)                    #each individual has unique ID name; sequence starting at 1, through k, with each 1 interation
pop[,2:3] = 0                            #at this point, we are putting all equal to zero because this is the initial generation and we dont know parents
#pop[,2] = rep(0,k)                      #mom id - later will not be 0, this is useful for debugging #saying replicate 0 100 times
#pop[,3] = rep(0,k)                      #dad id - later will not be 0, this is useful for debugging
pop[,4] = rpois(k,maturity)-1  ##sample(seq(0,maxage,1),k,replace=T)-1   #set age between 0 and 4 and subtract 1 because we add one at the first generation #FOR UNIFORM DIST: dunif(k, min =0, max = maturity, log = FALSE)-1
pop[,5] = sample(c(0,1),k,replace=T)    #each individual assigned male (1) or female (0) #sample from zero k times, with replacements. aka set sex
pop[,6] = NA #this will be for number of times as a parent  #REMOVED###sample(c(0,1),k,replace=T)    #set allele 1 as either A=1 or a=0
pop[,7] = NA #this will be for number of times offspring survive to maturity   #REMOVED###sample(c(0,1),k,replace=T)    #set allele 2 as either A=1 or a=0
pop[,8] = 1                             #alive or dead? alive = 1, dead = 0
pop[,9] = 0                             #generation born
pop[,10] = 0                            #generation died
pop[,11] = 0                            #relative fitness #at this point, we are putting all equal to zero because this is the initial generation
sz = k #to keep track of the number of indv for ID'ing later
#generate SNPs for the starting pop -- taken from Janna's Captive breeding IBM
popgen = matrix(nrow=k, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = sample(seq(from=0, to=1, by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(k*p*p, 0)),                                      #homozygous p*p
rep(1, round(k*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, k-(round(k*p*p, 0)+(round(k*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, k, replace = FALSE)
for(kk in 1:k){
if(gtype[kk]==0){                 #homo (0,0)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 0
next
}else if(gtype[kk]==1){           #hetero (0,1)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 1
}else{                            #homo (1,1)
popgen[kk,columns[l]]   = 1
popgen[kk,columns[l]+1] = 1
}
}
#colnames(popgen) <- c('SNP', l)
pool = NULL
#add genotypes to pop matrix
}
#create migrant and nonmigrant unique SNPs
popSNPs = matrix(nrow=k, ncol=nSNP.mig*2)
columnsb = seq(1,(nSNP.mig*2),2)
for(b in 1:nrow(popSNPs)){    #set up similar to above in case change the sequence or format later
popSNPs[b,] = 0
}
#create conserved SNPs
conSNPs = matrix(nrow=k, ncol=nSNP.cons*2)
columnsc = seq(1,(nSNP.cons*2),2)
for(c in 1:nrow(conSNPs)){    #set up similar to above in case change the sequence or format later
conSNPs[c,] = 0
}
focalpop <- cbind(pop, popgen, popSNPs, conSNPs)   ##??not sure why, but not binding correctly???
pop <- focalpop
#write starting pop to table
####REMOVED### write.table(pop, paste(directory, "/Output/focal_population", r, ".csv", sep=""), sep=",", col.names=T, row.names=F)
#clean up
remove(popgen, popSNPs, conSNPs)
#notes from talking with Janna 10/21 -- doesnt quite work yet
#plan is to add in additional SNPs to track genotypes. this will help set up Breed.R
#f = 0.2 #allele freq, means 20% of the time, allele 0, 80% of the time, allele 1
#x = sample(c(0,1), 2(nrow(pop)), freq = c(f,1-f))
#pop[,i] = x[1:nrow(pop)]
#pop[,i+1] = x[nrow(pop)+1:length(x)]
#for(i in 1:10){
#  seq(1,nSNP*2,2)
#  }
#make sure to add in additional SNPs for Source pop also!!
#options for SNPs = can do 0-2 values with 1 column per SNP OR 2 columns per SNP with 0-1
#implications of each decision is based on calculating heterozygosity vs generating offspring
#initialize source population
source = matrix(nrow=s, ncol=11)            #each individual gets its own row.. matrix > dataframe
colnames(source) <- c("id", "mom", "dad", "age", "sex", "n offspring", "n adult offspring", "alive", "gen born", "gen died", "relative fitness") #just to give a better understanding of what these variables are, set names
source[,1] = seq(-(s),-1,1)                     #each individual has unique ID name; sequence starting at -1, through -k, with each 1 interation, negative flag for source pop
source[,2:3] = -1                           #at this point, we are putting all equal to negative 1 to flag from source pop, and we dont know parents/parents arent in focal pop
source[,4] = sample(seq(0,maxage,1),s,replace=T)   #set age between 0 and 4 (source isnt aged, so dont subtract 1); consider if age 0 should be able to migrate
source[,5] = sample(c(0,1),s,replace=T)    #each individual assigned male (1) or female (0) #sample from zero k times, with replacements. aka set sex
source[,6] = NA #this will be for number of times as a parent   #REMOVED##sample(c(0,1),k,replace=T)    #set allele 1 as either A=1 or a=0
source[,7] = NA #for number of offspring that reach maturity ##REMOVED#### sample(c(0,1),k,replace=T)    #set allele 2 as either A=1 or a=0
source[,8] = 1                             #alive or dead? alive = 1, dead = 0
source[,9] = -1                            #generation born
source[,10] = 0                            #generation died
source[,11] = 0                            #relative fitness
#generate source gentoypes
sourcegen = matrix(nrow=s, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = sample(seq(from=0, to=1, by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(s*p*p, 0)),                                      #homozygous p*p
rep(1, round(s*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, s-(round(s*p*p, 0)+(round(s*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, s, replace = FALSE)
for(ss in 1:s){
if(gtype[ss]==0){                 #homo (0,0)
sourcegen[ss,columns[l]]   = 0
sourcegen[ss,columns[l]+1] = 0
next
}else if(gtype[ss]==1){           #hetero (0,1)
sourcegen[ss,columns[l]]   = 0
sourcegen[ss,columns[l]+1] = 1
}else{                            #homo (1,1)
sourcegen[ss,columns[l]]   = 1
sourcegen[ss,columns[l]+1] = 1
}
}
#colnames(sourcegen) <- c('SNP', l)
#pool = NULL
#add genotypes to source matrix
}
#create migrant and nonmigrant unique SNPs
migSNPs = matrix(nrow=s, ncol=nSNP.mig*2)
columnsd= seq(1,(nSNP.mig*2),2)
for(d in 1:nrow(migSNPs)){    #set up similar to above in case change the sequence or format later
migSNPs[d,] = 1
}
#create conserved SNPs
conSNPs = matrix(nrow=s, ncol=nSNP.cons*2)
columnse = seq(1,(nSNP.cons*2),2)
for(e in 1:nrow(conSNPs)){    #set up similar to above in case change the sequence or format later
conSNPs[e,] = 0
}
source1 <- cbind(source, sourcegen, migSNPs, conSNPs)        #also doesnt work????
source <- source1
#write starting source to table
#### REMOVED### write.table(source, paste(directory, "/Output/source", r, ".csv", sep=""), sep=",", col.names=T, row.names=F)
#clean up
remove(sourcegen, pool, migSNPs, l, c, d, kk, ss)
remove(gtype, columns, columnsb, columnsc, columnsd, columnse)
y=1
pop = AgeUp(pop)                        #age pop + 1 year
pop = Death(pop, maxage, ratemort, y)                #kill indv
#pop = DeathByAge(pop, maxage)           #age-dependent mortality
if(nrow(pop) <= 10){
print(paste("Population low, less than 10 indv"))
break
}
tttt = Stochastic(pop, stoch, k, numboff, styr, endyr, nwk, dur, y, years, r0, k.V)
pop = tttt[[1]]
k = tttt[[2]]
if(nrow(pop) <= 10){
print(paste("Population low, less than 10 indv"))
break
}
#pop = RandomDeath(pop)                  #random mortality
tt = Migrate(pop, source)             #subpop migration
pop = tt[[1]]
mig = tt[[2]]
sz = sz + mig #may need to edit since dead are not being removed from pop
source = tt[[3]]
if(nrow(pop) <= 4){
print(paste("Population crash @ MateChoice, less than 4 indv"))
break
}
pairs = MateChoice(pop, sex, maturity)
if(is.null(pairs)==TRUE){
print(paste("skipping pop size next, breed due to no parents"))
break  #consider whether this should be next or break
}
if(sum(pairs[,1]) < 0 | sum(pairs[,2]) < 0){
print(paste("Only migrants available as parents"))
break
}
numboff = PopSizeNext(pop, k, r0, maturity) #IT NOW WORKS CUZ ALLY IS A GENIUS
if(numboff <= 1){
print(paste("No new babies, skip breed"))
next
}
numbodd
numboff
#randomly select pairings from pairs so that there are double the number of pairs than offspring needed to be generated (since broodsize can be 0)
if(is.null(nrow(pairs))==TRUE){
print(paste("no pairs of parents available"))
break
}else if(nrow(pairs)>= numboff*2){
pairings = sample(1:nrow(pairs), numboff*2, replace = F, prob = NULL)
}else{
pairings = sample(1:nrow(pairs), numboff, replace = T, prob = NULL) ### DOUBLE CHECK THAT replace=T does not fuck this up, error tends to occurr when numboff = 2
}
parents <- pairs[pairings,]
#generate fecundity for each set of parents
fecundity = sample(seq(1,broodsize,1),nrow(parents),replace=T, prob = NULL) #change the number of offspring to biologically relevant number later
parents <- cbind(parents, fecundity)
nbabes = sum(parents[,3])
TEMP = NULL
for(n in 1:nrow(parents)){
t = parents[n, ,drop=FALSE] #need drop = false or else will lose
f = t[1,3]       #use this to store the number of offspring per parent set
t[1,3] = 1       #use this as a check for later on to make sure this loop works
while(f > 0){
TEMP = rbind(TEMP, t)
f = f - 1
if(f==0){       #another check so it doesnt get stuck in this loop
break
}
}
}
parents = TEMP
remove(TEMP)
View(parents)
#generate unique IDS
##REMOVED### newid = seq(from = (max(pop[,1])*10) +1, to = (max(pop[,1])*10) + nrow(parents), by = 1)
SZ = seq(from = sz+1, to = sz + nrow(parents), by =1)
babies = matrix(nrow=nrow(parents), ncol=11) #make new matrix for offspring
colnames(babies) <- c("id", "mom", "dad", "age", "sex", "n offspring", "n adult offspring", "alive", "gen born", "gen died", "relative fitness")
babies[,1] = SZ                   #each individual has unique ID name; sequence starting at 1, through k, with each 1 iteration
babies[,2] = parents[,1]
babies[,3] = parents[,2]
babies[,4] = 0    #first of the year - consider if these should be 0 or -1
babies[,5] = sample(c(0,1),nrow(babies),replace=T)    #each individual assigned male (1) or female (0) #sample from zero nrow times, with replacements. aka set sex
babies[,6] = NA #REMOVED##0                #####sample(c(0,1),nrow(babies),replace=T)    #set allele 1 as either A=1 or a=0
babies[,7] = NA                 #####sample(c(0,1),nrow(babies),replace=T)    #set allele 2 as either A=1 or a=0
babies[,8] = 1      #make every baby alive
babies[,9] = y  #MUST feed y to function   #generation born
babies[,10] = 0      #generation died
babies[,11] = 0      #relative fitness
View(babies)
numboff
nrow(babies)
#create a check to make sure the correct number of babies are being added to pop
if(nrow(babies) > numboff){
rm = sample(babies[,1], nrow(babies)-numboff, replace = FALSE, prob = NULL) #remove babies so that you generate only the number needed
babies = babies[-which(babies[,1]%in%rm), , drop=FALSE]
if(is.null(nrow(babies))==TRUE){
bb = 1
print(paste("only one new baby"))
#singlebabe = NULL
#singlebabe = matrix(1:8,nrow = 1)
#bby = rbind(babies,singlebabe)
#NEED TO FIGURE OUT SOLUTION FOR WHEN THERE IS ONLY ONE BABY
##ERROR WILL CONTINUE ON LINE 79 UNTIL RESOLVED
}else{
bb = nrow(babies)
}
#rename babies so count doesnt get messed up
babies =  as.matrix(babies)       #t(as.matrix(babies))
babies[,1] = seq(from = (sz+1), to = (sz+bb), by = 1)
#genotypes
#prep parent genotypes
f = babies[,2]
m = babies[,3]
fem = pop[-which(pop[,1]%NOTin%f), , drop = FALSE]
mal = pop[-which(pop[,1]%NOTin%m), , drop = FALSE]
if(nrow(mal) == 0){
print(paste("can't generate father genotypes"))
break
}
if(nrow(fem)==0){
print(paste("can't generate mother genotypes"))
break
}
SNPS = (nSNP*2) + (nSNP.mig*2) + (nSNP.cons*2)
fg = fem[, -c(ncol(fem)-(SNPS):ncol(fem))]
mg = mal[, -c(ncol(mal)-(SNPS):ncol(mal))]
#check
#if(nrow(fg)==nrow(mg)){
#  next
#}else{
#  print(paste("error in parent genotypes"))
#}
babygeno = matrix(nrow=bb, ncol=SNPS)
#allele 1 positions
pos = seq(1, SNPS, 2)
#randomly sample either position 1 or 2 (add 0 or 1) to starting pos
fallele  <- pos + sample(0:1, (SNPS/2)*bb, replace = TRUE, prob = NULL)      #divide SNPS by 2 because half SNPs come from mom
fallele2 <- fg[fallele]
fallele3 <- matrix(fallele2, nrow=bb, ncol = (SNPS/2), byrow = TRUE)
mallele  <- pos + sample(0:1, (SNPS/2)*bb, replace = TRUE, prob = NULL)      #divide SNPS by 2 because half SNPs come from dad
mallele2 <- mg[mallele]
mallele3 <- matrix(mallele2, nrow=bb, ncol = (SNPS/2), byrow = TRUE)
babygeno[, pos]       <- fallele3
babygeno[, pos + 1]   <- mallele3
#2/18 for some reason, these tend to fixate ?? check with Janna to figure out why??
if(mutate == 1){  #if mutate is turned "on"
for(x in 1:nrow(babygeno)){    #iterate over indv
mut <- sample(c("Y","N"), SNPS, replace = TRUE, prob = c(mu,1-mu))
init <- babygeno[x,] ## keep track of the 'ancestral' state within this individual
babygeno[x, which(mut=='Y' & babygeno[x,]==1)] <- 0
## if a SNP is supposed to mutate, but its ancestral state was '1' (i.e., it's already been mutated in the previous line),
## then set its index in mut to 'N', indicating that no further mutations should happen in this round.
mut[which(mut=='Y' & init==1)] <- 'N'
babygeno[x, which(mut=='Y' & babygeno[x,]==0)] <- 1
}
}else{
print(paste("no mutation"))
}
babies = cbind(babies, babygeno)
pop = rbind(pop, babies)
}else if(numboff == nrow(babies)){
bb = nrow(babies)
#rename babies so count doesnt get messed up
babies[,1] = seq(from = (sz+1), to = (sz+bb), by = 1)
#genotypes
#prep parent genotypes
f = babies[,2]
m = babies[,3]
fem = pop[-which(pop[,1]%NOTin%f), ,drop=FALSE]
mal = pop[-which(pop[,1]%NOTin%m), ,drop=FALSE]
###NEED to add the number of offpsring generated for parents fitness
##REMEMBER this will have to be done here and for when nbabies>numboff
#issue is with parents who sire more than one offspring
#is this better here or better after the whole simulation
#then I can find all adults and for all mothers and fathers, add to offpsring?
#for(l in 1:length(f)){
#  fem[l]
#}
if(nrow(mal) == 0){
print(paste("can't generate father genotypes"))
break
}
if(nrow(fem)==0){
print(paste("can't generate mother genotypes"))
break
}
SNPS = (nSNP*2) + (nSNP.mig*2) + (nSNP.cons*2)
fg = fem[, -c(ncol(fem)-SNPS:ncol(fem))]
mg = mal[, -c(ncol(mal)-SNPS:ncol(mal))]
#check
#if(nrow(fg)==nrow(mg)){
#  next
#}else{
#  print(paste("error in parent genotypes"))
#}
babygeno = matrix(nrow=bb, ncol=SNPS)
#allele 1 positions
pos = seq(1, SNPS, 2)
#randomly sample either position 1 or 2 (add 0 or 1) to starting pos
fallele  <- pos + sample(0:1, (SNPS/2)*bb, replace = TRUE, prob = NULL)          #divide SNPS by 2 because half SNPs come from mom
fallele2 <- fg[fallele]
fallele3 <- matrix(fallele2, nrow=bb, ncol = (SNPS/2), byrow = TRUE)
mallele  <- pos + sample(0:1, (SNPS/2)*bb, replace = TRUE, prob = NULL)          #divide SNPS by 2 because half SNPs come from dad
mallele2 <- mg[mallele]
mallele3 <- matrix(mallele2, nrow=bb, ncol = (SNPS/2), byrow = TRUE)
babygeno[, pos]       <- fallele3
babygeno[, pos + 1]   <- mallele3
#2/18 for some reason, these tend to fixate ?? check with Janna to figure out why??
if(mutate == 1){  #if mutate is turned "on"
for(x in 1:nrow(babygeno)){    #iterate over indv
mut <- sample(c("Y","N"), SNPS, replace = TRUE, prob = c(mu,1-mu))
init <- babygeno[x,] ## keep track of the 'ancestral' state within this individual
babygeno[x, which(mut=='Y' & babygeno[x,]==1)] <- 0
## if a SNP is supposed to mutate, but its ancestral state was '1' (i.e., it's already been mutated in the previous line),
## then set its index in mut to 'N', indicating that no further mutations should happen in this round.
mut[which(mut=='Y' & init==1)] <- 'N'
babygeno[x, which(mut=='Y' & babygeno[x,]==0)] <- 1
}
}else{
print(paste("no mutation"))
}
babies = cbind(babies, babygeno)
pop = rbind(pop, babies)
}else{
print(paste("need more offspring generated"))
next
}
nrow(babies)
numbodd
numboff
View(babies)
View(pop)
table(pop[,70])
table(babies[,70])
View(babies)
table(babies[,66])
dim(babygeno)
babygeno
#randomly sample either position 1 or 2 (add 0 or 1) to starting pos
fallele  <- pos + sample(0:1, (SNPS/2)*bb, replace = TRUE, prob = NULL)          #divide SNPS by 2 because half SNPs come from mom
fallele
pos
#randomly sample either position 1 or 2 (add 0 or 1) to starting pos
fallele  <- pos + sample(0:1, (SNPS/2)*bb, replace = TRUE, prob = NULL)          #divide SNPS by 2 because half SNPs come from mom
fallele2 <- fg[fallele]
fallele3 <- matrix(fallele2, nrow=bb, ncol = (SNPS/2), byrow = TRUE)
mallele  <- pos + sample(0:1, (SNPS/2)*bb, replace = TRUE, prob = NULL)          #divide SNPS by 2 because half SNPs come from dad
mallele2 <- mg[mallele]
mallele3 <- matrix(mallele2, nrow=bb, ncol = (SNPS/2), byrow = TRUE)
babygeno[, pos]       <- fallele3
babygeno[, pos + 1]   <- mallele3
View(babygeno)
sample(0:1, (SNPS/2)*bb, replace = TRUE, prob = NULL)
#Cover.R
#used for the complex migration model
setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM") #setwd("C:/Users/HP/Box/New Computer/Auburn/Data/ComplexModel_ABM")
directory = getwd()
outdir = paste(directory, "/Output/", sep = "")
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
#parameters
k.V           = 1000 #c(1000, 5000, 10000)                #carrying capacity
nSNP.V        = 10  #scaleup                #number of SNPs simulated, used to track drift
maxage.V      = 9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = 1                   #age indv becomes reproductively mature
years.V       = 10#250  #scaleup               #total run time; 200 year run following 50 year stabilization period
r0.V          = 1 #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #1 is stable, <1 is decreasing, >1 is increasing
ratemort.V    = 1/(maxage.V*2) ###0.2225 #??##(1/(maxage.V+2))      #proportion of adults that die each year --CHECK WITH JANNA WHERE THIS NUMBER CAME FROM; current value of .2225 is from Waser and Jones 1991
nSNP.mig.V    = 10                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons.V   = 10        #number of conserved alleles within species -- used to track mutation
### when adding variables already marked out, don't forget to add 3 times below, on RunModel, and other functions that need the variable fed in
#REMOVED###allele.V      = c(0,1)              #alleles assigned to individuals, equal probability of each at all loci, A = 1, a = 0
#REMOVED###nMicro.V      = 100 #tbd                 #number of microsats simulated
#REMOVED###sex.V         = c(0,1)              #males and females in population, 0 = Female, 1 = Male
#REMOVED###sexratio.V    = 0.5                 #equal ratio of females:males; consider a more real life value here, taken from pedigree data with Poisson dist
#REMOVED###reps.V        = 5 #scaleup                 #number of replications of the simulation
#potential migration rates: 1-5 indv, 5-10 indv, no migration
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "maxage", "broodsize", "maturity", "years", "r0", "ratemort", "nSNP.mig", "nSNP.cons")
#clean up, remember that these are still available in parameters
remove(nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V) #k.V
#2/28/22 I am removing k.V from this so I can reference it in Stochastsic.R
replicates    = 2 #20 #5 #10
plotit        = 1    #1=yes, 0=no
plotit2       = 1    #1=yes, 0=no
r             = 1
stoch         = 0    #2=stairstep decrease every year, 1=dramatic drop in k, 0=no
mutate        = 0    #1=yes, 0=no   #average mammalian genome mutation rate is 2.2 x 10^-9 per base pair per year, https://doi.org/10.1073/pnas.022629899
#krats = 2844.77 MB = 2844770000 bp x 2.2*10-9  = 6.258494 === does this matter here???
#bannertailed 0.0081 mutants/generation/locus, in Busch, Waser, and DeWoody 2007 doi: 10.1111/j.1365-294X.2007.03283.x.
mu            = 0.001  #mutation rate
styr          = 100 #year to start pop decline
edyr          = 150 #year to end pop decline, first year at low pop size
nwk           = 250 #pop size after decline -- probs makes sense to keep these even in vary decline years and decline rate. should end @ same pt for all pop sizes
dur           = 50  #duration of small pop size before pop growth
s             = 5000 #size of source pop
#run model iterating over parameters
theEND = NULL
repEND = NULL
for(r in 1:nrow(parameters)){
ALL = RunModel(parameters, r, directory, replicates)
FINAL = ALL[[1]]
POP = ALL[[2]]
REP = ALL[[3]]
####REMOVED## POP = RunModel(parameters, r, directory, replicates)
####REMOVED## write.table(POP, paste(directory, "/Output/CoverPop", r, ".csv", sep=""), sep=",", col.names=TRUE, row.names=F)
#####REMOVED##write.table(POP, paste(directory, "/Output/CoverPop.txt", sep=""), sep="\t", col.names=TRUE, row.names=F)  #use this for a .txt file, good for in a text editor. ; "/t" for macs
theEND = rbind(theEND, FINAL)
repEND = rbind(repEND, REP)
}
#set up to subset by replicate and by year
#remember that the replicate "r" will be the last column of theEND
rep      = theEND[,11]                 #grabs replicate column
para      = theEND[,12]                 #grabs parameter set
yr       = unique(theEND[, 1])         #grabs unique years
mxk      = ceiling(max(theEND[,2]))    #rounds up the maximum pop size. Note should = k
N        = theEND[,2]                  #grabs population size
adults   = theEND[,7]                  #grabs total number of adults
He       = theEND[,4]                  #grabs expected heterozygosity
Ho       = theEND[,5]                  #grabs observed heterozygosity
sxratio  = theEND[,8]                  #grabs the sex ratio
migprop  = theEND[,3]                  #grabs the proportion of migrants in the population
nmig     = theEND[,9]                  #grabs the number of migrants in the population
fst      = theEND[,10]                 #grabs Fst
#########################################################
#Plot the population size and number of adults over time
plot(-100, -100 , xlab="Time (generation)", ylab="Population Size", xlim=c(0, max(yr)), ylim=c(0, mxk))
for(p in unique(par)){
for(i in unique(rep)){
sub <- theEND[rep == i,] #unique replicate
lines(yr, sub[,2], lwd=2)
lines(yr, sub[,7], col="blue", lwd=2)
}
}
legend("bottomleft", legend=c("total population size", "total number of adults"),
col=c("black", "blue"), lty=1:1, cex=0.8)
dev.copy(png, "../Output/total_and_adult_population_size_over_time.png")
dev.off()
#########################################################
#Plot the observed heteroz and proportion of migrants in pop over time
par(mar = c(5,4,4,4)+0.3)
plot(-100, -100 , xlab="Time (generation)", ylab="Observed heterozygosity", xlim=c(0, max(yr)), ylim=c(0, 1))
