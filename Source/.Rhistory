lines(tbl[,1], tbl[,2], col = gt.cols[col], lwd = lwd, lty = lty[col])
#xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd, lty = lty[col])
#points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
#arrows(x0 = xs, y0 = c(quantile(y1[,var], probs=0.08), quantile(y2[,var], probs=c(0.08)), quantile(y3[,var], probs=c(0.08)), quantile(y4[,var], probs=c(0.08)), quantile(y5[,var], probs=c(0.08)), quantile(y6[,var], probs=c(0.08)), quantile(y7[,var], probs=c(0.08)), quantile(y8[,var], probs=c(0.08))),
#       y1 = c(quantile(y1[,var], probs=0.92), quantile(y2[,var], probs=0.92), quantile(y3[,var], probs=0.92), quantile(y4[,var], probs=0.92), quantile(y5[,var], probs=0.92), quantile(y6[,var], probs=0.92), quantile(y7[,var], probs=0.92), quantile(y8[,var], probs=0.92)),
#       lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#print(mean(y1[,var]))
#print(mean(y7[,var]))
print(c(tbl[2,2],tbl[20,2],tbl[51,2],tbl[101,2],tbl[151,2],tbl[351,2]))
col <- col+1
}
#legend('left', legend = c('LL0', 'HL0', 'HH0', 'LLa', 'HLa', 'HHa'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
#2C - Fst vs orig ~ year, by = starting allele freqs
{
var = 10
varname = "Recipient Population \n Divergence (Fst)"
title = "Fig 2C"
range(smry[,var])
ymin <- 0 #round(min(smry[,var]), digits = 2)#-.1
ymax <- 0.4 #round(max(smry[,var]), digits = 2)#+.1
ln.alph <- 0.5
pt.alph <- 1.25
diff <- 0.15
xmin <- 0
xmax <- 350
offsets <- c(-0.1, -0.5, 0, 0.5, 0.1, 0.15, 0.2, 0.25) #c(-0.2, -0.1, 0, 0.1, 0.2) #must have the same number of parameter sets
orig.xs <- c(1, 50, 100, 151, 201, 250, 300, 350) #years of interest
text.size <- 1.75
pt.cex <- 1.25
lwd <- 4
par(mar = c(4,6,2,2))
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', xlab = 'Year', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
text(-5, ymax, "C", cex=text.size, family="sans")
#title("C", adj = 0, cex.main = text.size, line = 2)
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels = c('0','50', '100','150','200', '250', '300','350'), cex.axis = text.size)
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
#y1<-temp[temp[,1] == orig.xs[1],,]
#y2<-temp[temp[,1] == orig.xs[2],,]
#y3<-temp[temp[,1] == orig.xs[3],,]
#y4<-temp[temp[,1] == orig.xs[4],,]
#y5<-temp[temp[,1] == orig.xs[5],,]
#y6<-temp[temp[,1] == orig.xs[6],,]
#y7<-temp[temp[,1] == orig.xs[7],,]
#y8<-temp[temp[,1] == orig.xs[8],,]
tbl = NULL
tbl = matrix(nrow = length(unique(temp[,1])), ncol = 5)
for(d in unique(temp[,1])){
dat = temp[temp[,1]==d,,drop=FALSE]
tbl[(d+1),1] = as.numeric(d)
tbl[(d+1),2] = as.numeric(mean(dat[,var]))
tbl[(d+1),3] = as.numeric(quantile(dat[,var], probs=0.08))
tbl[(d+1),4] = as.numeric(quantile(dat[,var], probs=0.92))
tbl[(d+1),5] = as.character(dat[1,19])
}
#TBL = rbind(TBL, tbl)
#xs <- tbl[,1] + offsets[col]  #dont forget you're in a loop, dummy
polygon(x = c(tbl[,1],rev(tbl[,1])) , y = c(tbl[,3],rev(tbl[,4])), density = dens[col], angle = ang, border = bo[col],
col = adjustcolor(alpha(gt.cols[col], .7), alpha.f=alf[col]))  #border = alpha(gt.cols[col], .8)
lines(tbl[,1], tbl[,2], col = gt.cols[col], lwd = lwd, lty = lty[col])
#xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd, lty = lty[col])
#points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
#arrows(x0 = xs, y0 = c(quantile(y1[,var], probs=0.08), quantile(y2[,var], probs=c(0.08)), quantile(y3[,var], probs=c(0.08)), quantile(y4[,var], probs=c(0.08)), quantile(y5[,var], probs=c(0.08)), quantile(y6[,var], probs=c(0.08)), quantile(y7[,var], probs=c(0.08)), quantile(y8[,var], probs=c(0.08))),
#       y1 = c(quantile(y1[,var], probs=0.92), quantile(y2[,var], probs=0.92), quantile(y3[,var], probs=0.92), quantile(y4[,var], probs=0.92), quantile(y5[,var], probs=0.92), quantile(y6[,var], probs=0.92), quantile(y7[,var], probs=0.92), quantile(y8[,var], probs=0.92)),
#       lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#print(mean(y1[,var]))
#print(mean(y7[,var]))
col <- col+1
}
#legend('topleft', legend = c('LL0', 'HL0', 'HH0', 'LLa', 'HLa', 'HHa'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
#2D - Fst vs source ~ year, by = starting allele freqs
{
var = 14
varname = "Migrant Source Population \n Divergence (Fst)"
title = "Fig 2D"
range(smry[,var])
ymin <- 0 #round(min(smry[,var]), digits = 2)#-.1
ymax <- .5 #round(max(smry[,var]), digits = 2)#+.1
ln.alph <- 0.5
pt.alph <- 1.25
diff <- 0.15
xmin <- 0
xmax <- 350
offsets <- c(-0.1, -0.5, 0, 0.5, 0.1, 0.15, 0.2, 0.25) #c(-0.2, -0.1, 0, 0.1, 0.2) #must have the same number of parameter sets
orig.xs <- c(1, 50, 100, 151, 201, 250, 300, 350) #years of interest
text.size <- 1.75
pt.cex <- 1.25
lwd <- 4
par(mar = c(4,6,2,2))
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', xlab = 'Year', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
text(-5, ymax, "D", cex=text.size, family="sans")
#title("D", adj = 0, cex.main = text.size, line = 2)
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels = c('0','50', '100','150','200', '250', '300','350'), cex.axis = text.size)
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
#y1<-temp[temp[,1] == orig.xs[1],,]
#y2<-temp[temp[,1] == orig.xs[2],,]
#y3<-temp[temp[,1] == orig.xs[3],,]
#y4<-temp[temp[,1] == orig.xs[4],,]
#y5<-temp[temp[,1] == orig.xs[5],,]
#y6<-temp[temp[,1] == orig.xs[6],,]
#y7<-temp[temp[,1] == orig.xs[7],,]
#y8<-temp[temp[,1] == orig.xs[8],,]
tbl = NULL
tbl = matrix(nrow = length(unique(temp[,1])), ncol = 5)
for(d in unique(temp[,1])){
dat = temp[temp[,1]==d,,drop=FALSE]
tbl[(d+1),1] = as.numeric(d)
tbl[(d+1),2] = as.numeric(mean(dat[,var]))
tbl[(d+1),3] = as.numeric(quantile(dat[,var], probs=0.08))
tbl[(d+1),4] = as.numeric(quantile(dat[,var], probs=0.92))
tbl[(d+1),5] = as.character(dat[1,19])
}
#TBL = rbind(TBL, tbl)
#xs <- tbl[,1] + offsets[col]  #dont forget you're in a loop, dummy
polygon(x = c(tbl[,1],rev(tbl[,1])) , y = c(tbl[,3],rev(tbl[,4])), density = dens[col], angle = ang, border = bo[col],
col = adjustcolor(alpha(gt.cols[col], .7), alpha.f=alf[col]))  #border = alpha(gt.cols[col], .8)
lines(tbl[,1], tbl[,2], col = gt.cols[col], lwd = lwd, lty = lty[col])
#xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd, lty = lty[col])
#points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
#arrows(x0 = xs, y0 = c(quantile(y1[,var], probs=0.08), quantile(y2[,var], probs=c(0.08)), quantile(y3[,var], probs=c(0.08)), quantile(y4[,var], probs=c(0.08)), quantile(y5[,var], probs=c(0.08)), quantile(y6[,var], probs=c(0.08)), quantile(y7[,var], probs=c(0.08)), quantile(y8[,var], probs=c(0.08))),
#       y1 = c(quantile(y1[,var], probs=0.92), quantile(y2[,var], probs=0.92), quantile(y3[,var], probs=0.92), quantile(y4[,var], probs=0.92), quantile(y5[,var], probs=0.92), quantile(y6[,var], probs=0.92), quantile(y7[,var], probs=0.92), quantile(y8[,var], probs=0.92)),
#       lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#print(mean(y1[,var]))
#print(mean(y7[,var]))
col <- col+1
}
#legend('bottomleft', legend = c('LL0', 'HL0', 'HH0', 'LLa', 'HLa', 'HHa'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###Figure 4
{
#p30 = read.table("p_1.30.24_LL30_mi_all_summary_add.csv", header=T, sep=",") #end_9.18.23_LL30 ##fin_5.10.23_1LL30_all_summary
#p3a = read.table("p_1.30.24_LL3a_mi_all_summary_add.csv", header=T, sep=",")  #end_9.18.23_LL3a ##fin_5.10.23_1LL3a_all_summary
#m30m = read.table("m_1.23.24_LL30_mi_all_summary.csv", header=T, sep=",")
#m30 = read.table("m_1.23.24_LL30_all_summary.csv", header=T, sep=",")
#3A - Ho ~ year, by = IUCN, mig and no mig
p70 = read.table("p_2.5.24_LL70_mi_all_summary.csv", header=T, sep=",") #end_9.18.23_LL70 #fin_5.11.23_1LL70_all_summary
p30 = read.table("p_1.30.24_LL30_mi_all_summary.csv", header=T, sep=",") #end_9.18.23_LL30 #fin_5.10.23_1LL30_all_summary
p10 = read.table("p_2.5.24_LL10_mi_all_summary.csv", header=T, sep=",") #end_comb_LL10 ##comb_fin_5.11.23_1LL10_all_summary
#p10[,19] = "LL10"
b0 = read.table("p_2.5.24_LLnbtl0_mi_all_summary.csv", header=T, sep=",") #end_9.18.23_nbtl30 ##fin_6.1.23_nbtl30_all_summary
p7a = read.table("p_2.5.24_LL7a_mi_all_summary.csv", header=T, sep=",") #end_9.18.23_LL7a ##fin_5.11.23_1LL7a_all_summary
p3a = read.table("p_1.30.24_LL3a_mi_all_summary.csv", header=T, sep=",")  #end_9.18.23_LL3a ##fin_5.10.23_1LL3a_all_summary
p1a = read.table("p_2.5.24_LL1a_mi_all_summary.csv", header=T, sep=",") #end_9.18.23_LL1a ##comb_fin_5.11.23_1LL1a_all_summary
ba = read.table("p_2.5.24_LLnbtla_mi_all_summary.csv", header=T, sep=",") #end_9.18.23_nbtl3a ##fin_6.1.23_nbtl3a_all_summary
par(mfrow = c(2,2))
#3A - ancestry ~ year, by = IUCN
smry = rbind(ba, p1a, p3a, p7a) #p50,
gt.cols <- c("grey", "firebrick3", "darkorange1", "gold")
lty = c(1,1,1,1)
{
var = 17
varname = "Proportion Migrant\n Ancestry (%)"
title = "Fig 3A"
ymin <- 0
ymax <- 1
par(mar = c(2,6,2,2)) #2,6,2,2
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', xlab = 'Year', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n', pin=c(1,1))
text(-5,ymax, "A", cex=text.size, family="sans")
#title("A", adj = 0, cex.main = text.size, line = 2)
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels = c('0','50', '100','150','200', '250', '300','350'), cex.axis = text.size)
#legend("center", legend = c('CR', 'EN','VU', 'NO'), col = c(gt.cols[2], gt.cols[3], gt.cols[4], gt.cols[1]), pch = 15, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, xjust=0, x.intersp = 0.1, y.intersp=0.3) #
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
#y1<-temp[temp[,1] == orig.xs[1],,]
#y2<-temp[temp[,1] == orig.xs[2],,]
#y3<-temp[temp[,1] == orig.xs[3],,]
#y4<-temp[temp[,1] == orig.xs[4],,]
#y5<-temp[temp[,1] == orig.xs[5],,]
#y6<-temp[temp[,1] == orig.xs[6],,]
#y7<-temp[temp[,1] == orig.xs[7],,]
#y8<-temp[temp[,1] == orig.xs[8],,]
tbl = NULL
tbl = matrix(nrow = length(unique(temp[,1])), ncol = 5)
for(d in unique(temp[,1])){
dat = temp[temp[,1]==d,,drop=FALSE]
tbl[(d+1),1] = as.numeric(d)
tbl[(d+1),2] = as.numeric(mean(dat[,var]))
tbl[(d+1),3] = as.numeric(quantile(dat[,var], probs=0.08))
tbl[(d+1),4] = as.numeric(quantile(dat[,var], probs=0.92))
tbl[(d+1),5] = as.character(dat[1,19])
}
#TBL = rbind(TBL, tbl)
#xs <- tbl[,1] + offsets[col]  #dont forget you're in a loop, dummy
polygon(x = c(tbl[,1],rev(tbl[,1])) , y = c(tbl[,3],rev(tbl[,4])), density = dens[col], angle = ang, border = bo[col],
col = adjustcolor(alpha(gt.cols[col], .7), alpha.f=alf[col]))  #border = alpha(gt.cols[col], .8)
lines(tbl[,1], tbl[,2], col = gt.cols[col], lwd = lwd, lty = lty[col])
#xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd, lty = lty[col])
#points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
#arrows(x0 = xs, y0 = c(quantile(y1[,var], probs=0.08), quantile(y2[,var], probs=c(0.08)), quantile(y3[,var], probs=c(0.08)), quantile(y4[,var], probs=c(0.08)), quantile(y5[,var], probs=c(0.08)), quantile(y6[,var], probs=c(0.08)), quantile(y7[,var], probs=c(0.08)), quantile(y8[,var], probs=c(0.08))),
#       y1 = c(quantile(y1[,var], probs=0.92), quantile(y2[,var], probs=0.92), quantile(y3[,var], probs=0.92), quantile(y4[,var], probs=0.92), quantile(y5[,var], probs=0.92), quantile(y6[,var], probs=0.92), quantile(y7[,var], probs=0.92), quantile(y8[,var], probs=0.92)),
#       lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#print(mean(y1[,var]))
#print(mean(y7[,var]))
col <- col+1
}
#r=1
#for(z in unique(smry[,19])){
#  zsmry = smry[smry[,19]==z,,drop=FALSE]
#  for(b in 1:length(unique(zsmry[,20]))){
#    bsmry = zsmry[zsmry[,20]==b,,drop=FALSE]
#    for(p in 1:length(unique(smry[,11]))){
#      psmry = bsmry[bsmry[,11]==p,,drop=FALSE]
#      lines(psmry[,1], psmry[,var], col=gt.cols[r], pch=16)
#    }
#  }
#  r=r+1
#}
#annotate(geom="text", x=1, y=ymax, label = "A", family = "sans")
#legend(1,ymax, legend = 'Ab', bty='n', cex=text.size, xjust=1)
#legend('topleft', legend = c('CR', 'EN','VU', 'NO'), col = c(gt.cols[2], gt.cols[3], gt.cols[4], gt.cols[1]), pch = 15, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
#3B - H ~ time, IUCN stat
smry = rbind(b0, p10, p30, p70, ba, p1a, p3a, p7a) #p50,
gt.cols <- c("grey", "firebrick3", "darkorange1", "gold", "grey", "firebrick3", "darkorange1", "gold") # "springgreen3"
lty = c(3,3,3,3,1,1,1,1)
{
var = 5
varname = "Heterozygosity"
title = "Fig 3B"
range(smry[,var])
ymin <- .05 #round(min(smry[,var]), digits = 2)#-.1
ymax <- .25 #round(max(smry[,var]), digits = 2)#+.1
ln.alph <- 0.5
pt.alph <- 1.25
diff <- 0.15
xmin <- 0
xmax <- 350
offsets <- c(-0.1, -0.5, 0, 0.5, 0.1, 0.15, 0.2, 0.25) #c(-0.2, -0.1, 0, 0.1, 0.2) #must have the same number of parameter sets
orig.xs <- c(1, 50, 100, 151, 201, 250, 300, 350) #years of interest
text.size <- 1.75
pt.cex <- 1.25
lwd <- 4
lty <- c(3,3,3,3, 1,1,1,1)
par(mar = c(2,6,2,2))
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', xlab = 'Year', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
text(-5,ymax, "B", cex=text.size, family="sans")
#title("B", adj = 0, cex.main = text.size, line = 2)
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels = c('0','50', '100','150','200', '250', '300','350'), cex.axis = text.size)
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
#y1<-temp[temp[,1] == orig.xs[1],,]
#y2<-temp[temp[,1] == orig.xs[2],,]
#y3<-temp[temp[,1] == orig.xs[3],,]
#y4<-temp[temp[,1] == orig.xs[4],,]
#y5<-temp[temp[,1] == orig.xs[5],,]
#y6<-temp[temp[,1] == orig.xs[6],,]
#y7<-temp[temp[,1] == orig.xs[7],,]
#y8<-temp[temp[,1] == orig.xs[8],,]
tbl = NULL
tbl = matrix(nrow = length(unique(temp[,1])), ncol = 5)
for(d in unique(temp[,1])){
dat = temp[temp[,1]==d,,drop=FALSE]
tbl[(d+1),1] = as.numeric(d)
tbl[(d+1),2] = as.numeric(mean(dat[,var]))
tbl[(d+1),3] = as.numeric(quantile(dat[,var], probs=0.08))
tbl[(d+1),4] = as.numeric(quantile(dat[,var], probs=0.92))
tbl[(d+1),5] = as.character(dat[1,19])
}
#TBL = rbind(TBL, tbl)
#xs <- tbl[,1] + offsets[col]  #dont forget you're in a loop, dummy
polygon(x = c(tbl[,1],rev(tbl[,1])) , y = c(tbl[,3],rev(tbl[,4])), density = dens[col], angle = ang, border = bo[col],
col = adjustcolor(alpha(gt.cols[col], .7), alpha.f=alf[col]))  #border = alpha(gt.cols[col], .8)
lines(tbl[,1], tbl[,2], col = gt.cols[col], lwd = lwd, lty = lty[col])
#xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd, lty = lty[col])
#points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
#arrows(x0 = xs, y0 = c(quantile(y1[,var], probs=0.08), quantile(y2[,var], probs=c(0.08)), quantile(y3[,var], probs=c(0.08)), quantile(y4[,var], probs=c(0.08)), quantile(y5[,var], probs=c(0.08)), quantile(y6[,var], probs=c(0.08)), quantile(y7[,var], probs=c(0.08)), quantile(y8[,var], probs=c(0.08))),
#       y1 = c(quantile(y1[,var], probs=0.92), quantile(y2[,var], probs=0.92), quantile(y3[,var], probs=0.92), quantile(y4[,var], probs=0.92), quantile(y5[,var], probs=0.92), quantile(y6[,var], probs=0.92), quantile(y7[,var], probs=0.92), quantile(y8[,var], probs=0.92)),
#       lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
print(c(tbl[2,2],tbl[20,2],tbl[51,2],tbl[101,2],tbl[151,2],tbl[351,2]))
#print(mean(y1[,var]))
#print(mean(y7[,var]))
col <- col+1
}
#legend('topleft', legend = c('CR', 'EN','VU', 'LC'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
#3C - orig fst ~ year, by = IUCN
{
var = 10
varname = "Recipient Population \n Divergence (Fst)"
title = "Fig 3C"
range(smry[,var])
ymin <- 0 #round(min(smry[,var]), digits = 2)#-.1
ymax <- 0.4 #round(max(smry[,var]), digits = 2)#+.1
ln.alph <- 0.5
pt.alph <- 1.25
diff <- 0.15
xmin <- 0
xmax <- 350
offsets <- c(-0.1, -0.5, 0, 0.5, 0.1, 0.15, 0.2, 0.25) #c(-0.2, -0.1, 0, 0.1, 0.2) #must have the same number of parameter sets
orig.xs <- c(1, 50, 100, 151, 201, 250, 300, 350) #years of interest
text.size <- 1.75
pt.cex <- 1.25
lwd <- 4
lty <- c(3,3,3,3, 1,1,1,1)
par(mar = c(4,6,2,2))
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', xlab = 'Year', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
text(-5,ymax, "C", cex=text.size, family="sans")
#title("C", adj = 0, cex.main = text.size, line = 2)
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels = c('0','50', '100','150','200', '250', '300','350'), cex.axis = text.size)
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
#y1<-temp[temp[,1] == orig.xs[1],,]
#y2<-temp[temp[,1] == orig.xs[2],,]
#y3<-temp[temp[,1] == orig.xs[3],,]
#y4<-temp[temp[,1] == orig.xs[4],,]
#y5<-temp[temp[,1] == orig.xs[5],,]
#y6<-temp[temp[,1] == orig.xs[6],,]
#y7<-temp[temp[,1] == orig.xs[7],,]
#y8<-temp[temp[,1] == orig.xs[8],,]
tbl = NULL
tbl = matrix(nrow = length(unique(temp[,1])), ncol = 5)
for(d in unique(temp[,1])){
dat = temp[temp[,1]==d,,drop=FALSE]
tbl[(d+1),1] = as.numeric(d)
tbl[(d+1),2] = as.numeric(mean(dat[,var]))
tbl[(d+1),3] = as.numeric(quantile(dat[,var], probs=0.08))
tbl[(d+1),4] = as.numeric(quantile(dat[,var], probs=0.92))
tbl[(d+1),5] = as.character(dat[1,19])
}
#TBL = rbind(TBL, tbl)
#xs <- tbl[,1] + offsets[col]  #dont forget you're in a loop, dummy
polygon(x = c(tbl[,1],rev(tbl[,1])) , y = c(tbl[,3],rev(tbl[,4])), density = dens[col], angle = ang, border = bo[col],
col = adjustcolor(alpha(gt.cols[col], .7), alpha.f=alf[col]))  #border = alpha(gt.cols[col], .8)
lines(tbl[,1], tbl[,2], col = gt.cols[col], lwd = lwd, lty = lty[col])
#xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd, lty = lty[col])
#points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
#arrows(x0 = xs, y0 = c(quantile(y1[,var], probs=0.08), quantile(y2[,var], probs=c(0.08)), quantile(y3[,var], probs=c(0.08)), quantile(y4[,var], probs=c(0.08)), quantile(y5[,var], probs=c(0.08)), quantile(y6[,var], probs=c(0.08)), quantile(y7[,var], probs=c(0.08)), quantile(y8[,var], probs=c(0.08))),
#       y1 = c(quantile(y1[,var], probs=0.92), quantile(y2[,var], probs=0.92), quantile(y3[,var], probs=0.92), quantile(y4[,var], probs=0.92), quantile(y5[,var], probs=0.92), quantile(y6[,var], probs=0.92), quantile(y7[,var], probs=0.92), quantile(y8[,var], probs=0.92)),
#       lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
print(c(tbl[2,2],tbl[20,2],tbl[51,2],tbl[101,2],tbl[151,2],tbl[351,2]))
#print(mean(y1[,var]))
#print(mean(y7[,var]))
col <- col+1
}
#legend('topleft', legend = c('CR', 'EN','VU', 'LC'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
#3D - source fst ~ year, by = IUCN
{
var = 14
varname = "Migrant Source Population \n Divergence (Fst)"
title = "Fig 3D"
range(smry[,var])
ymin <- 0 #round(min(smry[,var]), digits = 2)#-.1
ymax <- 0.5 #round(max(smry[,var]), digits = 2)#+.1
ln.alph <- 0.5
pt.alph <- 1.25
diff <- 0.15
xmin <- 0
xmax <- 350
offsets <- c(-0.1, -0.5, 0, 0.5, 0.1, 0.15, 0.2, 0.25) #c(-0.2, -0.1, 0, 0.1, 0.2) #must have the same number of parameter sets
orig.xs <- c(1, 50, 100, 151, 201, 250, 300, 350) #years of interest
text.size <- 1.75
pt.cex <- 1.25
lwd <- 4
lty <- c(3,3,3,3, 1,1,1,1)
par(mar = c(4,6,2,2))
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', xlab = 'Year', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
text(-5,ymax, "D", cex=text.size, family="sans")
#title("D", adj = 0, cex.main = text.size, line = 2)
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels = c('0','50', '100','150','200', '250', '300','350'), cex.axis = text.size)
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
#y1<-temp[temp[,1] == orig.xs[1],,]
#y2<-temp[temp[,1] == orig.xs[2],,]
#y3<-temp[temp[,1] == orig.xs[3],,]
#y4<-temp[temp[,1] == orig.xs[4],,]
#y5<-temp[temp[,1] == orig.xs[5],,]
#y6<-temp[temp[,1] == orig.xs[6],,]
#y7<-temp[temp[,1] == orig.xs[7],,]
#y8<-temp[temp[,1] == orig.xs[8],,]
tbl = NULL
tbl = matrix(nrow = length(unique(temp[,1])), ncol = 5)
for(d in unique(temp[,1])){
dat = temp[temp[,1]==d,,drop=FALSE]
tbl[(d+1),1] = as.numeric(d)
tbl[(d+1),2] = as.numeric(mean(dat[,var]))
tbl[(d+1),3] = as.numeric(quantile(dat[,var], probs=0.08))
tbl[(d+1),4] = as.numeric(quantile(dat[,var], probs=0.92))
tbl[(d+1),5] = as.character(dat[1,19])
}
#TBL = rbind(TBL, tbl)
#xs <- tbl[,1] + offsets[col]  #dont forget you're in a loop, dummy
polygon(x = c(tbl[,1],rev(tbl[,1])) , y = c(tbl[,3],rev(tbl[,4])), density = dens[col], angle = ang, border = bo[col],
col = adjustcolor(alpha(gt.cols[col], .7), alpha.f=alf[col]))  #border = alpha(gt.cols[col], .8)
lines(tbl[,1], tbl[,2], col = gt.cols[col], lwd = lwd, lty = lty[col])
#xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd, lty = lty[col])
#points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
#arrows(x0 = xs, y0 = c(quantile(y1[,var], probs=0.08), quantile(y2[,var], probs=c(0.08)), quantile(y3[,var], probs=c(0.08)), quantile(y4[,var], probs=c(0.08)), quantile(y5[,var], probs=c(0.08)), quantile(y6[,var], probs=c(0.08)), quantile(y7[,var], probs=c(0.08)), quantile(y8[,var], probs=c(0.08))),
#       y1 = c(quantile(y1[,var], probs=0.92), quantile(y2[,var], probs=0.92), quantile(y3[,var], probs=0.92), quantile(y4[,var], probs=0.92), quantile(y5[,var], probs=0.92), quantile(y6[,var], probs=0.92), quantile(y7[,var], probs=0.92), quantile(y8[,var], probs=0.92)),
#       lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
print(c(tbl[2,2],tbl[20,2],tbl[51,2],tbl[101,2],tbl[151,2],tbl[351,2]))
#print(mean(y1[,var]))
#print(mean(y7[,var]))
col <- col+1
}
#legend('center', legend = c('Critically Endangered', 'Endangered','Vulnerable', 'No Population Decline'), col = gt.cols, pch = 15, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.4, horiz = FALSE, x.intersp = 0.3, y.intersp = 0.5)
}
}
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/ABM_sep2022")
directory = getwd()
outdir = paste(directory, "/Output/", sep = "")   #  outdir = paste("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM", "/Output_local/", sep = "")
#Source function scripts
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
#define location of of project and groups for high performance computing cluster
prj = "_proj_"
grp = "_group_"
#parameters
k.V           = 1000          #carrying capacity
nSNP.V        = 100#0          #number of SNPs simulated, used to track drift
miggy.V       = 0 #c(0,          #migration parameter type -- set in Migrate.R; 0 = no migration
LBhet.V       = 0.4 #c(0.4, 0.05)  #lowerbound limit for SOURCE POP -- called in RunModel.R
LBp.V         = 0.4 #c(0.4, 0.05)  #lowerbound limit for FOCAL POP -- called in RunModel.R
maxage.V      = 9             #maximum age individuals can be -- note, first step is ageing, so some indv start at -1
broodsize.V   = 2             #max brood size, aka max fecundity
maturity.V    = 1             #age indv becomes reproductively mature
years.V       = 25 #350           #total run time
r0.V          = 1             #per capita growth rate
nSNP.mig.V    = 10#0           #number of migrant specific alleles -- these are ADDITIONAL alleles to nSNP above, migrants = 1, orig pop = 0 -- called in RunModel.R and Breed.R
nSNP.cons.V   = 10#0           #number of conserved alleles within species -- used to track mutation
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, miggy.V, LBhet.V, LBp.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "miggy", "LBhet", "LBp", "maxage", "broodsize", "maturity", "years", "r0", "nSNP.mig", "nSNP.cons")
write.table(parameters, paste(directory, "/Output/parameters__proj___group_.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE)
#clean up, remember that these are still available in parameters
remove(k.V, nSNP.V, miggy.V, LBhet.V, LBp.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, nSNP.mig.V, nSNP.cons.V)
#on/off switches for functions
replicates    = 1
allee         = 1    #1=yes, 0=no
matemigs      = 1    #1=yes, 0=no
plotit        = 0    #1=yes, 0=no
plotit2       = 0    #1=yes, 0=no
mutate        = 1    #1=yes, 0=no
mutate_init   = 1    #1=yes, 0=no
mu            = .002 #0.0000000022  #mutation rate in noncoding SNPs #(2.2 x 10^-9) #https://www.ncbi.nlm.nih.gov/pmc/articles/PMC117386/
mu_co         = .001 #0.00000000048 #deleterious mutation rate in coding SNPs #4.84 X10^-10 = 2.2x10^-9*.22 constraint #https://www.ncbi.nlm.nih.gov/pmc/articles/PMC263826/
purge         = 1    #1=yes, 0=no
purge_mutants = 1    #1=yes, 0=no
#bottleneck parameters
styr          = 100 #year to start pop decline
nwk           = 300 #pop size after decline
drp           = 10  #number of years to drop from k to nwk
dur           = 40  #duration of small pop size before pop growth
edyr          = styr+drp  #year to end pop decline, first year at low pop size (nwk)
s             = 5000 #size of source pop
#run model iterating over parameters
theEND = NULL
repEND = NULL
finalPOP = NULL
r=1  #use this when debugging, remove this when not skipping through the below line
for(r in 1:nrow(parameters)){
ALL = RunModel(parameters, r, directory, replicates, prj, grp)
FINAL = ALL[[1]]
REP = ALL[[2]]
#POP = ALL[[3]]  #keep if want to hold indv and genotype data, slows computation time considerably
theEND = rbind(theEND, FINAL)  #final data calculated in Analyze.R
repEND = rbind(repEND, REP)    #final data calculated in RepSucc.R
#finalPOP = rbind(finalPOP, POP)  #keep if want to hold indv and genotype data, slows computation time considerably
}
warnings()
