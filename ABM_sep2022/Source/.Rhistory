if(numboff >= 1){
ttt = Breed(pop, pairs, numboff, k, sz, nSNP, nSNP.mig, broodsize, y, mu, mutate, nSNP.cons, pos1, pos2, rr, r, prj, grp, matemigs) #create new babies!
pop = ttt[[1]]   #output 1 is the new pop object
bb = ttt[[2]]    #output 2 is the number of babies added
sz = sz + bb     #for tracking number of indv for IDing
}else if(numboff <= 0){
print(paste("No new babies, skip breed"))
#still fill out Ne count table
{
NE = matrix(nrow=1, ncol=12)   #create matrix for Ne Count table
colnames(NE) <- c("year", "eff_mom", "eff_dad", "nbabies", "naliveadults", "possible_mom", "possible_dad", "eff_mig", "parameterset", "replicate", "project", "group") #just to give a better understanding of what these variables are, set names
NE[1,1] = y                             #grab year
NE[1,2] = 0                             #grab n unique effective moms
NE[1,3] = 0                             #grab n unique effective dads
NE[1,4] = 0                             #grab n babies
alive = pop[pop[,8]==1,,drop=FALSE]
adult = alive[alive[,4]!=0,,drop=FALSE]
adult_f = adult[adult[,5]==0,,drop=FALSE]
adult_m = adult[adult[,5]==1,,drop=FALSE]
NE[1,5] = nrow(adult)                   #grab n alive adults
NE[1,6] = nrow(adult_f)                 #grab n possible moms
NE[1,7] = nrow(adult_m)                 #grab n possible dads
NE[1,8] = 0                             #grab number of migrant parents
NE[1,9] = r                             #parameter number
NE[1,10] = rr                           #replicate number
NE[1,11] = prj                          #defined project
NE[1,12] = grp                          #defined group
remove(alive, adult, adult_f, adult_m)  #clean up
if(isTRUE(y == 1 && r == 1 && rr == 1)){
write.table(NE, paste(directory, "/Output/Ne_counts.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE) #create new table for this sim
}else{
write.table(NE, paste(directory, "/Output/Ne_counts.csv", sep=""), sep=",", col.names=FALSE, append=TRUE, quote=FALSE, row.names=FALSE) #add to previous table
}
}
}
pop = AgeDeath(pop, maxage, y)          #kill indv based on age
if(sum(pop[,8]) <= 10){                 #if there are <=10 indv, crash pop
print(paste("CRASH @ AgeDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp) #remember to feed same thing to all Analyze functions!
FINAL = rbind(FINAL, out[1,])
break
}
print(paste("DONE!", y, "param", r, "rep", rr))   #for tracking which s
#Source function scripts
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
y=125
pop = AgeUp(pop)                        #age pop + 1 year
pop = FitnessDeath(pop, maturity, y)    #kill indv
#REMOVE##pop = DeathByAge(pop, maxage)          #age-dependent mortality
if(sum(pop[,8]) <= 10){                 #if there are <=10 indv, crash pop
print(paste("Crash @ FitnessDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break
}
#REMOVE##tttt = Stochastic(pop, stoch, k, numboff, styr, edyr, nwk, dur, y, years, r0, parameters, r)  #function for stochastic decline in pop
#REMOVE##pop = tttt[[1]]
#REMOVE##k = tttt[[2]]
#REMOVE##pop = RandomDeath(pop)                  #random mortality
tt = Migrate(pop, source, y, miggy, styr, edyr, dur)        #subpop migration from source to focal
pop = tt[[1]]  #output 1 is the pop object
mig = tt[[2]]  #output 2 is the number of migrants
sz = sz + mig  #used for tracking number of indv and their ID numbers
source = tt[[3]] #output 3 is the source object
if(sum(pop[,8]) <= 4){                #if there are <=4 indv, crash pop
print(paste("Population crash @ MateChoice, less than 4 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break
}
pairs = MateChoice(pop, sex, maturity, allee, matemigs)  #choose mates
if(is.null(pairs)==TRUE){    #if there are no mates, pop crashes
print(paste("skipping pop size next, breed due to no parents"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break  #break out of this loop
}
pp = PopSizeNext(pop, k, r0, maturity, y, styr, edyr, nwk, dur, parameters, r, K) #calculate the next generation's pop size according to logistic growth eqn
numboff = pp[[1]]  #output 1 is the number of offspring to produce
K = pp[[2]]        #output 2 is the new K (carrying capacity)
if(numboff >= 1){
ttt = Breed(pop, pairs, numboff, k, sz, nSNP, nSNP.mig, broodsize, y, mu, mutate, nSNP.cons, pos1, pos2, rr, r, prj, grp, matemigs) #create new babies!
pop = ttt[[1]]   #output 1 is the new pop object
bb = ttt[[2]]    #output 2 is the number of babies added
sz = sz + bb     #for tracking number of indv for IDing
}else if(numboff <= 0){
print(paste("No new babies, skip breed"))
#still fill out Ne count table
{
NE = matrix(nrow=1, ncol=12)   #create matrix for Ne Count table
colnames(NE) <- c("year", "eff_mom", "eff_dad", "nbabies", "naliveadults", "possible_mom", "possible_dad", "eff_mig", "parameterset", "replicate", "project", "group") #just to give a better understanding of what these variables are, set names
NE[1,1] = y                             #grab year
NE[1,2] = 0                             #grab n unique effective moms
NE[1,3] = 0                             #grab n unique effective dads
NE[1,4] = 0                             #grab n babies
alive = pop[pop[,8]==1,,drop=FALSE]
adult = alive[alive[,4]!=0,,drop=FALSE]
adult_f = adult[adult[,5]==0,,drop=FALSE]
adult_m = adult[adult[,5]==1,,drop=FALSE]
NE[1,5] = nrow(adult)                   #grab n alive adults
NE[1,6] = nrow(adult_f)                 #grab n possible moms
NE[1,7] = nrow(adult_m)                 #grab n possible dads
NE[1,8] = 0                             #grab number of migrant parents
NE[1,9] = r                             #parameter number
NE[1,10] = rr                           #replicate number
NE[1,11] = prj                          #defined project
NE[1,12] = grp                          #defined group
remove(alive, adult, adult_f, adult_m)  #clean up
if(isTRUE(y == 1 && r == 1 && rr == 1)){
write.table(NE, paste(directory, "/Output/Ne_counts.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE) #create new table for this sim
}else{
write.table(NE, paste(directory, "/Output/Ne_counts.csv", sep=""), sep=",", col.names=FALSE, append=TRUE, quote=FALSE, row.names=FALSE) #add to previous table
}
}
}
pop = AgeDeath(pop, maxage, y)          #kill indv based on age
if(sum(pop[,8]) <= 10){                 #if there are <=10 indv, crash pop
print(paste("CRASH @ AgeDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp) #remember to feed same thing to all Analyze functions!
FINAL = rbind(FINAL, out[1,])
break
}
print(paste("DONE!", y, "param", r, "rep", rr))   #for tracking which s
#Source function scripts
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
pop = AgeUp(pop)                        #age pop + 1 year
pop = FitnessDeath(pop, maturity, y)    #kill indv
#REMOVE##pop = DeathByAge(pop, maxage)          #age-dependent mortality
if(sum(pop[,8]) <= 10){                 #if there are <=10 indv, crash pop
print(paste("Crash @ FitnessDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break
}
#REMOVE##tttt = Stochastic(pop, stoch, k, numboff, styr, edyr, nwk, dur, y, years, r0, parameters, r)  #function for stochastic decline in pop
#REMOVE##pop = tttt[[1]]
#REMOVE##k = tttt[[2]]
#REMOVE##pop = RandomDeath(pop)                  #random mortality
tt = Migrate(pop, source, y, miggy, styr, edyr, dur)        #subpop migration from source to focal
pop = tt[[1]]  #output 1 is the pop object
mig = tt[[2]]  #output 2 is the number of migrants
sz = sz + mig  #used for tracking number of indv and their ID numbers
source = tt[[3]] #output 3 is the source object
if(sum(pop[,8]) <= 4){                #if there are <=4 indv, crash pop
print(paste("Population crash @ MateChoice, less than 4 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break
}
pairs = MateChoice(pop, sex, maturity, allee, matemigs)  #choose mates
if(is.null(pairs)==TRUE){    #if there are no mates, pop crashes
print(paste("skipping pop size next, breed due to no parents"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break  #break out of this loop
}
pp = PopSizeNext(pop, k, r0, maturity, y, styr, edyr, nwk, dur, parameters, r, K) #calculate the next generation's pop size according to logistic growth eqn
numboff = pp[[1]]  #output 1 is the number of offspring to produce
K = pp[[2]]        #output 2 is the new K (carrying capacity)
if(numboff >= 1){
ttt = Breed(pop, pairs, numboff, k, sz, nSNP, nSNP.mig, broodsize, y, mu, mutate, nSNP.cons, pos1, pos2, rr, r, prj, grp, matemigs) #create new babies!
pop = ttt[[1]]   #output 1 is the new pop object
bb = ttt[[2]]    #output 2 is the number of babies added
sz = sz + bb     #for tracking number of indv for IDing
}else if(numboff <= 0){
print(paste("No new babies, skip breed"))
#still fill out Ne count table
{
NE = matrix(nrow=1, ncol=12)   #create matrix for Ne Count table
colnames(NE) <- c("year", "eff_mom", "eff_dad", "nbabies", "naliveadults", "possible_mom", "possible_dad", "eff_mig", "parameterset", "replicate", "project", "group") #just to give a better understanding of what these variables are, set names
NE[1,1] = y                             #grab year
NE[1,2] = 0                             #grab n unique effective moms
NE[1,3] = 0                             #grab n unique effective dads
NE[1,4] = 0                             #grab n babies
alive = pop[pop[,8]==1,,drop=FALSE]
adult = alive[alive[,4]!=0,,drop=FALSE]
adult_f = adult[adult[,5]==0,,drop=FALSE]
adult_m = adult[adult[,5]==1,,drop=FALSE]
NE[1,5] = nrow(adult)                   #grab n alive adults
NE[1,6] = nrow(adult_f)                 #grab n possible moms
NE[1,7] = nrow(adult_m)                 #grab n possible dads
NE[1,8] = 0                             #grab number of migrant parents
NE[1,9] = r                             #parameter number
NE[1,10] = rr                           #replicate number
NE[1,11] = prj                          #defined project
NE[1,12] = grp                          #defined group
remove(alive, adult, adult_f, adult_m)  #clean up
if(isTRUE(y == 1 && r == 1 && rr == 1)){
write.table(NE, paste(directory, "/Output/Ne_counts.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE) #create new table for this sim
}else{
write.table(NE, paste(directory, "/Output/Ne_counts.csv", sep=""), sep=",", col.names=FALSE, append=TRUE, quote=FALSE, row.names=FALSE) #add to previous table
}
}
}
pop = AgeDeath(pop, maxage, y)          #kill indv based on age
if(sum(pop[,8]) <= 10){                 #if there are <=10 indv, crash pop
print(paste("CRASH @ AgeDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp) #remember to feed same thing to all Analyze functions!
FINAL = rbind(FINAL, out[1,])
break
}
print(paste("DONE!", y, "param", r, "rep", rr))   #for tracking which s
pop = AgeUp(pop)                        #age pop + 1 year
pop = FitnessDeath(pop, maturity, y)    #kill indv
#REMOVE##pop = DeathByAge(pop, maxage)          #age-dependent mortality
if(sum(pop[,8]) <= 10){                 #if there are <=10 indv, crash pop
print(paste("Crash @ FitnessDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break
}
#REMOVE##tttt = Stochastic(pop, stoch, k, numboff, styr, edyr, nwk, dur, y, years, r0, parameters, r)  #function for stochastic decline in pop
#REMOVE##pop = tttt[[1]]
#REMOVE##k = tttt[[2]]
#REMOVE##pop = RandomDeath(pop)                  #random mortality
tt = Migrate(pop, source, y, miggy, styr, edyr, dur)        #subpop migration from source to focal
pop = tt[[1]]  #output 1 is the pop object
mig = tt[[2]]  #output 2 is the number of migrants
sz = sz + mig  #used for tracking number of indv and their ID numbers
source = tt[[3]] #output 3 is the source object
if(sum(pop[,8]) <= 4){                #if there are <=4 indv, crash pop
print(paste("Population crash @ MateChoice, less than 4 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break
}
pairs = MateChoice(pop, sex, maturity, allee, matemigs)  #choose mates
if(is.null(pairs)==TRUE){    #if there are no mates, pop crashes
print(paste("skipping pop size next, breed due to no parents"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break  #break out of this loop
}
pp = PopSizeNext(pop, k, r0, maturity, y, styr, edyr, nwk, dur, parameters, r, K) #calculate the next generation's pop size according to logistic growth eqn
numboff = pp[[1]]  #output 1 is the number of offspring to produce
K = pp[[2]]        #output 2 is the new K (carrying capacity)
if(numboff >= 1){
ttt = Breed(pop, pairs, numboff, k, sz, nSNP, nSNP.mig, broodsize, y, mu, mutate, nSNP.cons, pos1, pos2, rr, r, prj, grp, matemigs) #create new babies!
pop = ttt[[1]]   #output 1 is the new pop object
bb = ttt[[2]]    #output 2 is the number of babies added
sz = sz + bb     #for tracking number of indv for IDing
}else if(numboff <= 0){
print(paste("No new babies, skip breed"))
#still fill out Ne count table
{
NE = matrix(nrow=1, ncol=12)   #create matrix for Ne Count table
colnames(NE) <- c("year", "eff_mom", "eff_dad", "nbabies", "naliveadults", "possible_mom", "possible_dad", "eff_mig", "parameterset", "replicate", "project", "group") #just to give a better understanding of what these variables are, set names
NE[1,1] = y                             #grab year
NE[1,2] = 0                             #grab n unique effective moms
NE[1,3] = 0                             #grab n unique effective dads
NE[1,4] = 0                             #grab n babies
alive = pop[pop[,8]==1,,drop=FALSE]
adult = alive[alive[,4]!=0,,drop=FALSE]
adult_f = adult[adult[,5]==0,,drop=FALSE]
adult_m = adult[adult[,5]==1,,drop=FALSE]
NE[1,5] = nrow(adult)                   #grab n alive adults
NE[1,6] = nrow(adult_f)                 #grab n possible moms
NE[1,7] = nrow(adult_m)                 #grab n possible dads
NE[1,8] = 0                             #grab number of migrant parents
NE[1,9] = r                             #parameter number
NE[1,10] = rr                           #replicate number
NE[1,11] = prj                          #defined project
NE[1,12] = grp                          #defined group
remove(alive, adult, adult_f, adult_m)  #clean up
if(isTRUE(y == 1 && r == 1 && rr == 1)){
write.table(NE, paste(directory, "/Output/Ne_counts.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE) #create new table for this sim
}else{
write.table(NE, paste(directory, "/Output/Ne_counts.csv", sep=""), sep=",", col.names=FALSE, append=TRUE, quote=FALSE, row.names=FALSE) #add to previous table
}
}
}
pop = AgeDeath(pop, maxage, y)          #kill indv based on age
if(sum(pop[,8]) <= 10){                 #if there are <=10 indv, crash pop
print(paste("CRASH @ AgeDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp) #remember to feed same thing to all Analyze functions!
FINAL = rbind(FINAL, out[1,])
break
}
print(paste("DONE!", y, "param", r, "rep", rr))   #for tracking which s
pop = AgeUp(pop)                        #age pop + 1 year
pop = FitnessDeath(pop, maturity, y)    #kill indv
#REMOVE##pop = DeathByAge(pop, maxage)          #age-dependent mortality
if(sum(pop[,8]) <= 10){                 #if there are <=10 indv, crash pop
print(paste("Crash @ FitnessDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break
}
#REMOVE##tttt = Stochastic(pop, stoch, k, numboff, styr, edyr, nwk, dur, y, years, r0, parameters, r)  #function for stochastic decline in pop
#REMOVE##pop = tttt[[1]]
#REMOVE##k = tttt[[2]]
#REMOVE##pop = RandomDeath(pop)                  #random mortality
tt = Migrate(pop, source, y, miggy, styr, edyr, dur)        #subpop migration from source to focal
pop = tt[[1]]  #output 1 is the pop object
mig = tt[[2]]  #output 2 is the number of migrants
sz = sz + mig  #used for tracking number of indv and their ID numbers
source = tt[[3]] #output 3 is the source object
if(sum(pop[,8]) <= 4){                #if there are <=4 indv, crash pop
print(paste("Population crash @ MateChoice, less than 4 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break
}
pairs = MateChoice(pop, sex, maturity, allee, matemigs)  #choose mates
if(is.null(pairs)==TRUE){    #if there are no mates, pop crashes
print(paste("skipping pop size next, breed due to no parents"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break  #break out of this loop
}
pp = PopSizeNext(pop, k, r0, maturity, y, styr, edyr, nwk, dur, parameters, r, K) #calculate the next generation's pop size according to logistic growth eqn
numboff = pp[[1]]  #output 1 is the number of offspring to produce
K = pp[[2]]        #output 2 is the new K (carrying capacity)
if(numboff >= 1){
ttt = Breed(pop, pairs, numboff, k, sz, nSNP, nSNP.mig, broodsize, y, mu, mutate, nSNP.cons, pos1, pos2, rr, r, prj, grp, matemigs) #create new babies!
pop = ttt[[1]]   #output 1 is the new pop object
bb = ttt[[2]]    #output 2 is the number of babies added
sz = sz + bb     #for tracking number of indv for IDing
}else if(numboff <= 0){
print(paste("No new babies, skip breed"))
#still fill out Ne count table
{
NE = matrix(nrow=1, ncol=12)   #create matrix for Ne Count table
colnames(NE) <- c("year", "eff_mom", "eff_dad", "nbabies", "naliveadults", "possible_mom", "possible_dad", "eff_mig", "parameterset", "replicate", "project", "group") #just to give a better understanding of what these variables are, set names
NE[1,1] = y                             #grab year
NE[1,2] = 0                             #grab n unique effective moms
NE[1,3] = 0                             #grab n unique effective dads
NE[1,4] = 0                             #grab n babies
alive = pop[pop[,8]==1,,drop=FALSE]
adult = alive[alive[,4]!=0,,drop=FALSE]
adult_f = adult[adult[,5]==0,,drop=FALSE]
adult_m = adult[adult[,5]==1,,drop=FALSE]
NE[1,5] = nrow(adult)                   #grab n alive adults
NE[1,6] = nrow(adult_f)                 #grab n possible moms
NE[1,7] = nrow(adult_m)                 #grab n possible dads
NE[1,8] = 0                             #grab number of migrant parents
NE[1,9] = r                             #parameter number
NE[1,10] = rr                           #replicate number
NE[1,11] = prj                          #defined project
NE[1,12] = grp                          #defined group
remove(alive, adult, adult_f, adult_m)  #clean up
if(isTRUE(y == 1 && r == 1 && rr == 1)){
write.table(NE, paste(directory, "/Output/Ne_counts.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE) #create new table for this sim
}else{
write.table(NE, paste(directory, "/Output/Ne_counts.csv", sep=""), sep=",", col.names=FALSE, append=TRUE, quote=FALSE, row.names=FALSE) #add to previous table
}
}
}
pop = AgeDeath(pop, maxage, y)          #kill indv based on age
if(sum(pop[,8]) <= 10){                 #if there are <=10 indv, crash pop
print(paste("CRASH @ AgeDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp) #remember to feed same thing to all Analyze functions!
FINAL = rbind(FINAL, out[1,])
break
}
print(paste("DONE!", y, "param", r, "rep", rr))   #for tracking which s
y=126
pop = AgeUp(pop)                        #age pop + 1 year
pop = FitnessDeath(pop, maturity, y)    #kill indv
#REMOVE##pop = DeathByAge(pop, maxage)          #age-dependent mortality
if(sum(pop[,8]) <= 10){                 #if there are <=10 indv, crash pop
print(paste("Crash @ FitnessDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break
}
#REMOVE##tttt = Stochastic(pop, stoch, k, numboff, styr, edyr, nwk, dur, y, years, r0, parameters, r)  #function for stochastic decline in pop
#REMOVE##pop = tttt[[1]]
#REMOVE##k = tttt[[2]]
#REMOVE##pop = RandomDeath(pop)                  #random mortality
tt = Migrate(pop, source, y, miggy, styr, edyr, dur)        #subpop migration from source to focal
pop = tt[[1]]  #output 1 is the pop object
mig = tt[[2]]  #output 2 is the number of migrants
sz = sz + mig  #used for tracking number of indv and their ID numbers
source = tt[[3]] #output 3 is the source object
if(sum(pop[,8]) <= 4){                #if there are <=4 indv, crash pop
print(paste("Population crash @ MateChoice, less than 4 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break
}
pairs = MateChoice(pop, sex, maturity, allee, matemigs)  #choose mates
if(is.null(pairs)==TRUE){    #if there are no mates, pop crashes
print(paste("skipping pop size next, breed due to no parents"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break  #break out of this loop
}
pp = PopSizeNext(pop, k, r0, maturity, y, styr, edyr, nwk, dur, parameters, r, K) #calculate the next generation's pop size according to logistic growth eqn
numboff = pp[[1]]  #output 1 is the number of offspring to produce
K = pp[[2]]        #output 2 is the new K (carrying capacity)
if(numboff >= 1){
ttt = Breed(pop, pairs, numboff, k, sz, nSNP, nSNP.mig, broodsize, y, mu, mutate, nSNP.cons, pos1, pos2, rr, r, prj, grp, matemigs) #create new babies!
pop = ttt[[1]]   #output 1 is the new pop object
bb = ttt[[2]]    #output 2 is the number of babies added
sz = sz + bb     #for tracking number of indv for IDing
}else if(numboff <= 0){
print(paste("No new babies, skip breed"))
#still fill out Ne count table
{
NE = matrix(nrow=1, ncol=12)   #create matrix for Ne Count table
colnames(NE) <- c("year", "eff_mom", "eff_dad", "nbabies", "naliveadults", "possible_mom", "possible_dad", "eff_mig", "parameterset", "replicate", "project", "group") #just to give a better understanding of what these variables are, set names
NE[1,1] = y                             #grab year
NE[1,2] = 0                             #grab n unique effective moms
NE[1,3] = 0                             #grab n unique effective dads
NE[1,4] = 0                             #grab n babies
alive = pop[pop[,8]==1,,drop=FALSE]
adult = alive[alive[,4]!=0,,drop=FALSE]
adult_f = adult[adult[,5]==0,,drop=FALSE]
adult_m = adult[adult[,5]==1,,drop=FALSE]
NE[1,5] = nrow(adult)                   #grab n alive adults
NE[1,6] = nrow(adult_f)                 #grab n possible moms
NE[1,7] = nrow(adult_m)                 #grab n possible dads
NE[1,8] = 0                             #grab number of migrant parents
NE[1,9] = r                             #parameter number
NE[1,10] = rr                           #replicate number
NE[1,11] = prj                          #defined project
NE[1,12] = grp                          #defined group
remove(alive, adult, adult_f, adult_m)  #clean up
if(isTRUE(y == 1 && r == 1 && rr == 1)){
write.table(NE, paste(directory, "/Output/Ne_counts.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE) #create new table for this sim
}else{
write.table(NE, paste(directory, "/Output/Ne_counts.csv", sep=""), sep=",", col.names=FALSE, append=TRUE, quote=FALSE, row.names=FALSE) #add to previous table
}
}
}
pop = AgeDeath(pop, maxage, y)          #kill indv based on age
if(sum(pop[,8]) <= 10){                 #if there are <=10 indv, crash pop
print(paste("CRASH @ AgeDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp) #remember to feed same thing to all Analyze functions!
FINAL = rbind(FINAL, out[1,])
break
}
print(paste("DONE!", y, "param", r, "rep", rr))   #for tracking which s
y=127
pop = AgeUp(pop)                        #age pop + 1 year
pop = FitnessDeath(pop, maturity, y)    #kill indv
#REMOVE##pop = DeathByAge(pop, maxage)          #age-dependent mortality
if(sum(pop[,8]) <= 10){                 #if there are <=10 indv, crash pop
print(paste("Crash @ FitnessDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break
}
#REMOVE##tttt = Stochastic(pop, stoch, k, numboff, styr, edyr, nwk, dur, y, years, r0, parameters, r)  #function for stochastic decline in pop
#REMOVE##pop = tttt[[1]]
#REMOVE##k = tttt[[2]]
#REMOVE##pop = RandomDeath(pop)                  #random mortality
tt = Migrate(pop, source, y, miggy, styr, edyr, dur)        #subpop migration from source to focal
pop = tt[[1]]  #output 1 is the pop object
mig = tt[[2]]  #output 2 is the number of migrants
sz = sz + mig  #used for tracking number of indv and their ID numbers
source = tt[[3]] #output 3 is the source object
if(sum(pop[,8]) <= 4){                #if there are <=4 indv, crash pop
print(paste("Population crash @ MateChoice, less than 4 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break
}
pairs = MateChoice(pop, sex, maturity, allee, matemigs)  #choose mates
if(is.null(pairs)==TRUE){    #if there are no mates, pop crashes
print(paste("skipping pop size next, breed due to no parents"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break  #break out of this loop
}
pp = PopSizeNext(pop, k, r0, maturity, y, styr, edyr, nwk, dur, parameters, r, K) #calculate the next generation's pop size according to logistic growth eqn
numboff = pp[[1]]  #output 1 is the number of offspring to produce
K = pp[[2]]        #output 2 is the new K (carrying capacity)
if(numboff >= 1){
ttt = Breed(pop, pairs, numboff, k, sz, nSNP, nSNP.mig, broodsize, y, mu, mutate, nSNP.cons, pos1, pos2, rr, r, prj, grp, matemigs) #create new babies!
pop = ttt[[1]]   #output 1 is the new pop object
bb = ttt[[2]]    #output 2 is the number of babies added
sz = sz + bb     #for tracking number of indv for IDing
}else if(numboff <= 0){
print(paste("No new babies, skip breed"))
#still fill out Ne count table
{
NE = matrix(nrow=1, ncol=12)   #create matrix for Ne Count table
colnames(NE) <- c("year", "eff_mom", "eff_dad", "nbabies", "naliveadults", "possible_mom", "possible_dad", "eff_mig", "parameterset", "replicate", "project", "group") #just to give a better understanding of what these variables are, set names
NE[1,1] = y                             #grab year
NE[1,2] = 0                             #grab n unique effective moms
NE[1,3] = 0                             #grab n unique effective dads
NE[1,4] = 0                             #grab n babies
alive = pop[pop[,8]==1,,drop=FALSE]
adult = alive[alive[,4]!=0,,drop=FALSE]
adult_f = adult[adult[,5]==0,,drop=FALSE]
adult_m = adult[adult[,5]==1,,drop=FALSE]
NE[1,5] = nrow(adult)                   #grab n alive adults
NE[1,6] = nrow(adult_f)                 #grab n possible moms
NE[1,7] = nrow(adult_m)                 #grab n possible dads
NE[1,8] = 0                             #grab number of migrant parents
NE[1,9] = r                             #parameter number
NE[1,10] = rr                           #replicate number
NE[1,11] = prj                          #defined project
NE[1,12] = grp                          #defined group
remove(alive, adult, adult_f, adult_m)  #clean up
if(isTRUE(y == 1 && r == 1 && rr == 1)){
write.table(NE, paste(directory, "/Output/Ne_counts.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE) #create new table for this sim
}else{
write.table(NE, paste(directory, "/Output/Ne_counts.csv", sep=""), sep=",", col.names=FALSE, append=TRUE, quote=FALSE, row.names=FALSE) #add to previous table
}
}
}
pop = AgeDeath(pop, maxage, y)          #kill indv based on age
if(sum(pop[,8]) <= 10){                 #if there are <=10 indv, crash pop
print(paste("CRASH @ AgeDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp) #remember to feed same thing to all Analyze functions!
FINAL = rbind(FINAL, out[1,])
break
}
print(paste("DONE!", y, "param", r, "rep", rr))   #for tracking which s
