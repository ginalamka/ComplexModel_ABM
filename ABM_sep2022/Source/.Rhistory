setwd("C:/Users/HP/Box/New Computer/Auburn/Data/KRats") #set working directory in the Rstudio folder on my computer and box drive
directory = getwd()
field = read.table("KRATP.csv", header=T, sep=",")
data  = read.table("krat_pedigree_plus.csv", header=T, sep=",")
setwd("C:/Users/HP/Box/New Computer/Auburn/Data/KRats") #set working directory in the Rstudio folder on my computer and box drive
getwd()
setwd("C:/Users/HP/Box/New Computer/Auburn/Data/KRats") #set working directory in the Rstudio folder on my computer and box drive
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/ABM_sep2022")
directory = getwd()
outdir = paste(directory, "/Output/", sep = "")   #  outdir = paste("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM", "/Output_local/", sep = "")
#Source function scripts
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
#define location of of project and groups for high performance computing cluster
prj = "_proj_"
grp = "_group_"
#parameters
k.V           = 1000       #carrying capacity
nSNP.V        = 1000       #number of SNPs simulated, used to track drift
miggy.V       = c(0,       #migration parameter type -- set in Migrate.R; 0 = no migration
"a",     #"a"=one mig per gen
"b",     #"b"=1xof50@175
"c",     #"c"=3xpf25@175|201|225
"d",     #"d"=
"e")     #"e"=
LBhet.V       = c(0.45, 0.07) #lowerbound limit for SOURCE POP -- called in RunModel.R
LBp.V         = c(0.45, 0.07) #lowerbound limit for FOCAL POP -- called in RunModel.R
maxage.V      = 9 #c(15, 3)   #maximum age individuals can be -- note, first step is ageing, so some indv start at -1
broodsize.V   = 2 #c(4, 6)    #max brood size, aka max fecundity
maturity.V    = 1             #age indv becomes re productively mature
years.V       = 350           #total run time
r0.V          = 1             #per capita growth rate #0/1 is stable, <0/1 is decreasing, >0/1 is increasing - currently checking cuz r0+1 in log growth eq
nSNP.mig.V    = 100           #number of migrant specific alleles -- these are ADDITIONAL alleles to nSNP above, migrants = 1, orig pop = 0 -- called in RunModel.R and Breed.R
nSNP.cons.V   = 0             #number of conserved alleles within species -- used to track mutation
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, miggy.V, LBhet.V, LBp.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "miggy", "LBhet", "LBp", "maxage", "broodsize", "maturity", "years", "r0", "nSNP.mig", "nSNP.cons")
write.table(parameters, paste(directory, "/Output/parameters__proj___group_.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE)
#clean up, remember that these are still available in parameters
remove(k.V, nSNP.V, miggy.V, LBhet.V, LBp.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, nSNP.mig.V, nSNP.cons.V)
#on/off switches for functions
replicates    = 20
allee         = 0    #1=yes, 0=no
matemigs      = 0    #1=yes, 0=no
plotit        = 0    #1=yes, 0=no
plotit2       = 0    #1=yes, 0=no
mutate        = 0    #1=yes, 0=no   #average mammalian genome mutation rate is 2.2 x 10^-9 per base pair per year, https://doi.org/10.1073/pnas.022629899
#bannertailed krats = 0.0081 mutants/generation/locus, in Busch, Waser, and DeWoody 2007 doi: 10.1111/j.1365-294X.2007.03283.x.
mu            = 0.001  #mutation rate
#bottleneck parameters
styr          = 100 #year to start pop decline
nwk           = 300 #pop size after decline
drp           = 10  #number of years to drop from k to nwk
dur           = 40  #duration of small pop size before pop growth
edyr          = styr+drp  #year to end pop decline, first year at low pop size (nwk)
s             = 5000 #size of source pop
#run model iterating over parameters
theEND = NULL
repEND = NULL
finalPOP = NULL
FINAL = NULL
REP   = NULL
POP   = NULL
rr=1
#call parameters for this replicate run
k             = parameters$k[r]
nSNP          = parameters$nSNP[r]
miggy         = parameters$miggy[r]
LBhet         = parameters$LBhet[r]
LBp           = parameters$LBp[r]
nMicro        = parameters$nMicro[r]
maxage        = parameters$maxage[r]
r=1
r=1
#call parameters for this replicate run
k             = parameters$k[r]
nSNP          = parameters$nSNP[r]
miggy         = parameters$miggy[r]
LBhet         = parameters$LBhet[r]
LBp           = parameters$LBp[r]
nMicro        = parameters$nMicro[r]
maxage        = parameters$maxage[r]
broodsize     = parameters$broodsize[r]
maturity      = parameters$maturity[r]
years         = parameters$years[r]
r0            = parameters$r0[r]
nSNP.mig      = parameters$nSNP.mig[r]
nSNP.cons     = parameters$nSNP.cons[r]
#initialize population                   #matrix is easier to manipulate than a dataframe -- "ncol = X + (nloci)*2
pop = matrix(nrow=k, ncol=12)            #each individual gets its own row
colnames(pop) <- c("id", "mom", "dad", "age", "sex", "n offspring", "n adult offspring", "alive", "gen born", "gen died", "relative fitness", "prop migrant SNPs") #just to give a better understanding of what these variables are, set names
pop[,1] = seq(1,k,1)                     #each individual has unique ID name; sequence starting at 1, through k, with each 1 iteration
pop[,2:3] = 0                            #parent ID; at this point, we are putting all equal to zero because this is the initial generation and we don't know parents
pop[,4] = rpois(k,maturity)-1  ##sample(seq(0,maxage,1),k,replace=T)-1   #set age between 0 and 4 and subtract 1 because we add one at the first generation #FOR UNIFORM DIST: dunif(k, min =0, max = maturity, log = FALSE)-1
table(pop[,4])
hist(pop[,4])
pop[,5] = sample(c(0,1),k,replace=T)     #assign indvs as male (1) or female (0)
pop[,6] = NA                             #this will be for number of times as a parent - calculated in RepSucc.R
pop[,7] = NA                             #this will be for number of offspring survive to maturity - calculated in RepSucc.R
pop[,8] = 1                              #alive or dead? alive = 1, dead = 0
pop[,9] = 0                              #generation born
pop[,10] = 0                             #generation died
pop[,11] = NA                            #relative fitness, aka heterozygosity - calculated below
pop[,12] = 0                             #proportion of migrant SNPs - initial pop will all be 0
sz = k                                   #to keep track of the number of indv for ID'ing later
sz_col = ncol(pop)
#generate SNPs for the starting pop
popgen = matrix(nrow=k, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)  #create columns because a SNP by definition has two alleles
for(l in 1:nSNP){
p = sample(seq(from=LBp, to=(LBp+0.1), by=0.01),1)  #introduce variation by selecting p, range defined in Cover.R
#create pool of genotypes in HWE to select from
pool = c(rep(0, round(k*p*p, 0)),                                      #homozygous p*p
rep(1, round(k*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, k-(round(k*p*p, 0)+(round(k*(1-p)*(1-p), 0))))         #heterozygous
)
#connect pool to indvs and assign the genotypes
gtype = sample(pool, k, replace = FALSE)
for(kk in 1:k){
if(gtype[kk]==0){                 #homo (0,0)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 0
next
}else if(gtype[kk]==2){           #hetero (0,1)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 1
}else{                            #homo (1,1)
popgen[kk,columns[l]]   = 1
popgen[kk,columns[l]+1] = 1
}
}
#for(qq in 1:ncol(popgen)){colnames(popgen[qq])<-c("SNP",qq)} #couldnt get this to work - 12/14/22 - issue was when merging dead and pop but wont even hold genotypes anymore
#colnames(popgen) <- c('SNP', name)
pool = NULL
#add genotypes to pop matrix
}
head(popgen)
View(popgen)
View(popgen)
colnames(popgen) <- c('SNP', name)
for(qq in 1:ncol(popgen)){colnames(popgen[qq])<-c("SNP",qq)}
1:ncol(popgen)
1:nSNP
#initialize source population
source = matrix(nrow=s, ncol=12)            #each individual gets its own row.
colnames(source) <- c("id", "mom", "dad", "age", "sex", "n offspring", "n adult offspring", "alive", "gen born", "gen died", "relative fitness", "prop migrant SNPs") #just to give a better understanding of what these variables are, set names
source[,1] = seq(-(s),-1,1)                 #each individual has unique ID name; sequence starting at -1, through -k, with each 1 iteration, negative flag for source pop
source[,2:3] = -1                           #at this point, we are putting all equal to negative 1 to flag from source pop, and we dont know parents because parents arent in focal pop
source[,4] = sample(seq(0,maxage,1),s,replace=T)   #set age between 0 and maxage (source isnt aged, so dont subtract 1)
source[,5] = sample(c(0,1),s,replace=T)     #each individual assigned male (1) or female (0)
source[,6] = NA                             #this will be for number of times as a parent
source[,7] = NA                             #for number of offspring that reach maturity
source[,8] = 1                              #alive or dead? alive = 1, dead = 0
source[,9] = -1                             #generation born - will be changed in Migrate.R to the generation entered focal pop
source[,10] = 0                             #generation died
source[,11] = NA                            #relative fitness, aka heterozygosity *of nSNP only* - calculated below
source[,12] = 1                             #proportion of migrant SNPs - initial source pop will all be 1
#generate source gentoypes
sourcegen = matrix(nrow=s, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)  #create 2 columns per SNP with 0-1 for each allele
for(l in 1:nSNP){
p = sample(seq(from=LBhet, to=(LBhet+0.1), by=0.01), 1)  #introduce variation by selecting p, range defined in Cover.R
#create pool of genotypes in HWE
pool = c(rep(0, round(s*p*p, 0)),                                      #homozygous p*p
rep(1, round(s*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, s-(round(s*p*p, 0)+(round(s*(1-p)*(1-p), 0))))         #heterozygous
)
#connect pool to indvs and assign the genotypes
gtype = sample(pool, s, replace = FALSE)
for(ss in 1:s){
if(gtype[ss]==0){                 #homo (0,0)
sourcegen[ss,columns[l]]   = 0
sourcegen[ss,columns[l]+1] = 0
next
}else if(gtype[ss]==2){           #hetero (0,1)
sourcegen[ss,columns[l]]   = 0
sourcegen[ss,columns[l]+1] = 1
}else{                            #homo (1,1)
sourcegen[ss,columns[l]]   = 1
sourcegen[ss,columns[l]+1] = 1
}
}
#colnames(sourcegen) <- c('SNP', l)
#pool = NULL
#add genotypes to source matrix
}
colnames(sourcegen) <- c('SNP', l)
