het <- matrix(nrow=nrow(popgen), ncol=1)
for(g in 1:nrow(popgen)){
w <- sum(popgen[g ,seq(1,ncol(popgen),2)]!=popgen[g,seq(2,ncol(popgen),2)])/(ncol(popgen)/2)
het[g,1] <- w
} #note to add the other SNPs in here if wanted
pop[,11] <- het
mean(pop[,11])
#generate SNPs for the starting pop -- taken from Janna's Captive breeding IBM
popgen = matrix(nrow=k, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = .45#sample(seq(from=0.4, to=0.6, by=0.01),1) ##0.5 #sample(seq(from=0, to=1, by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(k*p*p, 0)),                                      #homozygous p*p
rep(1, round(k*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, k-(round(k*p*p, 0)+(round(k*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, k, replace = FALSE)
for(kk in 1:k){
if(gtype[kk]==0){                 #homo (0,0)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 0
next
}else if(gtype[kk]==1){           #hetero (0,1)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 1
}else{                            #homo (1,1)
popgen[kk,columns[l]]   = 1
popgen[kk,columns[l]+1] = 1
}
}
#for(qq in 1:ncol(popgen)){colnames(popgen[qq])<-c("SNP",qq)} #couldnt get this to work - 12/14/22 - issue was when merging dead and pop but wont even hold genotypes anymore
#colnames(popgen) <- c('SNP', name)
pool = NULL
#add genotypes to pop matrix
}
het <- matrix(nrow=nrow(popgen), ncol=1)
for(g in 1:nrow(popgen)){
w <- sum(popgen[g ,seq(1,ncol(popgen),2)]!=popgen[g,seq(2,ncol(popgen),2)])/(ncol(popgen)/2)
het[g,1] <- w
} #note to add the other SNPs in here if wanted
pop[,11] <- het
mean(pop[,11])
#generate SNPs for the starting pop -- taken from Janna's Captive breeding IBM
popgen = matrix(nrow=k, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = .07#sample(seq(from=0.4, to=0.6, by=0.01),1) ##0.5 #sample(seq(from=0, to=1, by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(k*p*p, 0)),                                      #homozygous p*p
rep(1, round(k*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, k-(round(k*p*p, 0)+(round(k*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, k, replace = FALSE)
for(kk in 1:k){
if(gtype[kk]==0){                 #homo (0,0)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 0
next
}else if(gtype[kk]==1){           #hetero (0,1)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 1
}else{                            #homo (1,1)
popgen[kk,columns[l]]   = 1
popgen[kk,columns[l]+1] = 1
}
}
#for(qq in 1:ncol(popgen)){colnames(popgen[qq])<-c("SNP",qq)} #couldnt get this to work - 12/14/22 - issue was when merging dead and pop but wont even hold genotypes anymore
#colnames(popgen) <- c('SNP', name)
pool = NULL
#add genotypes to pop matrix
}
het <- matrix(nrow=nrow(popgen), ncol=1)
for(g in 1:nrow(popgen)){
w <- sum(popgen[g ,seq(1,ncol(popgen),2)]!=popgen[g,seq(2,ncol(popgen),2)])/(ncol(popgen)/2)
het[g,1] <- w
} #note to add the other SNPs in here if wanted
pop[,11] <- het
mean(pop[,11])
#generate SNPs for the starting pop -- taken from Janna's Captive breeding IBM
popgen = matrix(nrow=k, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = .45#sample(seq(from=0.4, to=0.6, by=0.01),1) ##0.5 #sample(seq(from=0, to=1, by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(k*p*p, 0)),                                      #homozygous p*p
rep(1, round(k*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, k-(round(k*p*p, 0)+(round(k*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, k, replace = FALSE)
for(kk in 1:k){
if(gtype[kk]==0){                 #homo (0,0)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 0
next
}else if(gtype[kk]==1){           #hetero (0,1)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 1
}else{                            #homo (1,1)
popgen[kk,columns[l]]   = 1
popgen[kk,columns[l]+1] = 1
}
}
#for(qq in 1:ncol(popgen)){colnames(popgen[qq])<-c("SNP",qq)} #couldnt get this to work - 12/14/22 - issue was when merging dead and pop but wont even hold genotypes anymore
#colnames(popgen) <- c('SNP', name)
pool = NULL
#add genotypes to pop matrix
}
het <- matrix(nrow=nrow(popgen), ncol=1)
for(g in 1:nrow(popgen)){
w <- sum(popgen[g ,seq(1,ncol(popgen),2)]!=popgen[g,seq(2,ncol(popgen),2)])/(ncol(popgen)/2)
het[g,1] <- w
} #note to add the other SNPs in here if wanted
pop[,11] <- het
mean(pop[,11])
#generate SNPs for the starting pop -- taken from Janna's Captive breeding IBM
popgen = matrix(nrow=k, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = .1#sample(seq(from=0.4, to=0.6, by=0.01),1) ##0.5 #sample(seq(from=0, to=1, by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(k*p*p, 0)),                                      #homozygous p*p
rep(1, round(k*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, k-(round(k*p*p, 0)+(round(k*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, k, replace = FALSE)
for(kk in 1:k){
if(gtype[kk]==0){                 #homo (0,0)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 0
next
}else if(gtype[kk]==1){           #hetero (0,1)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 1
}else{                            #homo (1,1)
popgen[kk,columns[l]]   = 1
popgen[kk,columns[l]+1] = 1
}
}
#for(qq in 1:ncol(popgen)){colnames(popgen[qq])<-c("SNP",qq)} #couldnt get this to work - 12/14/22 - issue was when merging dead and pop but wont even hold genotypes anymore
#colnames(popgen) <- c('SNP', name)
pool = NULL
#add genotypes to pop matrix
}
het <- matrix(nrow=nrow(popgen), ncol=1)
for(g in 1:nrow(popgen)){
w <- sum(popgen[g ,seq(1,ncol(popgen),2)]!=popgen[g,seq(2,ncol(popgen),2)])/(ncol(popgen)/2)
het[g,1] <- w
} #note to add the other SNPs in here if wanted
pop[,11] <- het
mean(pop[,11])
#generate SNPs for the starting pop -- taken from Janna's Captive breeding IBM
popgen = matrix(nrow=k, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = .15 #sample(seq(from=0.4, to=0.6, by=0.01),1) ##0.5 #sample(seq(from=0, to=1, by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(k*p*p, 0)),                                      #homozygous p*p
rep(1, round(k*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, k-(round(k*p*p, 0)+(round(k*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, k, replace = FALSE)
for(kk in 1:k){
if(gtype[kk]==0){                 #homo (0,0)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 0
next
}else if(gtype[kk]==1){           #hetero (0,1)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 1
}else{                            #homo (1,1)
popgen[kk,columns[l]]   = 1
popgen[kk,columns[l]+1] = 1
}
}
#for(qq in 1:ncol(popgen)){colnames(popgen[qq])<-c("SNP",qq)} #couldnt get this to work - 12/14/22 - issue was when merging dead and pop but wont even hold genotypes anymore
#colnames(popgen) <- c('SNP', name)
pool = NULL
#add genotypes to pop matrix
}
het <- matrix(nrow=nrow(popgen), ncol=1)
for(g in 1:nrow(popgen)){
w <- sum(popgen[g ,seq(1,ncol(popgen),2)]!=popgen[g,seq(2,ncol(popgen),2)])/(ncol(popgen)/2)
het[g,1] <- w
} #note to add the other SNPs in here if wanted
pop[,11] <- het
mean(pop[,11])
#generate SNPs for the starting pop -- taken from Janna's Captive breeding IBM
popgen = matrix(nrow=k, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = .25 #sample(seq(from=0.4, to=0.6, by=0.01),1) ##0.5 #sample(seq(from=0, to=1, by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(k*p*p, 0)),                                      #homozygous p*p
rep(1, round(k*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, k-(round(k*p*p, 0)+(round(k*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, k, replace = FALSE)
for(kk in 1:k){
if(gtype[kk]==0){                 #homo (0,0)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 0
next
}else if(gtype[kk]==1){           #hetero (0,1)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 1
}else{                            #homo (1,1)
popgen[kk,columns[l]]   = 1
popgen[kk,columns[l]+1] = 1
}
}
#for(qq in 1:ncol(popgen)){colnames(popgen[qq])<-c("SNP",qq)} #couldnt get this to work - 12/14/22 - issue was when merging dead and pop but wont even hold genotypes anymore
#colnames(popgen) <- c('SNP', name)
pool = NULL
#add genotypes to pop matrix
}
het <- matrix(nrow=nrow(popgen), ncol=1)
for(g in 1:nrow(popgen)){
w <- sum(popgen[g ,seq(1,ncol(popgen),2)]!=popgen[g,seq(2,ncol(popgen),2)])/(ncol(popgen)/2)
het[g,1] <- w
} #note to add the other SNPs in here if wanted
pop[,11] <- het
mean(pop[,11])
range(pop[,11])
#generate SNPs for the starting pop -- taken from Janna's Captive breeding IBM
popgen = matrix(nrow=k, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = .15 #sample(seq(from=0.4, to=0.6, by=0.01),1) ##0.5 #sample(seq(from=0, to=1, by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(k*p*p, 0)),                                      #homozygous p*p
rep(1, round(k*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, k-(round(k*p*p, 0)+(round(k*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, k, replace = FALSE)
for(kk in 1:k){
if(gtype[kk]==0){                 #homo (0,0)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 0
next
}else if(gtype[kk]==1){           #hetero (0,1)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 1
}else{                            #homo (1,1)
popgen[kk,columns[l]]   = 1
popgen[kk,columns[l]+1] = 1
}
}
#for(qq in 1:ncol(popgen)){colnames(popgen[qq])<-c("SNP",qq)} #couldnt get this to work - 12/14/22 - issue was when merging dead and pop but wont even hold genotypes anymore
#colnames(popgen) <- c('SNP', name)
pool = NULL
#add genotypes to pop matrix
}
het <- matrix(nrow=nrow(popgen), ncol=1)
for(g in 1:nrow(popgen)){
w <- sum(popgen[g ,seq(1,ncol(popgen),2)]!=popgen[g,seq(2,ncol(popgen),2)])/(ncol(popgen)/2)
het[g,1] <- w
} #note to add the other SNPs in here if wanted
pop[,11] <- het
range(pop[,11])
popgen = matrix(nrow=k, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = .1 #sample(seq(from=0.4, to=0.6, by=0.01),1) ##0.5 #sample(seq(from=0, to=1, by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(k*p*p, 0)),                                      #homozygous p*p
rep(1, round(k*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, k-(round(k*p*p, 0)+(round(k*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, k, replace = FALSE)
for(kk in 1:k){
if(gtype[kk]==0){                 #homo (0,0)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 0
next
}else if(gtype[kk]==1){           #hetero (0,1)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 1
}else{                            #homo (1,1)
popgen[kk,columns[l]]   = 1
popgen[kk,columns[l]+1] = 1
}
}
#for(qq in 1:ncol(popgen)){colnames(popgen[qq])<-c("SNP",qq)} #couldnt get this to work - 12/14/22 - issue was when merging dead and pop but wont even hold genotypes anymore
#colnames(popgen) <- c('SNP', name)
pool = NULL
#add genotypes to pop matrix
}
het <- matrix(nrow=nrow(popgen), ncol=1)
for(g in 1:nrow(popgen)){
w <- sum(popgen[g ,seq(1,ncol(popgen),2)]!=popgen[g,seq(2,ncol(popgen),2)])/(ncol(popgen)/2)
het[g,1] <- w
} #note to add the other SNPs in here if wanted
pop[,11] <- het
range(pop[,11])
#generate SNPs for the starting pop -- taken from Janna's Captive breeding IBM
popgen = matrix(nrow=k, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = .45 #sample(seq(from=0.4, to=0.6, by=0.01),1) ##0.5 #sample(seq(from=0, to=1, by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(k*p*p, 0)),                                      #homozygous p*p
rep(1, round(k*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, k-(round(k*p*p, 0)+(round(k*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, k, replace = FALSE)
for(kk in 1:k){
if(gtype[kk]==0){                 #homo (0,0)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 0
next
}else if(gtype[kk]==1){           #hetero (0,1)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 1
}else{                            #homo (1,1)
popgen[kk,columns[l]]   = 1
popgen[kk,columns[l]+1] = 1
}
}
#for(qq in 1:ncol(popgen)){colnames(popgen[qq])<-c("SNP",qq)} #couldnt get this to work - 12/14/22 - issue was when merging dead and pop but wont even hold genotypes anymore
#colnames(popgen) <- c('SNP', name)
pool = NULL
#add genotypes to pop matrix
}
het <- matrix(nrow=nrow(popgen), ncol=1)
for(g in 1:nrow(popgen)){
w <- sum(popgen[g ,seq(1,ncol(popgen),2)]!=popgen[g,seq(2,ncol(popgen),2)])/(ncol(popgen)/2)
het[g,1] <- w
} #note to add the other SNPs in here if wanted
pop[,11] <- het
range(pop[,11])
#generate SNPs for the starting pop -- taken from Janna's Captive breeding IBM
popgen = matrix(nrow=k, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = .07 #sample(seq(from=0.4, to=0.6, by=0.01),1) ##0.5 #sample(seq(from=0, to=1, by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(k*p*p, 0)),                                      #homozygous p*p
rep(1, round(k*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, k-(round(k*p*p, 0)+(round(k*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, k, replace = FALSE)
for(kk in 1:k){
if(gtype[kk]==0){                 #homo (0,0)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 0
next
}else if(gtype[kk]==1){           #hetero (0,1)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 1
}else{                            #homo (1,1)
popgen[kk,columns[l]]   = 1
popgen[kk,columns[l]+1] = 1
}
}
#for(qq in 1:ncol(popgen)){colnames(popgen[qq])<-c("SNP",qq)} #couldnt get this to work - 12/14/22 - issue was when merging dead and pop but wont even hold genotypes anymore
#colnames(popgen) <- c('SNP', name)
pool = NULL
#add genotypes to pop matrix
}
het <- matrix(nrow=nrow(popgen), ncol=1)
for(g in 1:nrow(popgen)){
w <- sum(popgen[g ,seq(1,ncol(popgen),2)]!=popgen[g,seq(2,ncol(popgen),2)])/(ncol(popgen)/2)
het[g,1] <- w
} #note to add the other SNPs in here if wanted
pop[,11] <- het
range(pop[,11])
mature = pop[pop[,4] == maturity, , drop=FALSE] #isolate the indv that just reached maturity
if(nrow(mature)>1){
for(ee in 1:nrow(mature)){
het = mature[ee,11] +0.01 #this controls for if het =0
mature[ee,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c(1/het/100,(1-(1/het/100))))
#notes 9/16/22 - do this only at the year of maturity-- ONCE because the fitness effect that happens every year would be stronger if it compounded
#if you have the maxhet change over time, the probability of dying would change each year so it would be hard to measure.
# look for the realtionship of heterozyogisty to probability of death to see if there is stuff on there (might not be)
#do oldies > fitness at maturity age > age-based death (age/lifespan) === DO NOT PUT A LIMIT ON THE NUMBER TO KILL
#
}
nkilled = NULL
nkilled = mature[mature[,8]==0,,drop=FALSE]
print(paste("killed", nrow(nkilled), "individuals"))
}else{
print(paste("not enough mature for fit-induced death"))
}
if(nrow(mature)>1){
for(ee in 1:nrow(mature)){
het = mature[ee,11] +0.01 #this controls for if het =0
mature[ee,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c((1-(1/het/100)),1/het/100)) #1/het/100,(1-(1/het/100))
#notes 9/16/22 - do this only at the year of maturity-- ONCE because the fitness effect that happens every year would be stronger if it compounded
#if you have the maxhet change over time, the probability of dying would change each year so it would be hard to measure.
# look for the realtionship of heterozyogisty to probability of death to see if there is stuff on there (might not be)
#do oldies > fitness at maturity age > age-based death (age/lifespan) === DO NOT PUT A LIMIT ON THE NUMBER TO KILL
#
}
nkilled = NULL
nkilled = mature[mature[,8]==0,,drop=FALSE]
print(paste("killed", nrow(nkilled), "individuals"))
}else{
print(paste("not enough mature for fit-induced death"))
}
nkilled = NA
remove(dead, mature, nkilled)
dead = pop[pop[,8] == 0, , drop=FALSE]          #remove dead indvs
#influcing fitness-induced death at maturity helps control for fitness influences better than if compounded every year
pop = pop[pop[,4] != maturity, , drop=FALSE]
mature = pop[pop[,4] == maturity, , drop=FALSE] #isolate the indv that just reached maturity
remove(dead, mature, nkilled)
dead = pop[pop[,8] == 0, , drop=FALSE]          #remove dead indvs
pop = pop[pop[,8] == 1, , drop=FALSE]           #isolate alive
mature = pop[pop[,4] == maturity, , drop=FALSE] #isolate the indv that just reached maturity
#influcing fitness-induced death at maturity helps control for fitness influences better than if compounded every year
pop = pop[pop[,4] != maturity, , drop=FALSE]
nkilled = NA
remove(dead, mature, nkilled)
dead = pop[pop[,8] == 0, , drop=FALSE]          #remove dead indvs
pop = pop[pop[,8] == 1, , drop=FALSE]           #isolate alive
mature = pop[pop[,4] == maturity, , drop=FALSE] #isolate the indv that just reached maturity
#influcing fitness-induced death at maturity helps control for fitness influences better than if compounded every year
pop = pop[pop[,4] != maturity, , drop=FALSE]
if(nrow(mature)>1){
for(ee in 1:nrow(mature)){
het = mature[ee,11] +0.01 #this controls for if het =0
mature[ee,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c(het/100,(1-(het/100)))) #1/het/100,(1-(1/het/100))
#notes 9/16/22 - do this only at the year of maturity-- ONCE because the fitness effect that happens every year would be stronger if it compounded
#if you have the maxhet change over time, the probability of dying would change each year so it would be hard to measure.
# look for the realtionship of heterozyogisty to probability of death to see if there is stuff on there (might not be)
#do oldies > fitness at maturity age > age-based death (age/lifespan) === DO NOT PUT A LIMIT ON THE NUMBER TO KILL
#
}
nkilled = NULL
nkilled = mature[mature[,8]==0,,drop=FALSE]
print(paste("killed", nrow(nkilled), "individuals"))
}else{
print(paste("not enough mature for fit-induced death"))
nkilled = NA
}
pop = matrix(nrow=k, ncol=12)            #each individual gets its own row.. matrix > dataframe -- "ncol = 7 + (nloci)*2
colnames(pop) <- c("id", "mom", "dad", "age", "sex", "n offspring", "n adult offspring", "alive", "gen born", "gen died", "relative fitness", "prop migrant SNPs") #just to give a better understanding of what these variables are, set names
pop[,1] = seq(1,k,1)                    #each individual has unique ID name; sequence starting at 1, through k, with each 1 interation
pop[,2:3] = 0                            #at this point, we are putting all equal to zero because this is the initial generation and we dont know parents
#pop[,2] = rep(0,k)                      #mom id - later will not be 0, this is useful for debugging #saying replicate 0 100 times
#pop[,3] = rep(0,k)                      #dad id - later will not be 0, this is useful for debugging
pop[,4] = rpois(k,maturity)-1  ##sample(seq(0,maxage,1),k,replace=T)-1   #set age between 0 and 4 and subtract 1 because we add one at the first generation #FOR UNIFORM DIST: dunif(k, min =0, max = maturity, log = FALSE)-1
pop[,5] = sample(c(0,1),k,replace=T)    #each individual assigned male (1) or female (0) #sample from zero k times, with replacements. aka set sex
pop[,6] = NA #this will be for number of times as a parent  #REMOVED###sample(c(0,1),k,replace=T)    #set allele 1 as either A=1 or a=0
pop[,7] = NA #this will be for number of times offspring survive to maturity   #REMOVED###sample(c(0,1),k,replace=T)    #set allele 2 as either A=1 or a=0
pop[,8] = 1                             #alive or dead? alive = 1, dead = 0
pop[,9] = 0                             #generation born
pop[,10] = 0                            #generation died
pop[,11] = NA                            #relative fitness #at this point, we are putting all equal to zero because this is the initial generation
pop[,12] = 0                            #proportion of migrant SNPs - initial pop will all be 0
sz = k #to keep track of the number of indv for ID'ing later
sz_col = ncol(pop)
#generate SNPs for the starting pop -- taken from Janna's Captive breeding IBM
popgen = matrix(nrow=k, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = sample(seq(from=0.4, to=0.6, by=0.01),1) ##0.5 #sample(seq(from=0, to=1, by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(k*p*p, 0)),                                      #homozygous p*p
rep(1, round(k*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, k-(round(k*p*p, 0)+(round(k*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, k, replace = FALSE)
for(kk in 1:k){
if(gtype[kk]==0){                 #homo (0,0)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 0
next
}else if(gtype[kk]==1){           #hetero (0,1)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 1
}else{                            #homo (1,1)
popgen[kk,columns[l]]   = 1
popgen[kk,columns[l]+1] = 1
}
}
#for(qq in 1:ncol(popgen)){colnames(popgen[qq])<-c("SNP",qq)} #couldnt get this to work - 12/14/22 - issue was when merging dead and pop but wont even hold genotypes anymore
#colnames(popgen) <- c('SNP', name)
pool = NULL
#add genotypes to pop matrix
}
het <- matrix(nrow=nrow(popgen), ncol=1)
for(g in 1:nrow(popgen)){
w <- sum(popgen[g ,seq(1,ncol(popgen),2)]!=popgen[g,seq(2,ncol(popgen),2)])/(ncol(popgen)/2)
het[g,1] <- w
} #note to add the other SNPs in here if wanted
pop[,11] <- het
mature = pop[pop[,4] == maturity, , drop=FALSE] #isolate the indv that just reached maturity
#influcing fitness-induced death at maturity helps control for fitness influences better than if compounded every year
pop = pop[pop[,4] != maturity, , drop=FALSE]
if(nrow(mature)>1){
for(ee in 1:nrow(mature)){
het = mature[ee,11] +0.01 #this controls for if het =0
mature[ee,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c(het/100,(1-(het/100)))) #1/het/100,(1-(1/het/100))
#notes 9/16/22 - do this only at the year of maturity-- ONCE because the fitness effect that happens every year would be stronger if it compounded
#if you have the maxhet change over time, the probability of dying would change each year so it would be hard to measure.
# look for the realtionship of heterozyogisty to probability of death to see if there is stuff on there (might not be)
#do oldies > fitness at maturity age > age-based death (age/lifespan) === DO NOT PUT A LIMIT ON THE NUMBER TO KILL
#
}
nkilled = NULL
nkilled = mature[mature[,8]==0,,drop=FALSE]
print(paste("killed", nrow(nkilled), "individuals"))
}else{
print(paste("not enough mature for fit-induced death"))
nkilled = NA
}
het/100
1/het/100
(1-(1/het/100))
1/(1-het)/100
