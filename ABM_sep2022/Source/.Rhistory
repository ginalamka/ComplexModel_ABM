directory = getwd()
outdir = paste(directory, "/Output/", sep = "")
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
#parameters
k.V           = 500 #c(1000, 5000, 500) #c(500, 1000, 5000, 10000)                #carrying capacity
nSNP.V        = 10  #scaleup                #number of SNPs simulated, used to track drift
maxage.V      = 9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = 1                   #age indv becomes reproductively mature
years.V       = 250  #scaleup               #total run time; 200 year run following 50 year stabilization period
r0.V          = 1 #c(1, .8, 1.2) #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #1 is stable, <1 is decreasing, >1 is increasing
ratemort.V    = 1/(maxage.V*2) ###0.2225 #??##(1/(maxage.V+2))      #proportion of adults that die each year --CHECK WITH JANNA WHERE THIS NUMBER CAME FROM; current value of .2225 is from Waser and Jones 1991
nSNP.mig.V    = 0                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons.V   = 0        #number of conserved alleles within species -- used to track mutation
### when adding variables already marked out, don't forget to add 3 times below, on RunModel, and other functions that need the variable fed in
#potential migration rates: 1-5 indv, 5-10 indv, no migration
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "maxage", "broodsize", "maturity", "years", "r0", "ratemort", "nSNP.mig", "nSNP.cons")
#clean up, remember that these are still available in parameters
remove(nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V) #k.V
#2/28/22 I am removing k.V from this so I can reference it in Stochastsic.R
replicates    = 1 #20 #5 #10
plotit        = 1    #1=yes, 0=no
plotit2       = 1    #1=yes, 0=no
mutate        = 1    #1=yes, 0=no   #average mammalian genome mutation rate is 2.2 x 10^-9 per base pair per year, https://doi.org/10.1073/pnas.022629899
#krats = 2844.77 MB = 2844770000 bp x 2.2*10-9  = 6.258494 === does this matter here???
#bannertailed 0.0081 mutants/generation/locus, in Busch, Waser, and DeWoody 2007 doi: 10.1111/j.1365-294X.2007.03283.x.
mu            = 0.001  #mutation rate
styr          = 100 #year to start pop decline
nwk           = 250 #pop size after decline -- probs makes sense to keep these even in vary decline years and decline rate. should end @ same pt for all pop sizes
dur           = 50  #duration of small pop size before pop growth
edyr          = styr+dur #150 #year to end pop decline, first year at low pop size
s             = 5000 #(k.V*5) #size of source pop
r             = 1
#run model iterating over parameters
theEND = NULL
repEND = NULL
FINAL = NULL
REP   = NULL
rr=1
k             = parameters$k[r]
#REMOVED###allele        = parameters$allele[r]
nSNP          = parameters$nSNP[r]
nMicro        = parameters$nMicro[r]
#REMOVED###sex           = parameters$sex[r]
maxage        = parameters$maxage[r]
broodsize     = parameters$broodsize[r]
#REMOVED###sexratio      = parameters$sexratio[r]
maturity      = parameters$maturity[r]
years         = parameters$years[r]
r0            = parameters$r0[r]
ratemort      = parameters$ratemort[r]
nSNP.mig      = parameters$nSNP.mig[r]                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons     = parameters$nSNP.cons[r]                  #number of conserved alleles
#initialize population
pop = matrix(nrow=k, ncol=11)            #each individual gets its own row.. matrix > dataframe -- "ncol = 7 + (nloci)*2
colnames(pop) <- c("id", "mom", "dad", "age", "sex", "n offspring", "n adult offspring", "alive", "gen born", "gen died", "relative fitness") #just to give a better understanding of what these variables are, set names
pop[,1] = seq(1,k,1)                    #each individual has unique ID name; sequence starting at 1, through k, with each 1 interation
pop[,2:3] = 0                            #at this point, we are putting all equal to zero because this is the initial generation and we dont know parents
#pop[,2] = rep(0,k)                      #mom id - later will not be 0, this is useful for debugging #saying replicate 0 100 times
#pop[,3] = rep(0,k)                      #dad id - later will not be 0, this is useful for debugging
pop[,4] = rpois(k,maturity)-1  ##sample(seq(0,maxage,1),k,replace=T)-1   #set age between 0 and 4 and subtract 1 because we add one at the first generation #FOR UNIFORM DIST: dunif(k, min =0, max = maturity, log = FALSE)-1
pop[,5] = sample(c(0,1),k,replace=T)    #each individual assigned male (1) or female (0) #sample from zero k times, with replacements. aka set sex
pop[,6] = NA #this will be for number of times as a parent  #REMOVED###sample(c(0,1),k,replace=T)    #set allele 1 as either A=1 or a=0
pop[,7] = NA #this will be for number of times offspring survive to maturity   #REMOVED###sample(c(0,1),k,replace=T)    #set allele 2 as either A=1 or a=0
pop[,8] = 1                             #alive or dead? alive = 1, dead = 0
pop[,9] = 0                             #generation born
pop[,10] = 0                            #generation died
pop[,11] = NA                            #relative fitness #at this point, we are putting all equal to zero because this is the initial generation
sz = k #to keep track of the number of indv for ID'ing later
#generate SNPs for the starting pop -- taken from Janna's Captive breeding IBM
popgen = matrix(nrow=k, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = sample(seq(from=0.4, to=0.6, by=0.01),1) ##0.5 #sample(seq(from=0, to=1, by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(k*p*p, 0)),                                      #homozygous p*p
rep(1, round(k*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, k-(round(k*p*p, 0)+(round(k*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, k, replace = FALSE)
for(kk in 1:k){
if(gtype[kk]==0){                 #homo (0,0)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 0
next
}else if(gtype[kk]==1){           #hetero (0,1)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 1
}else{                            #homo (1,1)
popgen[kk,columns[l]]   = 1
popgen[kk,columns[l]+1] = 1
}
}
#colnames(popgen) <- c('SNP', l)
pool = NULL
#add genotypes to pop matrix
}
het <- matrix(nrow=nrow(popgen), ncol=1)
for(g in 1:nrow(popgen)){
w <- sum(popgen[g ,seq(1,ncol(popgen),2)]!=popgen[g,seq(2,ncol(popgen),2)])/(ncol(popgen)/2)
het[g,1] <- w
} #note to add the other SNPs in here if wanted
pop[,11] <- het
#REMOVE4EVOLUTION###create migrant and nonmigrant unique SNPs
#REMOVE4EVOLUTION##popSNPs = matrix(nrow=k, ncol=nSNP.mig*2)
#REMOVE4EVOLUTION##columnsb = seq(1,(nSNP.mig*2),2)
#REMOVE4EVOLUTION##for(b in 1:nrow(popSNPs)){    #set up similar to above in case change the sequence or format later
#REMOVE4EVOLUTION##  popSNPs[b,] = 0
#REMOVE4EVOLUTION##}
#REMOVE4EVOLUTION###create conserved SNPs
#REMOVE4EVOLUTION##conSNPs = matrix(nrow=k, ncol=nSNP.cons*2)
#REMOVE4EVOLUTION##columnsc = seq(1,(nSNP.cons*2),2)
#REMOVE4EVOLUTION##for(c in 1:nrow(conSNPs)){    #set up similar to above in case change the sequence or format later
#REMOVE4EVOLUTION##  conSNPs[c,] = 0
#REMOVE4EVOLUTION##}
#REMOVE4EVOLUTION##focalpop <- cbind(pop, popgen, popSNPs, conSNPs)   ##??not sure why, but not binding correctly???
focalpop <- cbind(pop, popgen)
pop <- focalpop
#calculate heterozygosity for each indv, put it in pop table
#write starting pop to table
####REMOVED### write.table(pop, paste(directory, "/Output/focal_population", r, ".csv", sep=""), sep=",", col.names=T, row.names=F)
#clean up
#REMOVE4EVOLUTION##remove(popgen, popSNPs, conSNPs)
#notes from talking with Janna 10/21 -- doesnt quite work yet
#plan is to add in additional SNPs to track genotypes. this will help set up Breed.R
#f = 0.2 #allele freq, means 20% of the time, allele 0, 80% of the time, allele 1
#x = sample(c(0,1), 2(nrow(pop)), freq = c(f,1-f))
#pop[,i] = x[1:nrow(pop)]
#pop[,i+1] = x[nrow(pop)+1:length(x)]
#for(i in 1:10){
#  seq(1,nSNP*2,2)
#  }
#make sure to add in additional SNPs for Source pop also!!
#options for SNPs = can do 0-2 values with 1 column per SNP OR 2 columns per SNP with 0-1
#implications of each decision is based on calculating heterozygosity vs generating offspring
#initialize source population
source = matrix(nrow=s, ncol=11)            #each individual gets its own row.. matrix > dataframe
colnames(source) <- c("id", "mom", "dad", "age", "sex", "n offspring", "n adult offspring", "alive", "gen born", "gen died", "relative fitness") #just to give a better understanding of what these variables are, set names
source[,1] = seq(-(s),-1,1)                     #each individual has unique ID name; sequence starting at -1, through -k, with each 1 interation, negative flag for source pop
source[,2:3] = -1                           #at this point, we are putting all equal to negative 1 to flag from source pop, and we dont know parents/parents arent in focal pop
source[,4] = sample(seq(0,maxage,1),s,replace=T)   #set age between 0 and 4 (source isnt aged, so dont subtract 1); consider if age 0 should be able to migrate
source[,5] = sample(c(0,1),s,replace=T)    #each individual assigned male (1) or female (0) #sample from zero k times, with replacements. aka set sex
source[,6] = NA #this will be for number of times as a parent   #REMOVED##sample(c(0,1),k,replace=T)    #set allele 1 as either A=1 or a=0
source[,7] = NA #for number of offspring that reach maturity ##REMOVED#### sample(c(0,1),k,replace=T)    #set allele 2 as either A=1 or a=0
source[,8] = 1                             #alive or dead? alive = 1, dead = 0
source[,9] = -1                            #generation born
source[,10] = 0                            #generation died
source[,11] = NA                            #relative fitness
#generate source gentoypes
sourcegen = matrix(nrow=s, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = sample(seq(from=0.4, to=0.6, by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(s*p*p, 0)),                                      #homozygous p*p
rep(1, round(s*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, s-(round(s*p*p, 0)+(round(s*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, s, replace = FALSE)
for(ss in 1:s){
if(gtype[ss]==0){                 #homo (0,0)
sourcegen[ss,columns[l]]   = 0
sourcegen[ss,columns[l]+1] = 0
next
}else if(gtype[ss]==1){           #hetero (0,1)
sourcegen[ss,columns[l]]   = 0
sourcegen[ss,columns[l]+1] = 1
}else{                            #homo (1,1)
sourcegen[ss,columns[l]]   = 1
sourcegen[ss,columns[l]+1] = 1
}
}
#colnames(sourcegen) <- c('SNP', l)
#pool = NULL
#add genotypes to source matrix
}
sourcehet <- matrix(nrow=nrow(sourcegen), ncol=1)
for(j in 1:nrow(sourcegen)){
z <- sum(sourcegen[j ,seq(1,ncol(sourcegen),2)]!=sourcegen[j,seq(2,ncol(sourcegen),2)])/(ncol(sourcegen)/2)
sourcehet[j,1] <- z
} #note to add the other SNPs in here if wanted
source[,11] <- sourcehet
#REMOVE4EVOLUTION###create migrant and nonmigrant unique SNPs
#REMOVE4EVOLUTION##migSNPs = matrix(nrow=s, ncol=nSNP.mig*2)
#REMOVE4EVOLUTION##columnsd= seq(1,(nSNP.mig*2),2)
#REMOVE4EVOLUTION##for(d in 1:nrow(migSNPs)){    #set up similar to above in case change the sequence or format later
#REMOVE4EVOLUTION##  migSNPs[d,] = 1
#REMOVE4EVOLUTION##}
#REMOVE4EVOLUTION###create conserved SNPs
#REMOVE4EVOLUTION##conSNPs = matrix(nrow=s, ncol=nSNP.cons*2)
#REMOVE4EVOLUTION##columnse = seq(1,(nSNP.cons*2),2)
#REMOVE4EVOLUTION##for(e in 1:nrow(conSNPs)){    #set up similar to above in case change the sequence or format later
#REMOVE4EVOLUTION##  conSNPs[e,] = 0
#REMOVE4EVOLUTION##}
#REMOVE4EVOLUTION##source1 <- cbind(source, sourcegen, migSNPs, conSNPs)        #also doesnt work????
source1 <- cbind(source, sourcegen)
source <- source1
#write starting source to table
#### REMOVED### write.table(source, paste(directory, "/Output/source", r, ".csv", sep=""), sep=",", col.names=T, row.names=F)
y=0
#analyze each replicate
out = Analyze(parameters, r, pop, mig, focalpop, source1, y, init.het, rr, nSNP, nSNP.mig, nSNP.cons, numboff)
#out[1,1] = y
#out[1,ncol(out)+1] = rr
FINAL = rbind(FINAL, out[1,])
init.het <- FINAL[1,5]
}
y=1
pop = AgeUp(pop)                        #age pop + 1 year
pop = FitnessDeath(pop, maturity, ratemort, y)                #kill indv
#pop = DeathByAge(pop, maxage)           #age-dependent mortality
if(nrow(pop) <= 10){
print(paste("Population low, less than 10 indv"))
break
}
if(nrow(pop) <= 10){
print(paste("Population low, less than 10 indv"))
break
}
#pop = RandomDeath(pop)                  #random mortality
tt = Migrate(pop, source)             #subpop migration
pop = tt[[1]]
mig = tt[[2]]  #0
sz = sz + mig #may need to edit since dead are not being removed from pop
source = tt[[3]]
if(nrow(pop) <= 4){
print(paste("Population crash @ MateChoice, less than 4 indv"))
break
}
pairs = MateChoice(pop, sex, maturity)
if(is.null(pairs)==TRUE){
print(paste("skipping pop size next, breed due to no parents"))
break  #consider whether this should be next or break
}
#REMOVED## if(sum(pairs[,1]) < 0 | sum(pairs[,2]) < 0){
#REMOVED##   print(paste("Only migrants available as parents"))
#REMOVED##   break
#REMOVED## }
numboff = PopSizeNext(pop, k, r0, maturity) #ADD NEW K MODIFIER
if(numboff <= 1){
print(paste("No new babies, skip breed"))
next
}
ttt = Breed(pop, pairs, numboff, k, sz, nSNP, nSNP.mig, broodsize, y, mu, mutate, nSNP.cons) #still needs work
pop = ttt[[1]]
bb = ttt[[2]]
sz = sz + bb
pop = AgeDeath(pop, maxage, ratemort, y)                #kill indv based on age
print(paste("DONE!", y, "rep", rr))
y=2
nrow(pop)
table(pop[,4])
pop = AgeUp(pop)                        #age pop + 1 year
table(pop[,4])
dead = pop[pop[,8] == 0, , drop=FALSE]          #remove dead indvs
table(pop[,4])
table(dead[,4])
41+183
table(pop[,8])
pop = FitnessDeath(pop, maturity, ratemort, y)                #kill indv
table(pop[,8])
#pop = DeathByAge(pop, maxage)           #age-dependent mortality
if(nrow(pop) <= 10){
print(paste("Population low, less than 10 indv"))
break
}
if(nrow(pop) <= 10){
print(paste("Population low, less than 10 indv"))
break
}
#pop = RandomDeath(pop)                  #random mortality
tt = Migrate(pop, source)             #subpop migration
pop = tt[[1]]
mig = tt[[2]]  #0
sz = sz + mig #may need to edit since dead are not being removed from pop
sz
416+94
tt[[2]]
source = tt[[3]]
if(nrow(pop) <= 4){
print(paste("Population crash @ MateChoice, less than 4 indv"))
break
}
pairs = MateChoice(pop, sex, maturity)
if(is.null(pairs)==TRUE){
print(paste("skipping pop size next, breed due to no parents"))
break  #consider whether this should be next or break
}
#REMOVED## if(sum(pairs[,1]) < 0 | sum(pairs[,2]) < 0){
#REMOVED##   print(paste("Only migrants available as parents"))
#REMOVED##   break
#REMOVED## }
numboff = PopSizeNext(pop, k, r0, maturity) #ADD NEW K MODIFIER
nrow(pop)
length(pop[pop[,8]==1,,drop==FALSE])
nrow(pop[pop[,8]==1,,drop==FALSE])
table(pop[,8])
if(numboff <= 1){
print(paste("No new babies, skip breed"))
next
}
ttt = Breed(pop, pairs, numboff, k, sz, nSNP, nSNP.mig, broodsize, y, mu, mutate, nSNP.cons) #still needs work
pop = ttt[[1]]
bb = ttt[[2]]
bb
sz = sz + bb
pop = AgeDeath(pop, maxage, ratemort, y)                #kill indv based on age
print(paste("DONE!", y, "rep", rr))
#Cover.R
#used for the complex migration model
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM") #setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM")
directory = getwd()
outdir = paste(directory, "/Output/", sep = "")
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
#parameters
k.V           = 500 #c(1000, 5000, 500) #c(500, 1000, 5000, 10000)                #carrying capacity
nSNP.V        = 10  #scaleup                #number of SNPs simulated, used to track drift
maxage.V      = 9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = 1                   #age indv becomes reproductively mature
years.V       = 250  #scaleup               #total run time; 200 year run following 50 year stabilization period
r0.V          = 1 #c(1, .8, 1.2) #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #1 is stable, <1 is decreasing, >1 is increasing
ratemort.V    = 1/(maxage.V*2) ###0.2225 #??##(1/(maxage.V+2))      #proportion of adults that die each year --CHECK WITH JANNA WHERE THIS NUMBER CAME FROM; current value of .2225 is from Waser and Jones 1991
nSNP.mig.V    = 0                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons.V   = 0        #number of conserved alleles within species -- used to track mutation
### when adding variables already marked out, don't forget to add 3 times below, on RunModel, and other functions that need the variable fed in
#potential migration rates: 1-5 indv, 5-10 indv, no migration
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "maxage", "broodsize", "maturity", "years", "r0", "ratemort", "nSNP.mig", "nSNP.cons")
#clean up, remember that these are still available in parameters
remove(nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V) #k.V
#2/28/22 I am removing k.V from this so I can reference it in Stochastsic.R
replicates    = 1 #20 #5 #10
plotit        = 1    #1=yes, 0=no
plotit2       = 1    #1=yes, 0=no
mutate        = 1    #1=yes, 0=no   #average mammalian genome mutation rate is 2.2 x 10^-9 per base pair per year, https://doi.org/10.1073/pnas.022629899
#krats = 2844.77 MB = 2844770000 bp x 2.2*10-9  = 6.258494 === does this matter here???
#bannertailed 0.0081 mutants/generation/locus, in Busch, Waser, and DeWoody 2007 doi: 10.1111/j.1365-294X.2007.03283.x.
mu            = 0.001  #mutation rate
styr          = 100 #year to start pop decline
nwk           = 250 #pop size after decline -- probs makes sense to keep these even in vary decline years and decline rate. should end @ same pt for all pop sizes
dur           = 50  #duration of small pop size before pop growth
edyr          = styr+dur #150 #year to end pop decline, first year at low pop size
s             = 5000 #(k.V*5) #size of source pop
r             = 1
#run model iterating over parameters
theEND = NULL
repEND = NULL
for(r in 1:nrow(parameters)){
ALL = RunModel(parameters, r, directory, replicates)
FINAL = ALL[[1]]
POP = ALL[[2]]
REP = ALL[[3]]
####REMOVED## POP = RunModel(parameters, r, directory, replicates)
####REMOVED## write.table(POP, paste(directory, "/Output/CoverPop", r, ".csv", sep=""), sep=",", col.names=TRUE, row.names=F)
#####REMOVED##write.table(POP, paste(directory, "/Output/CoverPop.txt", sep=""), sep="\t", col.names=TRUE, row.names=F)  #use this for a .txt file, good for in a text editor. ; "/t" for macs
theEND = rbind(theEND, FINAL)
repEND = rbind(repEND, REP)
}
#Cover.R
#used for the complex migration model
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM") #setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM")
directory = getwd()
outdir = paste(directory, "/Output/", sep = "")
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
#parameters
k.V           = 500 #c(1000, 5000, 500) #c(500, 1000, 5000, 10000)                #carrying capacity
nSNP.V        = 10  #scaleup                #number of SNPs simulated, used to track drift
maxage.V      = 9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = 1                   #age indv becomes reproductively mature
years.V       = 250  #scaleup               #total run time; 200 year run following 50 year stabilization period
r0.V          = 1 #c(1, .8, 1.2) #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #1 is stable, <1 is decreasing, >1 is increasing
ratemort.V    = 1/(maxage.V*2) ###0.2225 #??##(1/(maxage.V+2))      #proportion of adults that die each year --CHECK WITH JANNA WHERE THIS NUMBER CAME FROM; current value of .2225 is from Waser and Jones 1991
nSNP.mig.V    = 0                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons.V   = 0        #number of conserved alleles within species -- used to track mutation
### when adding variables already marked out, don't forget to add 3 times below, on RunModel, and other functions that need the variable fed in
#potential migration rates: 1-5 indv, 5-10 indv, no migration
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "maxage", "broodsize", "maturity", "years", "r0", "ratemort", "nSNP.mig", "nSNP.cons")
#clean up, remember that these are still available in parameters
remove(nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V) #k.V
#2/28/22 I am removing k.V from this so I can reference it in Stochastsic.R
replicates    = 1 #20 #5 #10
plotit        = 1    #1=yes, 0=no
plotit2       = 1    #1=yes, 0=no
mutate        = 1    #1=yes, 0=no   #average mammalian genome mutation rate is 2.2 x 10^-9 per base pair per year, https://doi.org/10.1073/pnas.022629899
#krats = 2844.77 MB = 2844770000 bp x 2.2*10-9  = 6.258494 === does this matter here???
#bannertailed 0.0081 mutants/generation/locus, in Busch, Waser, and DeWoody 2007 doi: 10.1111/j.1365-294X.2007.03283.x.
mu            = 0.001  #mutation rate
styr          = 100 #year to start pop decline
nwk           = 250 #pop size after decline -- probs makes sense to keep these even in vary decline years and decline rate. should end @ same pt for all pop sizes
dur           = 50  #duration of small pop size before pop growth
edyr          = styr+dur #150 #year to end pop decline, first year at low pop size
s             = 5000 #(k.V*5) #size of source pop
r             = 1
#run model iterating over parameters
theEND = NULL
repEND = NULL
for(r in 1:nrow(parameters)){
ALL = RunModel(parameters, r, directory, replicates)
FINAL = ALL[[1]]
POP = ALL[[2]]
REP = ALL[[3]]
####REMOVED## POP = RunModel(parameters, r, directory, replicates)
####REMOVED## write.table(POP, paste(directory, "/Output/CoverPop", r, ".csv", sep=""), sep=",", col.names=TRUE, row.names=F)
#####REMOVED##write.table(POP, paste(directory, "/Output/CoverPop.txt", sep=""), sep="\t", col.names=TRUE, row.names=F)  #use this for a .txt file, good for in a text editor. ; "/t" for macs
theEND = rbind(theEND, FINAL)
repEND = rbind(repEND, REP)
}
#write.table(theEND, paste(directory, "/Output/summary_", r, ".csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE)
#summary table should have nrows = nparameters * nyears * nreplicates
#^^ may have some fewer than above because some simulations may break before all years are able to be run
Plot(theEND)
Plot2(repEND)
nrow(pop)
#parameters
k.V           = 500 #c(1000, 5000, 500) #c(500, 1000, 5000, 10000)                #carrying capacity
nSNP.V        = 10  #scaleup                #number of SNPs simulated, used to track drift
maxage.V      = 9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = 1                   #age indv becomes reproductively mature
years.V       = 250  #scaleup               #total run time; 200 year run following 50 year stabilization period
r0.V          = 1 #c(1, .8, 1.2) #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #1 is stable, <1 is decreasing, >1 is increasing
ratemort.V    = 1/(maxage.V*2) ###0.2225 #??##(1/(maxage.V+2))      #proportion of adults that die each year --CHECK WITH JANNA WHERE THIS NUMBER CAME FROM; current value of .2225 is from Waser and Jones 1991
nSNP.mig.V    = 0                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons.V   = 0        #number of conserved alleles within species -- used to track mutation
pop = matrix(nrow=k, ncol=11)            #each individual gets its own row.. matrix > dataframe -- "ncol = 7 + (nloci)*2
k             = parameters$k[r]
parameters = expand.grid(k.V, nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "maxage", "broodsize", "maturity", "years", "r0", "ratemort", "nSNP.mig", "nSNP.cons")
#clean up, remember that these are still available in parameters
remove(nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V) #k.V
#2/28/22 I am removing k.V from this so I can reference it in Stochastsic.R
replicates    = 1 #20 #5 #10
plotit        = 1    #1=yes, 0=no
plotit2       = 1    #1=yes, 0=no
mutate        = 1    #1=yes, 0=no   #average mammalian genome mutation rate is 2.2 x 10^-9 per base pair per year, https://doi.org/10.1073/pnas.022629899
#krats = 2844.77 MB = 2844770000 bp x 2.2*10-9  = 6.258494 === does this matter here???
#bannertailed 0.0081 mutants/generation/locus, in Busch, Waser, and DeWoody 2007 doi: 10.1111/j.1365-294X.2007.03283.x.
mu            = 0.001  #mutation rate
styr          = 100 #year to start pop decline
nwk           = 250 #pop size after decline -- probs makes sense to keep these even in vary decline years and decline rate. should end @ same pt for all pop sizes
dur           = 50  #duration of small pop size before pop growth
edyr          = styr+dur #150 #year to end pop decline, first year at low pop size
s             = 5000 #(k.V*5) #size of source pop
r             = 1
#run model iterating over parameters
theEND = NULL
repEND = NULL
k             = parameters$k[r]
#REMOVED###allele        = parameters$allele[r]
nSNP          = parameters$nSNP[r]
nMicro        = parameters$nMicro[r]
#REMOVED###sex           = parameters$sex[r]
maxage        = parameters$maxage[r]
broodsize     = parameters$broodsize[r]
#REMOVED###sexratio      = parameters$sexratio[r]
maturity      = parameters$maturity[r]
years         = parameters$years[r]
r0            = parameters$r0[r]
ratemort      = parameters$ratemort[r]
nSNP.mig      = parameters$nSNP.mig[r]                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons     = parameters$nSNP.cons[r]                  #number of conserved alleles
pop = matrix(nrow=k, ncol=11)            #each individual gets its own row.. matrix > dataframe -- "ncol = 7 + (nloci)*2
colnames(pop) <- c("id", "mom", "dad", "age", "sex", "n offspring", "n adult offspring", "alive", "gen born", "gen died", "relative fitness") #just to give a better understanding of what these variables are, set names
pop[,1] = seq(1,k,1)                    #each individual has unique ID name; sequence starting at 1, through k, with each 1 interation
pop[,2:3] = 0                            #at this point, we are putting all equal to zero because this is the initial generation and we dont know parents
#pop[,2] = rep(0,k)                      #mom id - later will not be 0, this is useful for debugging #saying replicate 0 100 times
#pop[,3] = rep(0,k)                      #dad id - later will not be 0, this is useful for debugging
pop[,4] = rpois(k,maturity)-1  ##sample(seq(0,maxage,1),k,replace=T)-1   #set age between 0 and 4 and subtract 1 because we add one at the first generation #FOR UNIFORM DIST: dunif(k, min =0, max = maturity, log = FALSE)-1
pop[,5] = sample(c(0,1),k,replace=T)    #each individual assigned male (1) or female (0) #sample from zero k times, with replacements. aka set sex
pop[,6] = NA #this will be for number of times as a parent  #REMOVED###sample(c(0,1),k,replace=T)    #set allele 1 as either A=1 or a=0
pop[,7] = NA #this will be for number of times offspring survive to maturity   #REMOVED###sample(c(0,1),k,replace=T)    #set allele 2 as either A=1 or a=0
pop[,8] = 1                             #alive or dead? alive = 1, dead = 0
pop[,9] = 0                             #generation born
pop[,10] = 0                            #generation died
pop[,11] = NA                            #relative fitness #at this point, we are putting all equal to zero because this is the initial generation
sz = k #to keep track of the number of indv for ID'ing later
alive = pop[-which(pop[,1]%in%dead), , drop = FALSE]
dead = pop[pop[,8] == 0, , drop=FALSE]                 #remove dead indv
alive = pop[-which(pop[,1]%in%dead), , drop = FALSE]
#calculate the current population size following aging and death
###REMOVED# Nt = nrow(pop) #use this if removing dead from pop
Nt = nrow(alive)
Nt
alive = pop
#calculate the current population size following aging and death
###REMOVED# Nt = nrow(pop) #use this if removing dead from pop
Nt = nrow(alive)
#calculate the new pop size with the logistic growth equation
Ntt = Nt*(1+r0*(1-(Nt/k))) #logistic
k
1+r0
(1+r0*(1-(Nt/k)))
r0=.8
(1+r0*(1-(Nt/k)))
Nt*(1+r0*(1-(Nt/k)))
k=250
Nt*(1+r0*(1-(Nt/k)))
#calculate the new pop size with the logistic growth equation
Ntt = Nt*(1+r0*(1-(Nt/k))) #logistic
#add Density Independent variance in growth
Nt1 = round(rnorm(1, Ntt, 1), 0)
Nt1 = as.integer(Nt1)
print(paste("The next generation's population size will be", Nt1))
(Nt/k)
Ntt
