setwd("C:/Users/HP/Box/New Computer/Auburn/Data/KRats") #set working directory in the Rstudio folder on my computer and box drive
directory = getwd()
field = read.table("KRATP.csv", header=T, sep=",")
data  = read.table("krat_pedigree_plus.csv", header=T, sep=",")
setwd("C:/Users/HP/Box/New Computer/Auburn/Data/KRats") #set working directory in the Rstudio folder on my computer and box drive
getwd()
setwd("C:/Users/HP/Box/New Computer/Auburn/Data/KRats") #set working directory in the Rstudio folder on my computer and box drive
plot(y=1x+2)
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/Output_local/finaldata/sept2023") #setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM")
directory = getwd()
outdir = paste(directory, "/figs/", sep = "")
p7a = read.table("end_9.18.23_LL7a_all_summary.csv", header=T, sep=",") #fin_5.11.23_1LL7a_all_summary
p3a = read.table("end_9.18.23_LL3a_all_summary.csv", header=T, sep=",")  #fin_5.10.23_1LL3a_all_summary
p1a = read.table("end_9.18.23_LL1a_all_summary.csv", header=T, sep=",") #comb_fin_5.11.23_1LL1a_all_summary
ba = read.table("end_9.18.23_nbtl3a_all_summary.csv", header=T, sep=",") #fin_6.1.23_nbtl3a_all_summary
smry = rbind(ba, p1a, p3a, p7a) #p50,
gt.cols <- c("grey", "firebrick3", "darkorange1", "gold")
lty = c(1,1,1,1)
##### Generic plotting code
#1=yr, 2=pop size, 3=propmig, 4=He, 5=Ho[driftSNPS], 6=fis, 7=nadult, 8=sxratio, 9=nmig, 10=fst, 11=replicate, 12=paramset, 13=noffspring, 14=fstvsource, 15=fisvsource,
#16=deltaK, 17=propMigSNPs, 18=HoallSNPs, 19=projectname, 20=groupnumb, 21=k, 22=nSNP, 23=miggy, 24=LBhet, 25=LBp, 26=maxage, 27=broodsize, 28=maturity,
#29=years, 30=r0, 31=nSNP.mig, 32=nSNP.cons
{
var = 5
varname = "observed heterozygosity"
title = "various starting allele freqs"
range(smry[,var])
#if(anyNA(smry[,var]==TRUE)){
#  hold<- na.omit(smry[,var],drop=FALSE)
#  smry <- as.matrix(hold)
#}
ymin <- 0 # round(min(smry[,var]), digits = 2)#-.1
ymax <- 5 #round(max(smry[,var]), digits = 2)#+.1
ln.alph <- 0.5
pt.alph <- 1.25
diff <- 0.15
xmin <- 0
xmax <- 350
offsets <- c(-0.1, -0.5, 0, 0.5, 0.1, 0.15, 0.2, 0.25) #c(-0.2, -0.1, 0, 0.1, 0.2) #must have the same number of parameter sets
orig.xs <- c(1, 50, 100, 151, 201, 250, 300, 350) #years of interest
text.size <- 1.75
pt.cex <- 1.25
lwd <- 4
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', main = title, xlab = 'Generation Time', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels = c('0','50', '100','150','200', '250', '300','350'), cex.axis = text.size)
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
y1<-temp[temp[,1] == orig.xs[1],,]
y2<-temp[temp[,1] == orig.xs[2],,]
y3<-temp[temp[,1] == orig.xs[3],,]
y4<-temp[temp[,1] == orig.xs[4],,]
y5<-temp[temp[,1] == orig.xs[5],,]
y6<-temp[temp[,1] == orig.xs[6],,]
y7<-temp[temp[,1] == orig.xs[7],,]
y8<-temp[temp[,1] == orig.xs[8],,]
xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#columns <- c(18, 19, 20, 21)
lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd)
points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
arrows(x0 = xs, y0 = c(mean(y1[,var])-sd(y1[,var]), mean(y2[,var])-sd(y2[,var]), mean(y3[,var])-sd(y3[,var]), mean(y4[,var])-sd(y4[,var]), mean(y5[,var])-sd(y5[,var]), mean(y6[,var])-sd(y6[,var]), mean(y7[,var])-sd(y7[,var]), mean(y8[,var])-sd(y8[,var])),
y1 = c(mean(y1[,var])+sd(y1[,var]), mean(y2[,var])+sd(y2[,var]), mean(y3[,var])+sd(y3[,var]), mean(y4[,var])+sd(y4[,var]), mean(y5[,var])+sd(y5[,var]), mean(y6[,var])+sd(y6[,var]), mean(y7[,var])+sd(y7[,var]), mean(y8[,var])+sd(y8[,var])),
lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  for(l in unique(orig.xs)){
#    column <- columns[l]
#    ## 95% CIs (inappropriate for large sample sizes)
#    # arrows(x0 = xs[l], x1 = xs[l], y0 = (mean(temp[,column], na.rm = TRUE) - (sd(temp[,column], na.rm = TRUE)/10*1.96)),
#    #        y1 = (mean(temp[,column], na.rm = TRUE) + (sd(temp[,column], na.rm = TRUE)/10*1.96)),
#    #        lwd = 2, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  arrows(x0 = OTime[,1], y0 = (OTime[,2])-(sd(OTime[,7])), y1 = (OTime[,2])+(sd(OTime[,7])), lwd = .5, col = "black", code=3, angle=90, length=0.1)
#
#    arrows(x0 = xs[l], x1 = xs[l], y0 = quantile(temp[,column], probs = c(0.025,0.975))[1],   #will need to do this for each year of interest
#           y1 = quantile(temp[,column], probs = c(0.025,0.975))[2],
#           lwd = 2, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  }
print(mean(y1[,var]))
print(mean(y3[,var]))
print(mean(y4[,var]))
print(mean(y8[,var]))
col <- col+1
}
#legend('topleft', legend = c('mig=0_no btlnk', 'mig=1 mig/gen_no btlnk', 'mig=0_w/btlnk', 'mig=1 mig/genw/btlnk'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('mig=0', 'mig=1 mig/gen','mig=100@y=151','mig=25@y=151,165,181,195'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('bottomleft', legend = c('critically endangered', 'endangered','threatened','vulnerable'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('bottomright', legend = c('low source, low focal', 'high source, low focal','high source, high focal'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
legend('right', legend = c('LL 1mig', 'HL 1mig','HH 1mig', 'LL no mig', 'HL no mig','HH no mig'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('mig=0', 'mig=1 mig/gen','mig=100@y=151','mig=25@y=151,165,181,195', 'mig=1mig@y=151','mig=100@y=125','mig=25 @ y=125,140,155,170'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
ln.alph <- 0.5
pt.alph <- 1.25
diff <- 0.15
xmin <- 0
xmax <- 350
offsets <- c(-0.1, -0.5, 0, 0.5, 0.1, 0.15, 0.2, 0.25) #c(-0.2, -0.1, 0, 0.1, 0.2) #must have the same number of parameter sets
orig.xs <- c(1, 50, 100, 151, 201, 250, 300, 350) #years of interest
text.size <- 1.75
pt.cex <- 1.25
lwd <- 4
#poly specs
dens = NULL #c(100, 100, 100, 100, NULL, NA, NULL, NA)
ang = 45
bo = NA #c(NULL, NULL, NULL, NULL, NA, NA, NA, NA) #alpha(gt.cols[col], .8)
alf = c(.7, .7, .7, .7, .7, .7, .7, .7) #.7, .7, .7, .7
lty = c(3,3,3,3,1,1,1,1)
##### Generic plotting code
#1=yr, 2=pop size, 3=propmig, 4=He, 5=Ho[driftSNPS], 6=fis, 7=nadult, 8=sxratio, 9=nmig, 10=fst, 11=replicate, 12=paramset, 13=noffspring, 14=fstvsource, 15=fisvsource,
#16=deltaK, 17=propMigSNPs, 18=HoallSNPs, 19=projectname, 20=groupnumb, 21=k, 22=nSNP, 23=miggy, 24=LBhet, 25=LBp, 26=maxage, 27=broodsize, 28=maturity,
#29=years, 30=r0, 31=nSNP.mig, 32=nSNP.cons
{
var = 5
varname = "observed heterozygosity"
title = "various starting allele freqs"
range(smry[,var])
#if(anyNA(smry[,var]==TRUE)){
#  hold<- na.omit(smry[,var],drop=FALSE)
#  smry <- as.matrix(hold)
#}
ymin <- 0 # round(min(smry[,var]), digits = 2)#-.1
ymax <- 5 #round(max(smry[,var]), digits = 2)#+.1
ln.alph <- 0.5
pt.alph <- 1.25
diff <- 0.15
xmin <- 0
xmax <- 350
offsets <- c(-0.1, -0.5, 0, 0.5, 0.1, 0.15, 0.2, 0.25) #c(-0.2, -0.1, 0, 0.1, 0.2) #must have the same number of parameter sets
orig.xs <- c(1, 50, 100, 151, 201, 250, 300, 350) #years of interest
text.size <- 1.75
pt.cex <- 1.25
lwd <- 4
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', main = title, xlab = 'Generation Time', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels = c('0','50', '100','150','200', '250', '300','350'), cex.axis = text.size)
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
y1<-temp[temp[,1] == orig.xs[1],,]
y2<-temp[temp[,1] == orig.xs[2],,]
y3<-temp[temp[,1] == orig.xs[3],,]
y4<-temp[temp[,1] == orig.xs[4],,]
y5<-temp[temp[,1] == orig.xs[5],,]
y6<-temp[temp[,1] == orig.xs[6],,]
y7<-temp[temp[,1] == orig.xs[7],,]
y8<-temp[temp[,1] == orig.xs[8],,]
xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#columns <- c(18, 19, 20, 21)
lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd)
points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
arrows(x0 = xs, y0 = c(mean(y1[,var])-sd(y1[,var]), mean(y2[,var])-sd(y2[,var]), mean(y3[,var])-sd(y3[,var]), mean(y4[,var])-sd(y4[,var]), mean(y5[,var])-sd(y5[,var]), mean(y6[,var])-sd(y6[,var]), mean(y7[,var])-sd(y7[,var]), mean(y8[,var])-sd(y8[,var])),
y1 = c(mean(y1[,var])+sd(y1[,var]), mean(y2[,var])+sd(y2[,var]), mean(y3[,var])+sd(y3[,var]), mean(y4[,var])+sd(y4[,var]), mean(y5[,var])+sd(y5[,var]), mean(y6[,var])+sd(y6[,var]), mean(y7[,var])+sd(y7[,var]), mean(y8[,var])+sd(y8[,var])),
lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  for(l in unique(orig.xs)){
#    column <- columns[l]
#    ## 95% CIs (inappropriate for large sample sizes)
#    # arrows(x0 = xs[l], x1 = xs[l], y0 = (mean(temp[,column], na.rm = TRUE) - (sd(temp[,column], na.rm = TRUE)/10*1.96)),
#    #        y1 = (mean(temp[,column], na.rm = TRUE) + (sd(temp[,column], na.rm = TRUE)/10*1.96)),
#    #        lwd = 2, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  arrows(x0 = OTime[,1], y0 = (OTime[,2])-(sd(OTime[,7])), y1 = (OTime[,2])+(sd(OTime[,7])), lwd = .5, col = "black", code=3, angle=90, length=0.1)
#
#    arrows(x0 = xs[l], x1 = xs[l], y0 = quantile(temp[,column], probs = c(0.025,0.975))[1],   #will need to do this for each year of interest
#           y1 = quantile(temp[,column], probs = c(0.025,0.975))[2],
#           lwd = 2, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  }
print(mean(y1[,var]))
print(mean(y3[,var]))
print(mean(y4[,var]))
print(mean(y8[,var]))
col <- col+1
}
#legend('topleft', legend = c('mig=0_no btlnk', 'mig=1 mig/gen_no btlnk', 'mig=0_w/btlnk', 'mig=1 mig/genw/btlnk'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('mig=0', 'mig=1 mig/gen','mig=100@y=151','mig=25@y=151,165,181,195'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('bottomleft', legend = c('critically endangered', 'endangered','threatened','vulnerable'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('bottomright', legend = c('low source, low focal', 'high source, low focal','high source, high focal'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
legend('right', legend = c('LL 1mig', 'HL 1mig','HH 1mig', 'LL no mig', 'HL no mig','HH no mig'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('mig=0', 'mig=1 mig/gen','mig=100@y=151','mig=25@y=151,165,181,195', 'mig=1mig@y=151','mig=100@y=125','mig=25 @ y=125,140,155,170'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
