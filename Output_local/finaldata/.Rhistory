for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
#y1<-temp[temp[,1] == orig.xs[1],,]
#y2<-temp[temp[,1] == orig.xs[2],,]
#y3<-temp[temp[,1] == orig.xs[3],,]
#y4<-temp[temp[,1] == orig.xs[4],,]
#y5<-temp[temp[,1] == orig.xs[5],,]
#y6<-temp[temp[,1] == orig.xs[6],,]
#y7<-temp[temp[,1] == orig.xs[7],,]
#y8<-temp[temp[,1] == orig.xs[8],,]
tbl = NULL
tbl = matrix(nrow = length(unique(temp[,1])), ncol = 5)
for(d in unique(temp[,1])){
dat = temp[temp[,1]==d,,drop=FALSE]
tbl[(d+1),1] = as.numeric(d)
tbl[(d+1),2] = as.numeric(mean(dat[,var]))
tbl[(d+1),3] = as.numeric(quantile(dat[,var], probs=0.08))
tbl[(d+1),4] = as.numeric(quantile(dat[,var], probs=0.92))
tbl[(d+1),5] = as.character(dat[1,19])
}
#TBL = rbind(TBL, tbl)
#xs <- tbl[,1] + offsets[col]  #dont forget you're in a loop, dummy
polygon(x = c(tbl[,1],rev(tbl[,1])) , y = c(tbl[,3],rev(tbl[,4])), density = dens[col], angle = ang, border = bo[col],
col = adjustcolor(alpha(gt.cols[col], .7), alpha.f=alf[col]))  #border = alpha(gt.cols[col], .8)
lines(tbl[,1], tbl[,2], col = gt.cols[col], lwd = lwd, lty = lty[col])
#xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd, lty = lty[col])
#points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
#arrows(x0 = xs, y0 = c(quantile(y1[,var], probs=0.08), quantile(y2[,var], probs=c(0.08)), quantile(y3[,var], probs=c(0.08)), quantile(y4[,var], probs=c(0.08)), quantile(y5[,var], probs=c(0.08)), quantile(y6[,var], probs=c(0.08)), quantile(y7[,var], probs=c(0.08)), quantile(y8[,var], probs=c(0.08))),
#       y1 = c(quantile(y1[,var], probs=0.92), quantile(y2[,var], probs=0.92), quantile(y3[,var], probs=0.92), quantile(y4[,var], probs=0.92), quantile(y5[,var], probs=0.92), quantile(y6[,var], probs=0.92), quantile(y7[,var], probs=0.92), quantile(y8[,var], probs=0.92)),
#       lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#print(mean(y1[,var]))
#print(mean(y7[,var]))
col <- col+1
}
#legend('bottomleft', legend = c('no mig', '1 mig/gen'), col = gt.cols, pch = pch, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###Figure 6
{
#5A - timing of burst mig rates (B&E) ~ year
par(mfcol = c(4,2))
p3b = read.table("fin_5.10.23_1LL3b_all_summary.csv", header=T, sep=",")
p3e = read.table("cpfin_5.10.23_1LL3e_all_summary.csv", header=T, sep=",")
smry = rbind(p3b, p3e)
gt.cols <- c("black", "grey")
lty = c(1,1)
#A
var = 17
varname = "Proportion Migrant\n Ancestry (%)"
title = "A"
ymin <- 0
ymax <- 1
{
par(mar = c(2,6,1,1))
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', xlab = '', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
text(-5,ymax, title, cex=text.size, family="sans")
#title(title, adj = 0, cex.main = text.size, line = 2)
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels=FALSE, cex.axis = text.size) #labels = c('0','50', '100','150','200', '250', '300','350')
#abline(h = 0, lty = 2)
#legend("topleft", legend = c('after restoration', 'during restoration'), col = gt.cols, pch = 15, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.75, horiz = FALSE, xjust=0, x.intersp = 0.2, y.intersp=0.4, seg.len = .75)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
#y1<-temp[temp[,1] == orig.xs[1],,]
#y2<-temp[temp[,1] == orig.xs[2],,]
#y3<-temp[temp[,1] == orig.xs[3],,]
#y4<-temp[temp[,1] == orig.xs[4],,]
#y5<-temp[temp[,1] == orig.xs[5],,]
#y6<-temp[temp[,1] == orig.xs[6],,]
#y7<-temp[temp[,1] == orig.xs[7],,]
#y8<-temp[temp[,1] == orig.xs[8],,]
tbl = NULL
tbl = matrix(nrow = length(unique(temp[,1])), ncol = 5)
for(d in unique(temp[,1])){
dat = temp[temp[,1]==d,,drop=FALSE]
tbl[(d+1),1] = as.numeric(d)
tbl[(d+1),2] = as.numeric(mean(dat[,var]))
tbl[(d+1),3] = as.numeric(quantile(dat[,var], probs=0.08))
tbl[(d+1),4] = as.numeric(quantile(dat[,var], probs=0.92))
tbl[(d+1),5] = as.character(dat[1,19])
}
#TBL = rbind(TBL, tbl)
#xs <- tbl[,1] + offsets[col]  #dont forget you're in a loop, dummy
polygon(x = c(tbl[,1],rev(tbl[,1])) , y = c(tbl[,3],rev(tbl[,4])), density = dens[col], angle = ang, border = bo[col],
col = adjustcolor(alpha(gt.cols[col], .7), alpha.f=alf[col]))  #border = alpha(gt.cols[col], .8)
lines(tbl[,1], tbl[,2], col = gt.cols[col], lwd = lwd, lty = lty[col])
#xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd, lty = lty[col])
#points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
#arrows(x0 = xs, y0 = c(quantile(y1[,var], probs=0.08), quantile(y2[,var], probs=c(0.08)), quantile(y3[,var], probs=c(0.08)), quantile(y4[,var], probs=c(0.08)), quantile(y5[,var], probs=c(0.08)), quantile(y6[,var], probs=c(0.08)), quantile(y7[,var], probs=c(0.08)), quantile(y8[,var], probs=c(0.08))),
#       y1 = c(quantile(y1[,var], probs=0.92), quantile(y2[,var], probs=0.92), quantile(y3[,var], probs=0.92), quantile(y4[,var], probs=0.92), quantile(y5[,var], probs=0.92), quantile(y6[,var], probs=0.92), quantile(y7[,var], probs=0.92), quantile(y8[,var], probs=0.92)),
#       lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#print(mean(y1[,var]))
#print(mean(y7[,var]))
#print(mean(y1[,var]))
#print(mean(y7[,var]))
col <- col+1
}
#legend('bottomleft', legend = c('no mig', '1 mig/gen'), col = gt.cols, pch = pch, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
#C
var = 5
varname = "Heterozygosity"
title = "C"
ymin <- .1
ymax <- .3
{
par(mar = c(2,6,1,1))
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', xlab = '', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
text(-5,ymax, title, cex=text.size, family="sans")
#title(title, adj = 0, cex.main = text.size, line = 2)
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels=FALSE, cex.axis = text.size) #labels = c('0','50', '100','150','200', '250', '300','350')
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
#y1<-temp[temp[,1] == orig.xs[1],,]
#y2<-temp[temp[,1] == orig.xs[2],,]
#y3<-temp[temp[,1] == orig.xs[3],,]
#y4<-temp[temp[,1] == orig.xs[4],,]
#y5<-temp[temp[,1] == orig.xs[5],,]
#y6<-temp[temp[,1] == orig.xs[6],,]
#y7<-temp[temp[,1] == orig.xs[7],,]
#y8<-temp[temp[,1] == orig.xs[8],,]
tbl = NULL
tbl = matrix(nrow = length(unique(temp[,1])), ncol = 5)
for(d in unique(temp[,1])){
dat = temp[temp[,1]==d,,drop=FALSE]
tbl[(d+1),1] = as.numeric(d)
tbl[(d+1),2] = as.numeric(mean(dat[,var]))
tbl[(d+1),3] = as.numeric(quantile(dat[,var], probs=0.08))
tbl[(d+1),4] = as.numeric(quantile(dat[,var], probs=0.92))
tbl[(d+1),5] = as.character(dat[1,19])
}
#TBL = rbind(TBL, tbl)
#xs <- tbl[,1] + offsets[col]  #dont forget you're in a loop, dummy
polygon(x = c(tbl[,1],rev(tbl[,1])) , y = c(tbl[,3],rev(tbl[,4])), density = dens[col], angle = ang, border = bo[col],
col = adjustcolor(alpha(gt.cols[col], .7), alpha.f=alf[col]))  #border = alpha(gt.cols[col], .8)
lines(tbl[,1], tbl[,2], col = gt.cols[col], lwd = lwd, lty = lty[col])
#xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd, lty = lty[col])
#points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
#arrows(x0 = xs, y0 = c(quantile(y1[,var], probs=0.08), quantile(y2[,var], probs=c(0.08)), quantile(y3[,var], probs=c(0.08)), quantile(y4[,var], probs=c(0.08)), quantile(y5[,var], probs=c(0.08)), quantile(y6[,var], probs=c(0.08)), quantile(y7[,var], probs=c(0.08)), quantile(y8[,var], probs=c(0.08))),
#       y1 = c(quantile(y1[,var], probs=0.92), quantile(y2[,var], probs=0.92), quantile(y3[,var], probs=0.92), quantile(y4[,var], probs=0.92), quantile(y5[,var], probs=0.92), quantile(y6[,var], probs=0.92), quantile(y7[,var], probs=0.92), quantile(y8[,var], probs=0.92)),
#       lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#print(mean(y1[,var]))
#print(mean(y7[,var]))
print(mean(y1[,var]))
print(mean(y7[,var]))
col <- col+1
}
#legend('bottomleft', legend = c('no mig', '1 mig/gen'), col = gt.cols, pch = pch, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
#E
var = 10
varname = "Original Population \n Divergence (Fst)"
title = "E"
ymin <- 0
ymax <- .4
{
par(mar = c(2,6,1,1))
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', xlab = '', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
text(-5,ymax, title, cex=text.size, family="sans")
#title(title, adj = 0, cex.main = text.size, line = 2)
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels=FALSE, cex.axis = text.size) #labels = c('0','50', '100','150','200', '250', '300','350')
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
#y1<-temp[temp[,1] == orig.xs[1],,]
#y2<-temp[temp[,1] == orig.xs[2],,]
#y3<-temp[temp[,1] == orig.xs[3],,]
#y4<-temp[temp[,1] == orig.xs[4],,]
#y5<-temp[temp[,1] == orig.xs[5],,]
#y6<-temp[temp[,1] == orig.xs[6],,]
#y7<-temp[temp[,1] == orig.xs[7],,]
#y8<-temp[temp[,1] == orig.xs[8],,]
tbl = NULL
tbl = matrix(nrow = length(unique(temp[,1])), ncol = 5)
for(d in unique(temp[,1])){
dat = temp[temp[,1]==d,,drop=FALSE]
tbl[(d+1),1] = as.numeric(d)
tbl[(d+1),2] = as.numeric(mean(dat[,var]))
tbl[(d+1),3] = as.numeric(quantile(dat[,var], probs=0.08))
tbl[(d+1),4] = as.numeric(quantile(dat[,var], probs=0.92))
tbl[(d+1),5] = as.character(dat[1,19])
}
#TBL = rbind(TBL, tbl)
#xs <- tbl[,1] + offsets[col]  #dont forget you're in a loop, dummy
polygon(x = c(tbl[,1],rev(tbl[,1])) , y = c(tbl[,3],rev(tbl[,4])), density = dens[col], angle = ang, border = bo[col],
col = adjustcolor(alpha(gt.cols[col], .7), alpha.f=alf[col]))  #border = alpha(gt.cols[col], .8)
lines(tbl[,1], tbl[,2], col = gt.cols[col], lwd = lwd, lty = lty[col])
#xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd, lty = lty[col])
#points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
#arrows(x0 = xs, y0 = c(quantile(y1[,var], probs=0.08), quantile(y2[,var], probs=c(0.08)), quantile(y3[,var], probs=c(0.08)), quantile(y4[,var], probs=c(0.08)), quantile(y5[,var], probs=c(0.08)), quantile(y6[,var], probs=c(0.08)), quantile(y7[,var], probs=c(0.08)), quantile(y8[,var], probs=c(0.08))),
#       y1 = c(quantile(y1[,var], probs=0.92), quantile(y2[,var], probs=0.92), quantile(y3[,var], probs=0.92), quantile(y4[,var], probs=0.92), quantile(y5[,var], probs=0.92), quantile(y6[,var], probs=0.92), quantile(y7[,var], probs=0.92), quantile(y8[,var], probs=0.92)),
#       lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#print(mean(y1[,var]))
#print(mean(y7[,var]))
print(mean(y1[,var]))
print(mean(y7[,var]))
col <- col+1
}
#legend('bottomleft', legend = c('no mig', '1 mig/gen'), col = gt.cols, pch = pch, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
#G
var = 14
varname = "Migrant Source Population \n Divergence (Fst)"
title = "G"
ymin <- 0
ymax <- .5
{
par(mar = c(4,6,1,1))
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', xlab = 'Year', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
text(-5,ymax, title, cex=text.size, family="sans")
#title(title, adj = 0, cex.main = text.size, line = 2)
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels = c('0','50', '100','150','200', '250', '300','350'), cex.axis = text.size)
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
#y1<-temp[temp[,1] == orig.xs[1],,]
#y2<-temp[temp[,1] == orig.xs[2],,]
#y3<-temp[temp[,1] == orig.xs[3],,]
#y4<-temp[temp[,1] == orig.xs[4],,]
#y5<-temp[temp[,1] == orig.xs[5],,]
#y6<-temp[temp[,1] == orig.xs[6],,]
#y7<-temp[temp[,1] == orig.xs[7],,]
#y8<-temp[temp[,1] == orig.xs[8],,]
tbl = NULL
tbl = matrix(nrow = length(unique(temp[,1])), ncol = 5)
for(d in unique(temp[,1])){
dat = temp[temp[,1]==d,,drop=FALSE]
tbl[(d+1),1] = as.numeric(d)
tbl[(d+1),2] = as.numeric(mean(dat[,var]))
tbl[(d+1),3] = as.numeric(quantile(dat[,var], probs=0.08))
tbl[(d+1),4] = as.numeric(quantile(dat[,var], probs=0.92))
tbl[(d+1),5] = as.character(dat[1,19])
}
#TBL = rbind(TBL, tbl)
#xs <- tbl[,1] + offsets[col]  #dont forget you're in a loop, dummy
polygon(x = c(tbl[,1],rev(tbl[,1])) , y = c(tbl[,3],rev(tbl[,4])), density = dens[col], angle = ang, border = bo[col],
col = adjustcolor(alpha(gt.cols[col], .7), alpha.f=alf[col]))  #border = alpha(gt.cols[col], .8)
lines(tbl[,1], tbl[,2], col = gt.cols[col], lwd = lwd, lty = lty[col])
#xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd, lty = lty[col])
#points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
#arrows(x0 = xs, y0 = c(quantile(y1[,var], probs=0.08), quantile(y2[,var], probs=c(0.08)), quantile(y3[,var], probs=c(0.08)), quantile(y4[,var], probs=c(0.08)), quantile(y5[,var], probs=c(0.08)), quantile(y6[,var], probs=c(0.08)), quantile(y7[,var], probs=c(0.08)), quantile(y8[,var], probs=c(0.08))),
#       y1 = c(quantile(y1[,var], probs=0.92), quantile(y2[,var], probs=0.92), quantile(y3[,var], probs=0.92), quantile(y4[,var], probs=0.92), quantile(y5[,var], probs=0.92), quantile(y6[,var], probs=0.92), quantile(y7[,var], probs=0.92), quantile(y8[,var], probs=0.92)),
#       lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#print(mean(y1[,var]))
#print(mean(y7[,var]))
print(mean(y1[,var]))
print(mean(y7[,var]))
col <- col+1
}
#legend('bottomleft', legend = c('no mig', '1 mig/gen'), col = gt.cols, pch = pch, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
p3c = read.table("fin_5.10.23_1LL3c_all_summary.csv", header=T, sep=",")
p3f = read.table("fin_5.10.23_1LL3f_all_summary.csv", header=T, sep=",")
smry = rbind(p3c, p3f)
#B
var = 17
varname = "Proportion Migrant\n Ancestry (%)"
title = "B"
ymin <- 0
ymax <- 1
{
par(mar = c(2,2,1,6))
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', xlab = '', ylab = '',
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
text(-5,ymax, title, cex=text.size, family="sans")
#title(title, adj = 0, cex.main = text.size, line = 2)
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels=FALSE, cex.axis = text.size) #labels = c('0','50', '100','150','200', '250', '300','350')
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
#y1<-temp[temp[,1] == orig.xs[1],,]
#y2<-temp[temp[,1] == orig.xs[2],,]
#y3<-temp[temp[,1] == orig.xs[3],,]
#y4<-temp[temp[,1] == orig.xs[4],,]
#y5<-temp[temp[,1] == orig.xs[5],,]
#y6<-temp[temp[,1] == orig.xs[6],,]
#y7<-temp[temp[,1] == orig.xs[7],,]
#y8<-temp[temp[,1] == orig.xs[8],,]
tbl = NULL
tbl = matrix(nrow = length(unique(temp[,1])), ncol = 5)
for(d in unique(temp[,1])){
dat = temp[temp[,1]==d,,drop=FALSE]
tbl[(d+1),1] = as.numeric(d)
tbl[(d+1),2] = as.numeric(mean(dat[,var]))
tbl[(d+1),3] = as.numeric(quantile(dat[,var], probs=0.08))
tbl[(d+1),4] = as.numeric(quantile(dat[,var], probs=0.92))
tbl[(d+1),5] = as.character(dat[1,19])
}
#TBL = rbind(TBL, tbl)
#xs <- tbl[,1] + offsets[col]  #dont forget you're in a loop, dummy
polygon(x = c(tbl[,1],rev(tbl[,1])) , y = c(tbl[,3],rev(tbl[,4])), density = dens[col], angle = ang, border = bo[col],
col = adjustcolor(alpha(gt.cols[col], .7), alpha.f=alf[col]))  #border = alpha(gt.cols[col], .8)
lines(tbl[,1], tbl[,2], col = gt.cols[col], lwd = lwd, lty = lty[col])
#xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd, lty = lty[col])
#points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
#arrows(x0 = xs, y0 = c(quantile(y1[,var], probs=0.08), quantile(y2[,var], probs=c(0.08)), quantile(y3[,var], probs=c(0.08)), quantile(y4[,var], probs=c(0.08)), quantile(y5[,var], probs=c(0.08)), quantile(y6[,var], probs=c(0.08)), quantile(y7[,var], probs=c(0.08)), quantile(y8[,var], probs=c(0.08))),
#       y1 = c(quantile(y1[,var], probs=0.92), quantile(y2[,var], probs=0.92), quantile(y3[,var], probs=0.92), quantile(y4[,var], probs=0.92), quantile(y5[,var], probs=0.92), quantile(y6[,var], probs=0.92), quantile(y7[,var], probs=0.92), quantile(y8[,var], probs=0.92)),
#       lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#print(mean(y1[,var]))
#print(mean(y7[,var]))
col <- col+1
}
#legend('bottomleft', legend = c('no mig', '1 mig/gen'), col = gt.cols, pch = pch, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
#D
var = 5
varname = "Heterozygosity"
title = "D"
ymin <- .1
ymax <- .3
{
par(mar = c(2,2,1,6))
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', xlab = '', ylab = '',
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
text(-5,ymax, title, cex=text.size, family="sans")
#title(title, adj = 0, cex.main = text.size, line = 2)
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels=FALSE, cex.axis = text.size) #labels = c('0','50', '100','150','200', '250', '300','350')
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
#y1<-temp[temp[,1] == orig.xs[1],,]
#y2<-temp[temp[,1] == orig.xs[2],,]
#y3<-temp[temp[,1] == orig.xs[3],,]
#y4<-temp[temp[,1] == orig.xs[4],,]
#y5<-temp[temp[,1] == orig.xs[5],,]
#y6<-temp[temp[,1] == orig.xs[6],,]
#y7<-temp[temp[,1] == orig.xs[7],,]
#y8<-temp[temp[,1] == orig.xs[8],,]
tbl = NULL
tbl = matrix(nrow = length(unique(temp[,1])), ncol = 5)
for(d in unique(temp[,1])){
dat = temp[temp[,1]==d,,drop=FALSE]
tbl[(d+1),1] = as.numeric(d)
tbl[(d+1),2] = as.numeric(mean(dat[,var]))
tbl[(d+1),3] = as.numeric(quantile(dat[,var], probs=0.08))
tbl[(d+1),4] = as.numeric(quantile(dat[,var], probs=0.92))
tbl[(d+1),5] = as.character(dat[1,19])
}
#TBL = rbind(TBL, tbl)
#xs <- tbl[,1] + offsets[col]  #dont forget you're in a loop, dummy
polygon(x = c(tbl[,1],rev(tbl[,1])) , y = c(tbl[,3],rev(tbl[,4])), density = dens[col], angle = ang, border = bo[col],
col = adjustcolor(alpha(gt.cols[col], .7), alpha.f=alf[col]))  #border = alpha(gt.cols[col], .8)
lines(tbl[,1], tbl[,2], col = gt.cols[col], lwd = lwd, lty = lty[col])
#xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd, lty = lty[col])
#points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
#arrows(x0 = xs, y0 = c(quantile(y1[,var], probs=0.08), quantile(y2[,var], probs=c(0.08)), quantile(y3[,var], probs=c(0.08)), quantile(y4[,var], probs=c(0.08)), quantile(y5[,var], probs=c(0.08)), quantile(y6[,var], probs=c(0.08)), quantile(y7[,var], probs=c(0.08)), quantile(y8[,var], probs=c(0.08))),
#       y1 = c(quantile(y1[,var], probs=0.92), quantile(y2[,var], probs=0.92), quantile(y3[,var], probs=0.92), quantile(y4[,var], probs=0.92), quantile(y5[,var], probs=0.92), quantile(y6[,var], probs=0.92), quantile(y7[,var], probs=0.92), quantile(y8[,var], probs=0.92)),
#       lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#print(mean(y1[,var]))
#print(mean(y7[,var]))
print(mean(y1[,var]))
print(mean(y7[,var]))
col <- col+1
}
#legend('bottomleft', legend = c('no mig', '1 mig/gen'), col = gt.cols, pch = pch, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
#F
var = 10
varname = "Original Population \n Divergence (Fst)"
title = "F"
ymin <- 0
ymax <- .4
{
par(mar = c(2,2,1,6))
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', xlab = '', ylab = '',
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
text(-5,ymax, title, cex=text.size, family="sans")
#title(title, adj = 0, cex.main = text.size, line = 2)
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels=FALSE, cex.axis = text.size) #labels = c('0','50', '100','150','200', '250', '300','350')
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
#y1<-temp[temp[,1] == orig.xs[1],,]
#y2<-temp[temp[,1] == orig.xs[2],,]
#y3<-temp[temp[,1] == orig.xs[3],,]
#y4<-temp[temp[,1] == orig.xs[4],,]
#y5<-temp[temp[,1] == orig.xs[5],,]
#y6<-temp[temp[,1] == orig.xs[6],,]
#y7<-temp[temp[,1] == orig.xs[7],,]
#y8<-temp[temp[,1] == orig.xs[8],,]
tbl = NULL
tbl = matrix(nrow = length(unique(temp[,1])), ncol = 5)
for(d in unique(temp[,1])){
dat = temp[temp[,1]==d,,drop=FALSE]
tbl[(d+1),1] = as.numeric(d)
tbl[(d+1),2] = as.numeric(mean(dat[,var]))
tbl[(d+1),3] = as.numeric(quantile(dat[,var], probs=0.08))
tbl[(d+1),4] = as.numeric(quantile(dat[,var], probs=0.92))
tbl[(d+1),5] = as.character(dat[1,19])
}
#TBL = rbind(TBL, tbl)
#xs <- tbl[,1] + offsets[col]  #dont forget you're in a loop, dummy
polygon(x = c(tbl[,1],rev(tbl[,1])) , y = c(tbl[,3],rev(tbl[,4])), density = dens[col], angle = ang, border = bo[col],
col = adjustcolor(alpha(gt.cols[col], .7), alpha.f=alf[col]))  #border = alpha(gt.cols[col], .8)
lines(tbl[,1], tbl[,2], col = gt.cols[col], lwd = lwd, lty = lty[col])
#xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd, lty = lty[col])
#points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
#arrows(x0 = xs, y0 = c(quantile(y1[,var], probs=0.08), quantile(y2[,var], probs=c(0.08)), quantile(y3[,var], probs=c(0.08)), quantile(y4[,var], probs=c(0.08)), quantile(y5[,var], probs=c(0.08)), quantile(y6[,var], probs=c(0.08)), quantile(y7[,var], probs=c(0.08)), quantile(y8[,var], probs=c(0.08))),
#       y1 = c(quantile(y1[,var], probs=0.92), quantile(y2[,var], probs=0.92), quantile(y3[,var], probs=0.92), quantile(y4[,var], probs=0.92), quantile(y5[,var], probs=0.92), quantile(y6[,var], probs=0.92), quantile(y7[,var], probs=0.92), quantile(y8[,var], probs=0.92)),
#       lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#print(mean(y1[,var]))
#print(mean(y7[,var]))
col <- col+1
}
#legend('bottomleft', legend = c('no mig', '1 mig/gen'), col = gt.cols, pch = pch, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
#H
var = 14
varname = "Migrant Source Population \n Divergence (Fst)"
title = "H"
ymin <- 0
ymax <- .5
{
par(mar = c(4,2,1,6))
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', xlab = 'Year', ylab = '',
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
text(-5,ymax, title, cex=text.size, family="sans")
#title(title, adj = 0, cex.main = text.size, line = 2)
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels = c('0','50', '100','150','200', '250', '300','350'), cex.axis = text.size)
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
#y1<-temp[temp[,1] == orig.xs[1],,]
#y2<-temp[temp[,1] == orig.xs[2],,]
#y3<-temp[temp[,1] == orig.xs[3],,]
#y4<-temp[temp[,1] == orig.xs[4],,]
#y5<-temp[temp[,1] == orig.xs[5],,]
#y6<-temp[temp[,1] == orig.xs[6],,]
#y7<-temp[temp[,1] == orig.xs[7],,]
#y8<-temp[temp[,1] == orig.xs[8],,]
tbl = NULL
tbl = matrix(nrow = length(unique(temp[,1])), ncol = 5)
for(d in unique(temp[,1])){
dat = temp[temp[,1]==d,,drop=FALSE]
tbl[(d+1),1] = as.numeric(d)
tbl[(d+1),2] = as.numeric(mean(dat[,var]))
tbl[(d+1),3] = as.numeric(quantile(dat[,var], probs=0.08))
tbl[(d+1),4] = as.numeric(quantile(dat[,var], probs=0.92))
tbl[(d+1),5] = as.character(dat[1,19])
}
#TBL = rbind(TBL, tbl)
#xs <- tbl[,1] + offsets[col]  #dont forget you're in a loop, dummy
polygon(x = c(tbl[,1],rev(tbl[,1])) , y = c(tbl[,3],rev(tbl[,4])), density = dens[col], angle = ang, border = bo[col],
col = adjustcolor(alpha(gt.cols[col], .7), alpha.f=alf[col]))  #border = alpha(gt.cols[col], .8)
lines(tbl[,1], tbl[,2], col = gt.cols[col], lwd = lwd, lty = lty[col])
#xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd, lty = lty[col])
#points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var]), mean(y8[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
#arrows(x0 = xs, y0 = c(quantile(y1[,var], probs=0.08), quantile(y2[,var], probs=c(0.08)), quantile(y3[,var], probs=c(0.08)), quantile(y4[,var], probs=c(0.08)), quantile(y5[,var], probs=c(0.08)), quantile(y6[,var], probs=c(0.08)), quantile(y7[,var], probs=c(0.08)), quantile(y8[,var], probs=c(0.08))),
#       y1 = c(quantile(y1[,var], probs=0.92), quantile(y2[,var], probs=0.92), quantile(y3[,var], probs=0.92), quantile(y4[,var], probs=0.92), quantile(y5[,var], probs=0.92), quantile(y6[,var], probs=0.92), quantile(y7[,var], probs=0.92), quantile(y8[,var], probs=0.92)),
#       lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#print(mean(y1[,var]))
#print(mean(y7[,var]))
col <- col+1
}
#legend('bottomleft', legend = c('no mig', '1 mig/gen'), col = gt.cols, pch = pch, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
}
