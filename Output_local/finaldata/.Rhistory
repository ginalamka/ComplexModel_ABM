qqnorm(log(etho$VarTurnAngle))
qqline((etho$VarTurnAngle))
qqline(log(etho$VarTurnAngle))
v.1 <- lmer(log(etho$VarTurnAngle) ~ Treatment + Age + Mean.Mobility + (1|FishName) + (1|Clutch) + (1|Paternity), data = etho)
v.2 <- lmer(scaledVarTurnAngle ~ Treatment + Age + Mean.Mobility + (1|FishName) + (1|Clutch) + (1|Paternity), data = etho)
anova(v.1, v.2)
v1 <- lmer(scaledVarTurnAngle ~ Treatment + Age + Mean.Mobility + (1|FishName) + (1|Clutch) + (1|Paternity), data = etho)
summary(v1)  #is singular - no variance due to Paternity
v7 <- lmer(scaledVarTurnAngle ~ Treatment + Age + (1|FishName) + (1|Clutch) + (1|Paternity), data = etho)
summary(v7)  #is singular - no variance due to Paternity
summary(v1)
summary(v7)  #is singular - no variance due to Paternity
anova(v7, v1)
v2 <- lmer(scaledVarTurnAngle ~ Treatment + Age + Mean.Mobility + (1|FishName) + (1|Clutch), data = etho)
summary(v2)   #is singular - no variance due to indv ID
anova(v2, v1)
v3 <- lmer(scaledVarTurnAngle ~ Treatment + Age + Mean.Mobility + (1|FishName), data = etho)
summary(v3)
anova(v3, v1)
v4 <- lmer(scaledVarTurnAngle ~ Treatment + Age + Mean.Mobility + Treatment*Age+ (1|FishName) + (1|Clutch) + (1|Paternity), data = etho) #scale is off here
summary(v4)  #is singular - no variance due to indv ID or Paternity
anova(v4, v1)
v5 <- lm(scaledVarTurnAngle ~ Treatment + Age + Treatment*Age + Mean.Mobility, data = etho)
summary(v5)
anova(v5, v4)
anova(v4, v5)
anova(v7, v1) #v1 is better -- include mean.mobility
anova(v2, v1) #close but v1 is better
anova(v4, v1) #v4 is better
anova(v4, v5) #v4 is better
v6 <- lmer(scaledVarTurnAngle ~ Treatment + Age + Mean.Mobility +(1|Clutch), data = etho)
anova(v6, v4)
summary(v4)  #doesnt look like any random effects will be important
v7 <- lmer(scaledVarTurnAngle ~ Treatment + Age + Mean.Mobility + Treatment*Age+ (1|FishName) + (1|Clutch), data = etho)
summary(v7)  #doesnt look like any random effects will be important
anova(v7, v4) #v4 is better
v8 <- lmer(scaledVarTurnAngle ~ Treatment + Age + Mean.Mobility + Treatment*Age+ (1|FishName), data = etho)
summary(v8)  #doesnt look like any random effects will be important
anova(v4, v8) #v4 is better
anova(v4, v1) #v4 is better
v9 <- lmer(scaledVarTurnAngle ~ Treatment + Age + Treatment*Age+ (1|FishName) + (1|Clutch) + (1|Paternity), data = etho)
summary(v9)  #doesnt look like any random effects will be important
anova(v4, v9) #v4 is better
anova(v1, v9) #v4 is better
anova(v4, v9) #v4 is better
rptV = rpt(scaledVarTurnAngle ~ Treatment + Age + Mean.Mobility + Treatment*Age+ (1|FishName) + (1|Clutch) + (1|Paternity), data = etho, grname = "FishName", datatype = "Gaussian", nboot = 1000, npermut = 100)
summary(rptV) #is singular
summary(v4)  #doesnt look like any random effects will be important
plot(rptV)
plot(rptV, type="permut")
summary(rptV) #is singular
cor(etho$CumDur.Z2, etho$LatencyZ2360)
cor(etho$CumDur.Z2, etho$FreqZAlter)
plot(etho$Age, etho$LatencyZ2360)
plot(etho$Age, etho$FreqZAlter)
library(ggplot2)
ggplot(etho[which(etho$Treatment == "0"),], aes(x = FishName, y = VarTurnAngle)) +
#facet_wrap(~Treatment) +
geom_boxplot() +
theme_classic()
ggplot(etho[which(etho$Treatment == "0"),], aes(x = FishName, y = FreqZAlter)) +
#facet_wrap(~Treatment) +
geom_boxplot() +
theme_classic()
#one outlier individual in Control that crossed zones a lot
ggplot(etho[which(etho$Treatment == "0"),], aes(x = FishName, y = LatencyZ2360)) +
#facet_wrap(~Treatment) +
geom_boxplot() +
theme_classic()
#Latency
hist(etho$LatencyZ2360)
plot(etho$LatencyZ2360, etho$LatencyZ2)
#Latency
hist(etho$LatencyZ2360)
plot(etho$LatencyZ2)
hist(etho$LatencyZ2)
#Latency
hist(etho$LatencyZ2360)
qqnorm(etho$LatencyZ2360)
qqline(etho$LatencyZ2360)
asinTransform(etho$LatencyZ2360)
asinTransform(etho$LatencyZ2360+1)
logitTransform(etho$LatencyZ2360)
logitTransform((etho$CumDur.Z2
)
)
logitTransform(etho$LatencyZ2360)
etho$LatencyZ2360
range(etho$LatencyZ2360)
logitTransform(etho$LatencyZ2360/360)
hist(logitTransform(etho$LatencyZ2360/360))
hist(asinTransform(etho$LatencyZ2360/360))
hist(log(etho$LatencyZ2360/360))
hist(etho$LatencyZ2360/360)
hist(logitTransform(etho$LatencyZ2360/360))
hist(asinTransform(etho$LatencyZ2360/360))
hist(log(etho$LatencyZ2360/360))
hist(etho$LatencyZ2360/360)
asinTransform(etho$LatencyZ2360/360)
log(etho$LatencyZ2360/360)
hist(log(etho$LatencyZ2360/360))
hist(log((etho$LatencyZ2360+1)/360))
hist(etho$LatencyZ2360/360)
range(logitTransform(etho$LatencyZ2360/360))
hist(logitTransform(etho$LatencyZ2360/360))  #this def seems to be the best!
scale(logitTransform(etho$LatencyZ2360/360), center=T, scale=T)
hist(scale(logitTransform(etho$LatencyZ2360/360), center=T, scale=T))
hist(rangeScale(logitTransform(etho$LatencyZ2360/360)))
rangeScale(logitTransform(etho$LatencyZ2360/360))
hist(logitTransform(etho$LatencyZ2360/360))  #this def seems to be the best but range suggests need for scaling
range(logitTransform(etho$LatencyZ2360/360))
range(logitTransform((etho$LatencyZ2360+1)/360))
logitTransform(etho$LatencyZ2360/360)
hist(logitTransform(etho$LatencyZ2360))  #this def seems to be the best for distribution but range suggests need for scaling
hist(etho$LatencyZ2360/360)
hist(etho$LatencyZ2360)
range(etho$LatencyZ2360)
range(etho$LatencyZ2360/360)
hist(logitTransform(etho$LatencyZ2360/360))  #this def seems to be the best for distribution but range suggests need for scaling
hist(asinTransform(etho$LatencyZ2360/360))
hist(log((etho$LatencyZ2360+1)/360))
hist(etho$LatencyZ2360/360)
hist(logitTransform(etho$LatencyZ2360))  #this def seems to be the best for distribution but range suggests need for scaling
hist(asinTransform(etho$LatencyZ2360))
hist(log((etho$LatencyZ2360+1)))
hist(etho$LatencyZ2360)
hist(logitTransform(etho$LatencyZ2360))  #this def seems to be the best for distribution but range suggests need for scaling
it <- rangeScale(logitTransform(etho$LatencyZ2360/360))
it2 <- rangeScale(asinTransform(etho$LatencyZ2360/360))
it3 <- rangeScale(log(etho$LatencyZ2360/360))
plot((etho$LatencyZ2360/360, it, col="red")
plot(etho$LatencyZ2360/360, it, col="red")
points(etho$LatencyZ2360/360, it2, col="blue")
points(etho$LatencyZ2360/360, it3, col="yellow")
it <- rangeScale(logitTransform(etho$LatencyZ2360))
#data for supplemental
p1c = read.table("fin_6.1.23_LL1c_all_summary.csv", header=T, sep=",")
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/Output_local/finaldata") #setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM")
directory = getwd()
outdir = paste(directory, "/figs/", sep = "")
#data for supplemental
p1c = read.table("fin_6.1.23_LL1c_all_summary.csv", header=T, sep=",")
p7b = read.table("fin_6.1.23_LL7b_all_summary.csv", header=T, sep=",")
p7c = read.table("fin_6.1.23_LL7c_all_summary.csv", header=T, sep=",")
table(p1c[,1])
#data for Q2: pop crash sizes
p7a = read.table("fin_5.11.23_1LL7a_all_summary.csv", header=T, sep=",")
p70 = read.table("fin_5.11.23_1LL70_all_summary.csv", header=T, sep=",")
smry = rbind(p70, p7a, p7b, p7c)
library(colorspace)
library(scales)
gt.cols <- c("#FFC5D0", "#E2D4A8", "#A4DDEF", "#E4CBF9")
##### Generic plotting code
#1=yr, 2=pop size, 3=propmig, 4=He, 5=Ho[driftSNPS], 6=fis, 7=nadult, 8=sxratio, 9=nmig, 10=fst, 11=replicate, 12=paramset, 13=noffspring, 14=fstvsource, 15=fisvsource,
#16=deltaK, 17=propMigSNPs, 18=HoallSNPs, 19=projectname, 20=groupnumb, 21=k, 22=nSNP, 23=miggy, 24=LBhet, 25=LBp, 26=maxage, 27=broodsize, 28=maturity,
#29=years, 30=r0, 31=nSNP.mig, 32=nSNP.cons
{
var = 17
varname = "Fst vs source"
title = "exploring timing of immigrations"
range(smry[,var])
#if(anyNA(smry[,var]==TRUE)){
#  hold<- na.omit(smry)
#  smry <- hold
#}
ymin <- round(min(smry[,var]), digits = 2)#-.1
ymax <- round(max(smry[,var]), digits = 2)#+.1
ln.alph <- 0.5
pt.alph <- 1.25
diff <- 0.15
xmin <- 0
xmax <- 350
offsets <- c(-0.5, 0, 0.5, 0.1, 0.15, 0.2, 0.25) #c(-0.2, -0.1, 0, 0.1, 0.2) #must have the same number of parameter sets
orig.xs <- c(50, 100, 151, 201, 250, 300, 350) #years of interest
text.size <- 1.75
pt.cex <- 1.25
lwd <- 4
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', main = title, xlab = 'Generation Time', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels = c('0','50', '100','150','200', '250', '300','350'), cex.axis = text.size)
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
y1<-temp[temp[,1] == orig.xs[1],,]
y2<-temp[temp[,1] == orig.xs[2],,]
y3<-temp[temp[,1] == orig.xs[3],,]
y4<-temp[temp[,1] == orig.xs[4],,]
y5<-temp[temp[,1] == orig.xs[5],,]
y6<-temp[temp[,1] == orig.xs[6],,]
y7<-temp[temp[,1] == orig.xs[7],,]
xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#columns <- c(18, 19, 20, 21)
lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd)
points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
arrows(x0 = xs, y0 = c(mean(y1[,var])-sd(y1[,var]), mean(y2[,var])-sd(y2[,var]), mean(y3[,var])-sd(y3[,var]), mean(y4[,var])-sd(y4[,var]), mean(y5[,var])-sd(y5[,var]), mean(y6[,var])-sd(y6[,var]), mean(y7[,var])-sd(y7[,var])),
y1 = c(mean(y1[,var])+sd(y1[,var]), mean(y2[,var])+sd(y2[,var]), mean(y3[,var])+sd(y3[,var]), mean(y4[,var])+sd(y4[,var]), mean(y5[,var])+sd(y5[,var]), mean(y6[,var])+sd(y6[,var]), mean(y7[,var])+sd(y7[,var])),
lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  for(l in unique(orig.xs)){
#    column <- columns[l]
#    ## 95% CIs (inappropriate for large sample sizes)
#    # arrows(x0 = xs[l], x1 = xs[l], y0 = (mean(temp[,column], na.rm = TRUE) - (sd(temp[,column], na.rm = TRUE)/10*1.96)),
#    #        y1 = (mean(temp[,column], na.rm = TRUE) + (sd(temp[,column], na.rm = TRUE)/10*1.96)),
#    #        lwd = 2, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  arrows(x0 = OTime[,1], y0 = (OTime[,2])-(sd(OTime[,7])), y1 = (OTime[,2])+(sd(OTime[,7])), lwd = .5, col = "black", code=3, angle=90, length=0.1)
#
#    arrows(x0 = xs[l], x1 = xs[l], y0 = quantile(temp[,column], probs = c(0.025,0.975))[1],   #will need to do this for each year of interest
#           y1 = quantile(temp[,column], probs = c(0.025,0.975))[2],
#           lwd = 2, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  }
print(mean(y1[,var]))
print(mean(y7[,var]))
col <- col+1
}
#legend('topleft', legend = c('mig=0', 'mig=1 mig/gen','mig=100@y=151','mig=25@y=151,165,181,195'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('critically endangered', 'endangered','threatened','vulnerable'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('bottomright', legend = c('low source, low focal', 'high source, low focal','high source, high focal'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('LL 1mig', 'HL 1mig','HH 1mig', 'LL no mig', 'HL no mig','HH no mig'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
legend('topleft', legend = c('mig=0', 'mig=1 mig/gen','mig=100@y=151','mig=25@y=151,165,181,195', 'mig=1mig@y=151','mig=100@y=125','mig=25 @ y=125,140,155,170'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
##### Generic plotting code
#1=yr, 2=pop size, 3=propmig, 4=He, 5=Ho[driftSNPS], 6=fis, 7=nadult, 8=sxratio, 9=nmig, 10=fst, 11=replicate, 12=paramset, 13=noffspring, 14=fstvsource, 15=fisvsource,
#16=deltaK, 17=propMigSNPs, 18=HoallSNPs, 19=projectname, 20=groupnumb, 21=k, 22=nSNP, 23=miggy, 24=LBhet, 25=LBp, 26=maxage, 27=broodsize, 28=maturity,
#29=years, 30=r0, 31=nSNP.mig, 32=nSNP.cons
{
var = 17
varname = "Prop Mig SNPs"
title = "supplemental - migration rates in vulnerable sp"
range(smry[,var])
#if(anyNA(smry[,var]==TRUE)){
#  hold<- na.omit(smry)
#  smry <- hold
#}
ymin <- round(min(smry[,var]), digits = 2)#-.1
ymax <- round(max(smry[,var]), digits = 2)#+.1
ln.alph <- 0.5
pt.alph <- 1.25
diff <- 0.15
xmin <- 0
xmax <- 350
offsets <- c(-0.5, 0, 0.5, 0.1, 0.15, 0.2, 0.25) #c(-0.2, -0.1, 0, 0.1, 0.2) #must have the same number of parameter sets
orig.xs <- c(50, 100, 151, 201, 250, 300, 350) #years of interest
text.size <- 1.75
pt.cex <- 1.25
lwd <- 4
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', main = title, xlab = 'Generation Time', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels = c('0','50', '100','150','200', '250', '300','350'), cex.axis = text.size)
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
y1<-temp[temp[,1] == orig.xs[1],,]
y2<-temp[temp[,1] == orig.xs[2],,]
y3<-temp[temp[,1] == orig.xs[3],,]
y4<-temp[temp[,1] == orig.xs[4],,]
y5<-temp[temp[,1] == orig.xs[5],,]
y6<-temp[temp[,1] == orig.xs[6],,]
y7<-temp[temp[,1] == orig.xs[7],,]
xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#columns <- c(18, 19, 20, 21)
lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd)
points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
arrows(x0 = xs, y0 = c(mean(y1[,var])-sd(y1[,var]), mean(y2[,var])-sd(y2[,var]), mean(y3[,var])-sd(y3[,var]), mean(y4[,var])-sd(y4[,var]), mean(y5[,var])-sd(y5[,var]), mean(y6[,var])-sd(y6[,var]), mean(y7[,var])-sd(y7[,var])),
y1 = c(mean(y1[,var])+sd(y1[,var]), mean(y2[,var])+sd(y2[,var]), mean(y3[,var])+sd(y3[,var]), mean(y4[,var])+sd(y4[,var]), mean(y5[,var])+sd(y5[,var]), mean(y6[,var])+sd(y6[,var]), mean(y7[,var])+sd(y7[,var])),
lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  for(l in unique(orig.xs)){
#    column <- columns[l]
#    ## 95% CIs (inappropriate for large sample sizes)
#    # arrows(x0 = xs[l], x1 = xs[l], y0 = (mean(temp[,column], na.rm = TRUE) - (sd(temp[,column], na.rm = TRUE)/10*1.96)),
#    #        y1 = (mean(temp[,column], na.rm = TRUE) + (sd(temp[,column], na.rm = TRUE)/10*1.96)),
#    #        lwd = 2, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  arrows(x0 = OTime[,1], y0 = (OTime[,2])-(sd(OTime[,7])), y1 = (OTime[,2])+(sd(OTime[,7])), lwd = .5, col = "black", code=3, angle=90, length=0.1)
#
#    arrows(x0 = xs[l], x1 = xs[l], y0 = quantile(temp[,column], probs = c(0.025,0.975))[1],   #will need to do this for each year of interest
#           y1 = quantile(temp[,column], probs = c(0.025,0.975))[2],
#           lwd = 2, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  }
print(mean(y1[,var]))
print(mean(y7[,var]))
col <- col+1
}
legend('topleft', legend = c('mig=0', 'mig=1 mig/gen','mig=100@y=151','mig=25@y=151,165,181,195'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('critically endangered', 'endangered','threatened','vulnerable'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('bottomright', legend = c('low source, low focal', 'high source, low focal','high source, high focal'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('LL 1mig', 'HL 1mig','HH 1mig', 'LL no mig', 'HL no mig','HH no mig'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('mig=0', 'mig=1 mig/gen','mig=100@y=151','mig=25@y=151,165,181,195', 'mig=1mig@y=151','mig=100@y=125','mig=25 @ y=125,140,155,170'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
##### Generic plotting code
#1=yr, 2=pop size, 3=propmig, 4=He, 5=Ho[driftSNPS], 6=fis, 7=nadult, 8=sxratio, 9=nmig, 10=fst, 11=replicate, 12=paramset, 13=noffspring, 14=fstvsource, 15=fisvsource,
#16=deltaK, 17=propMigSNPs, 18=HoallSNPs, 19=projectname, 20=groupnumb, 21=k, 22=nSNP, 23=miggy, 24=LBhet, 25=LBp, 26=maxage, 27=broodsize, 28=maturity,
#29=years, 30=r0, 31=nSNP.mig, 32=nSNP.cons
{
var = 14
varname = "Fst vs source"
title = "supplemental - migration rates in vulnerable sp"
range(smry[,var])
#if(anyNA(smry[,var]==TRUE)){
#  hold<- na.omit(smry)
#  smry <- hold
#}
ymin <- round(min(smry[,var]), digits = 2)#-.1
ymax <- round(max(smry[,var]), digits = 2)#+.1
ln.alph <- 0.5
pt.alph <- 1.25
diff <- 0.15
xmin <- 0
xmax <- 350
offsets <- c(-0.5, 0, 0.5, 0.1, 0.15, 0.2, 0.25) #c(-0.2, -0.1, 0, 0.1, 0.2) #must have the same number of parameter sets
orig.xs <- c(50, 100, 151, 201, 250, 300, 350) #years of interest
text.size <- 1.75
pt.cex <- 1.25
lwd <- 4
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', main = title, xlab = 'Generation Time', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels = c('0','50', '100','150','200', '250', '300','350'), cex.axis = text.size)
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
y1<-temp[temp[,1] == orig.xs[1],,]
y2<-temp[temp[,1] == orig.xs[2],,]
y3<-temp[temp[,1] == orig.xs[3],,]
y4<-temp[temp[,1] == orig.xs[4],,]
y5<-temp[temp[,1] == orig.xs[5],,]
y6<-temp[temp[,1] == orig.xs[6],,]
y7<-temp[temp[,1] == orig.xs[7],,]
xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#columns <- c(18, 19, 20, 21)
lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd)
points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
arrows(x0 = xs, y0 = c(mean(y1[,var])-sd(y1[,var]), mean(y2[,var])-sd(y2[,var]), mean(y3[,var])-sd(y3[,var]), mean(y4[,var])-sd(y4[,var]), mean(y5[,var])-sd(y5[,var]), mean(y6[,var])-sd(y6[,var]), mean(y7[,var])-sd(y7[,var])),
y1 = c(mean(y1[,var])+sd(y1[,var]), mean(y2[,var])+sd(y2[,var]), mean(y3[,var])+sd(y3[,var]), mean(y4[,var])+sd(y4[,var]), mean(y5[,var])+sd(y5[,var]), mean(y6[,var])+sd(y6[,var]), mean(y7[,var])+sd(y7[,var])),
lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  for(l in unique(orig.xs)){
#    column <- columns[l]
#    ## 95% CIs (inappropriate for large sample sizes)
#    # arrows(x0 = xs[l], x1 = xs[l], y0 = (mean(temp[,column], na.rm = TRUE) - (sd(temp[,column], na.rm = TRUE)/10*1.96)),
#    #        y1 = (mean(temp[,column], na.rm = TRUE) + (sd(temp[,column], na.rm = TRUE)/10*1.96)),
#    #        lwd = 2, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  arrows(x0 = OTime[,1], y0 = (OTime[,2])-(sd(OTime[,7])), y1 = (OTime[,2])+(sd(OTime[,7])), lwd = .5, col = "black", code=3, angle=90, length=0.1)
#
#    arrows(x0 = xs[l], x1 = xs[l], y0 = quantile(temp[,column], probs = c(0.025,0.975))[1],   #will need to do this for each year of interest
#           y1 = quantile(temp[,column], probs = c(0.025,0.975))[2],
#           lwd = 2, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  }
print(mean(y1[,var]))
print(mean(y7[,var]))
col <- col+1
}
legend('topleft', legend = c('mig=0', 'mig=1 mig/gen','mig=100@y=151','mig=25@y=151,165,181,195'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('critically endangered', 'endangered','threatened','vulnerable'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('bottomright', legend = c('low source, low focal', 'high source, low focal','high source, high focal'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('LL 1mig', 'HL 1mig','HH 1mig', 'LL no mig', 'HL no mig','HH no mig'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('mig=0', 'mig=1 mig/gen','mig=100@y=151','mig=25@y=151,165,181,195', 'mig=1mig@y=151','mig=100@y=125','mig=25 @ y=125,140,155,170'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
##### Generic plotting code
#1=yr, 2=pop size, 3=propmig, 4=He, 5=Ho[driftSNPS], 6=fis, 7=nadult, 8=sxratio, 9=nmig, 10=fst, 11=replicate, 12=paramset, 13=noffspring, 14=fstvsource, 15=fisvsource,
#16=deltaK, 17=propMigSNPs, 18=HoallSNPs, 19=projectname, 20=groupnumb, 21=k, 22=nSNP, 23=miggy, 24=LBhet, 25=LBp, 26=maxage, 27=broodsize, 28=maturity,
#29=years, 30=r0, 31=nSNP.mig, 32=nSNP.cons
{
var = 10
varname = "Fst"
title = "supplemental - migration rates in vulnerable sp"
range(smry[,var])
#if(anyNA(smry[,var]==TRUE)){
#  hold<- na.omit(smry)
#  smry <- hold
#}
ymin <- round(min(smry[,var]), digits = 2)#-.1
ymax <- round(max(smry[,var]), digits = 2)#+.1
ln.alph <- 0.5
pt.alph <- 1.25
diff <- 0.15
xmin <- 0
xmax <- 350
offsets <- c(-0.5, 0, 0.5, 0.1, 0.15, 0.2, 0.25) #c(-0.2, -0.1, 0, 0.1, 0.2) #must have the same number of parameter sets
orig.xs <- c(50, 100, 151, 201, 250, 300, 350) #years of interest
text.size <- 1.75
pt.cex <- 1.25
lwd <- 4
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', main = title, xlab = 'Generation Time', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels = c('0','50', '100','150','200', '250', '300','350'), cex.axis = text.size)
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
y1<-temp[temp[,1] == orig.xs[1],,]
y2<-temp[temp[,1] == orig.xs[2],,]
y3<-temp[temp[,1] == orig.xs[3],,]
y4<-temp[temp[,1] == orig.xs[4],,]
y5<-temp[temp[,1] == orig.xs[5],,]
y6<-temp[temp[,1] == orig.xs[6],,]
y7<-temp[temp[,1] == orig.xs[7],,]
xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#columns <- c(18, 19, 20, 21)
lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd)
points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
arrows(x0 = xs, y0 = c(mean(y1[,var])-sd(y1[,var]), mean(y2[,var])-sd(y2[,var]), mean(y3[,var])-sd(y3[,var]), mean(y4[,var])-sd(y4[,var]), mean(y5[,var])-sd(y5[,var]), mean(y6[,var])-sd(y6[,var]), mean(y7[,var])-sd(y7[,var])),
y1 = c(mean(y1[,var])+sd(y1[,var]), mean(y2[,var])+sd(y2[,var]), mean(y3[,var])+sd(y3[,var]), mean(y4[,var])+sd(y4[,var]), mean(y5[,var])+sd(y5[,var]), mean(y6[,var])+sd(y6[,var]), mean(y7[,var])+sd(y7[,var])),
lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  for(l in unique(orig.xs)){
#    column <- columns[l]
#    ## 95% CIs (inappropriate for large sample sizes)
#    # arrows(x0 = xs[l], x1 = xs[l], y0 = (mean(temp[,column], na.rm = TRUE) - (sd(temp[,column], na.rm = TRUE)/10*1.96)),
#    #        y1 = (mean(temp[,column], na.rm = TRUE) + (sd(temp[,column], na.rm = TRUE)/10*1.96)),
#    #        lwd = 2, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  arrows(x0 = OTime[,1], y0 = (OTime[,2])-(sd(OTime[,7])), y1 = (OTime[,2])+(sd(OTime[,7])), lwd = .5, col = "black", code=3, angle=90, length=0.1)
#
#    arrows(x0 = xs[l], x1 = xs[l], y0 = quantile(temp[,column], probs = c(0.025,0.975))[1],   #will need to do this for each year of interest
#           y1 = quantile(temp[,column], probs = c(0.025,0.975))[2],
#           lwd = 2, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  }
print(mean(y1[,var]))
print(mean(y7[,var]))
col <- col+1
}
legend('topleft', legend = c('mig=0', 'mig=1 mig/gen','mig=100@y=151','mig=25@y=151,165,181,195'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('critically endangered', 'endangered','threatened','vulnerable'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('bottomright', legend = c('low source, low focal', 'high source, low focal','high source, high focal'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('LL 1mig', 'HL 1mig','HH 1mig', 'LL no mig', 'HL no mig','HH no mig'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('mig=0', 'mig=1 mig/gen','mig=100@y=151','mig=25@y=151,165,181,195', 'mig=1mig@y=151','mig=100@y=125','mig=25 @ y=125,140,155,170'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
##### Generic plotting code
#1=yr, 2=pop size, 3=propmig, 4=He, 5=Ho[driftSNPS], 6=fis, 7=nadult, 8=sxratio, 9=nmig, 10=fst, 11=replicate, 12=paramset, 13=noffspring, 14=fstvsource, 15=fisvsource,
#16=deltaK, 17=propMigSNPs, 18=HoallSNPs, 19=projectname, 20=groupnumb, 21=k, 22=nSNP, 23=miggy, 24=LBhet, 25=LBp, 26=maxage, 27=broodsize, 28=maturity,
#29=years, 30=r0, 31=nSNP.mig, 32=nSNP.cons
{
var = 5
varname = "observed heterozygosity"
title = "supplemental - migration rates in vulnerable sp"
range(smry[,var])
#if(anyNA(smry[,var]==TRUE)){
#  hold<- na.omit(smry)
#  smry <- hold
#}
ymin <- round(min(smry[,var]), digits = 2)#-.1
ymax <- round(max(smry[,var]), digits = 2)#+.1
ln.alph <- 0.5
pt.alph <- 1.25
diff <- 0.15
xmin <- 0
xmax <- 350
offsets <- c(-0.5, 0, 0.5, 0.1, 0.15, 0.2, 0.25) #c(-0.2, -0.1, 0, 0.1, 0.2) #must have the same number of parameter sets
orig.xs <- c(50, 100, 151, 201, 250, 300, 350) #years of interest
text.size <- 1.75
pt.cex <- 1.25
lwd <- 4
## make plot
plot(-1,-1, xlim = c(xmin, xmax), ylim = c(ymin, ymax),
xaxt = 'n', main = title, xlab = 'Generation Time', ylab = varname,
cex.axis = text.size, cex.lab = text.size, yaxt = 'n')
axis(2, at = c(ymin, ymax-(ymax-ymin)/2, ymax), cex.axis = text.size)
axis(1, at = c(0, 50, 100, 150, 200, 250, 300, 350), labels = c('0','50', '100','150','200', '250', '300','350'), cex.axis = text.size)
#abline(h = 0, lty = 2)
col <- 1
for(c in unique(smry[,19])){
print(c)
temp <- smry[smry[,19] == c,, drop=FALSE] #separate by parameter set/aka project name
y1<-temp[temp[,1] == orig.xs[1],,]
y2<-temp[temp[,1] == orig.xs[2],,]
y3<-temp[temp[,1] == orig.xs[3],,]
y4<-temp[temp[,1] == orig.xs[4],,]
y5<-temp[temp[,1] == orig.xs[5],,]
y6<-temp[temp[,1] == orig.xs[6],,]
y7<-temp[temp[,1] == orig.xs[7],,]
xs <- orig.xs + offsets[col]  #dont forget you're in a loop, dummy
#columns <- c(18, 19, 20, 21)
lines(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var])), col = alpha(gt.cols[col], ln.alph), lwd = lwd)
points(xs, c(mean(y1[,var]), mean(y2[,var]), mean(y3[,var]), mean(y4[,var]), mean(y5[,var]), mean(y6[,var]), mean(y7[,var])), col = alpha(gt.cols[col], pt.alph), pch = 19, cex = pt.cex)
arrows(x0 = xs, y0 = c(mean(y1[,var])-sd(y1[,var]), mean(y2[,var])-sd(y2[,var]), mean(y3[,var])-sd(y3[,var]), mean(y4[,var])-sd(y4[,var]), mean(y5[,var])-sd(y5[,var]), mean(y6[,var])-sd(y6[,var]), mean(y7[,var])-sd(y7[,var])),
y1 = c(mean(y1[,var])+sd(y1[,var]), mean(y2[,var])+sd(y2[,var]), mean(y3[,var])+sd(y3[,var]), mean(y4[,var])+sd(y4[,var]), mean(y5[,var])+sd(y5[,var]), mean(y6[,var])+sd(y6[,var]), mean(y7[,var])+sd(y7[,var])),
lwd = lwd, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  for(l in unique(orig.xs)){
#    column <- columns[l]
#    ## 95% CIs (inappropriate for large sample sizes)
#    # arrows(x0 = xs[l], x1 = xs[l], y0 = (mean(temp[,column], na.rm = TRUE) - (sd(temp[,column], na.rm = TRUE)/10*1.96)),
#    #        y1 = (mean(temp[,column], na.rm = TRUE) + (sd(temp[,column], na.rm = TRUE)/10*1.96)),
#    #        lwd = 2, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  arrows(x0 = OTime[,1], y0 = (OTime[,2])-(sd(OTime[,7])), y1 = (OTime[,2])+(sd(OTime[,7])), lwd = .5, col = "black", code=3, angle=90, length=0.1)
#
#    arrows(x0 = xs[l], x1 = xs[l], y0 = quantile(temp[,column], probs = c(0.025,0.975))[1],   #will need to do this for each year of interest
#           y1 = quantile(temp[,column], probs = c(0.025,0.975))[2],
#           lwd = 2, col = alpha(gt.cols[col], pt.alph), code=3, angle=90, length=0.1)
#  }
print(mean(y1[,var]))
print(mean(y7[,var]))
col <- col+1
}
legend('topleft', legend = c('mig=0', 'mig=1 mig/gen','mig=100@y=151','mig=25@y=151,165,181,195'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('critically endangered', 'endangered','threatened','vulnerable'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('bottomright', legend = c('low source, low focal', 'high source, low focal','high source, high focal'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('LL 1mig', 'HL 1mig','HH 1mig', 'LL no mig', 'HL no mig','HH no mig'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
#legend('topleft', legend = c('mig=0', 'mig=1 mig/gen','mig=100@y=151','mig=25@y=151,165,181,195', 'mig=1mig@y=151','mig=100@y=125','mig=25 @ y=125,140,155,170'), col = gt.cols, pch = 19, bty = 'n', cex = (text.size-.5), pt.cex = pt.cex+.5, horiz = FALSE, x.intersp = 0.2)
}
