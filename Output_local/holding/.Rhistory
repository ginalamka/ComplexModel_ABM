if(nrow(mal) == 0){
print(paste("can't generate father genotypes"))
break
}
if(nrow(fem)==0){
print(paste("can't generate mother genotypes"))
break
}
SNPS = (nSNP*2) + (nSNP.mig*2) + (nSNP.cons*2)
babygeno = matrix(nrow=nrow(babies), ncol=SNPS)
#loop over each row in babies
for(i in 1:nrow(babies)){
mom = babies[i,2]
dad = babies[i,3]
mm = pop[pop[,1] == mom, , drop=FALSE]
dd = pop[pop[,1] == dad, , drop=FALSE]
momgeno = mm[, -c(ncol(mm)-(SNPS):ncol(mm))]
dadgeno = dd[, -c(ncol(dd)-(SNPS):ncol(dd))]
#from each snp (2 columns), grab 1 of mom's alleles
momgeno.s = pos1 + (sample(0:1, length(pos1), replace=T)) #list of values to pull, exactly 1 allele (here it is index number) from each set of two columns
momgeno.s = momgeno[momgeno.s] #these are now the actual alleles
#from each snp (2 columns), grab 1 of dad's alleles
dadgeno.s = pos1 + (sample(0:1, length(pos1), replace=T)) #list of values to pull, exactly 1 allele (here it is index number) from each set of two columns
dadgeno.s = dadgeno[dadgeno.s] #these are now the actual alleles
#now need to interweve mom and dad's genos so that the loci are jumbled
babygeno[i,pos1] = momgeno.s
babygeno[i,pos2] = dadgeno.s
}
if(mutate == 1){  #if mutate is turned "on"
for(x in 1:nrow(babygeno)){    #iterate over indv
mut <- sample(c("Y","N"), SNPS, replace = TRUE, prob = c(mu,1-mu))   #SNPS if for all SNPs, nSNP for only drift SNPs
init <- babygeno[x,] ## keep track of the 'ancestral' state within this individual
babygeno[x, which(mut=='Y' & babygeno[x,]==1)] <- 0
## if a SNP is supposed to mutate, but its ancestral state was '1' (i.e., it's already been mutated in the previous line),
## then set its index in mut to 'N', indicating that no further mutations should happen in this round.
mut[which(mut=='Y' & init==1)] <- 'N'
babygeno[x, which(mut=='Y' & babygeno[x,]==0)] <- 1
}
}else{
print(paste("no mutation"))
}
#NOTE -- this allows mutation in conserved and mig snps!!!!
#calculate relative fitness (heterozygosity)
het <- matrix(nrow=nrow(babygeno), ncol=1)
for(g in 1:nrow(babygeno)){
w <- sum(babygeno[g ,seq(1,ncol(babygeno),2)]!=babygeno[g,seq(2,ncol(babygeno),2)])/(ncol(babygeno)/2)
het[g,1] <- w
}
babies[,11] <- het
#note that all SNPs are being considered here -- might want to separate out mig/drift SNPs
#calculate proportion of migrant SNPs
migrantgen <- babygeno[, -c(ncol(babygeno)-(nSNP.mig*2):ncol(babygeno))]
migrantgen <- matrix(unlist(migrantgen), nrow = nrow(babygeno), ncol = nSNP.mig*2)
mSNP <- matrix(nrow = nrow(babygeno), ncol = 1)
for(q in 1:nrow(migrantgen)){
ww <- sum(migrantgen[q,])/ncol(migrantgen)
mSNP[q,1] <- ww
}
babies[,12] <- mSNP
#note this might break when bb=1; need to figure that out
#merge babies and babygenotypes
babies = cbind(babies, babygeno)
#sort babies by relative fitness values
babies <- babies[order(babies[,11],decreasing=TRUE,method="auto"),,drop=FALSE]
#consider if we want to stort by prop mig alleles (babies[,12]) to increase fitness value of migrants - remember mutation might play into this!
tempo = babies[babies[c(1:numboff),],,drop=FALSE]
tempo = babies[c(1:numboff),]
head(tempo)
tempo = babies[c(1:numboff),]
tempo = babies[c(1:numboff),],,drop=FALSE
tempo = babies[babies[c(1:numboff),],,drop=FALSE]
tempo
dim(tempo)
babies
tempo
tempo=NULL
nrow(babies)
tempo = babies[babies[1,],,drop=FALSE]
tempo = babies[1,]
tempo
tempo = matrix(babies[1,])
tempo
tempo = matrix(babies[1,],nrow=1,ncol=ncol(babies))
tempo
babies
remove(tempo)
if(numboff != 1){
tempo = babies[c(1:numboff),]
}else{
tempo = matrix(babies[1,],nrow=1,ncol=ncol(babies))
}
babies = tempo
bb = nrow(babies)
#resort babies by id number
babies <- babies[order(babies[,1],decreasing=FALSE,method="auto"),,drop=FALSE]
#rename babies
babies[,1] = seq(from = (sz+1), to = (sz+bb), by = 1)
if(nrow(babies) > numboff){
if(numboff != 1){
tempo = babies[c(1:numboff),]
}else{
tempo = matrix(babies[1,],nrow=1,ncol=ncol(babies))
}
babies = tempo
bb = nrow(babies)
#resort babies by id number
babies <- babies[order(babies[,1],decreasing=FALSE,method="auto"),,drop=FALSE]
#rename babies
babies[,1] = seq(from = (sz+1), to = (sz+bb), by = 1)
}
if(is.null(nrow(babies))==TRUE){
bb = 1
print(paste("only one new baby"))
tempo=NULL
#singlebabe = NULL
#singlebabe = matrix(1:8,nrow = 1)
#bby = rbind(babies,singlebabe)
#NEED TO FIGURE OUT SOLUTION FOR WHEN THERE IS ONLY ONE BABY
##ERROR WILL CONTINUE ON LINE 79 UNTIL RESOLVED
}
source(paste(getwd(), "/FitBreed.R", sep = ''))
source(paste(getwd(), "/FitBreed.R", sep = ''))
#set working directory, import packages, source functions,
setwd(paste(directory,"/Source/", sep = '')) #set temp working directory
source(paste(getwd(), "/FitBreed.R", sep = ''))
if(numboff >= 1){
ttt = FitBreed(pop, pairs, numboff, k, sz, nSNP, nSNP.mig, broodsize, y, mu, mutate, nSNP.cons, pos1, pos2) #still needs work
pop = ttt[[1]]
bb = ttt[[2]]
sz = sz + bb
}else if(numboff <= 0){
print(paste("No new babies, skip breed"))
#next
}
numboff
tail(pop)
max(pop[,1])
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/ABM_sep2022")
directory = getwd()
outdir = paste(directory, "/Output/", sep = "")   #  outdir = paste("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM", "/Output_local/", sep = "")
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
library(reshape2)   #commented out 10/4/22 cuz I was getting pissed. I think this is just for plotting
library(adegenet)   #commented out 10/4/22 cuz I was getting pissed. I think this is just for plotting
library(scales) #may need this for plotting, this allows transparency in colors for overlapping lines
library(matrixStats) #need this for colCount and rowCount in ReproSuc.R
library(hierfstat)   #need this for FST analysis in Analyze.R
library(tidyr)       #need this for FST analysis in Analyze.R
library(gtools)      #commented out 10/4/22 cuz I was getting pissed. I think this is just for plotting
#library(MASS)       #used to write out dead indv - only necessary if writing out a matrix
'%NOTin%' <- Negate(`%in%`) #this defines the not in function so that I can select identities that are not defined by something (see RandomDeaths.R for an example)
#note that the ' ' is not included in the %NOTin% operator -- see https://r-lang.com/not-in-r/#:~:text=The%20not%20in%20operator%20is%20a%20logical%20vector%2C,a%20vector.%20The%20%21%20indicates%20logical%20negation%20%28NOT%29.
#source functions
source(paste(getwd(), "/RunModel.R", sep = ''))
source(paste(getwd(), "/AgeUp.R", sep = ''))
source(paste(getwd(), "/AgeDeath.R", sep = ''))
source(paste(getwd(), "/FitnessDeath.R", sep = ''))
source(paste(getwd(), "/Migrate.R", sep = ''))
source(paste(getwd(), "/MateChoice.R", sep = ''))
source(paste(getwd(), "/PopSizeNext.R", sep = ''))
source(paste(getwd(), "/Breed.R", sep = ''))
source(paste(getwd(), "/Analyze.R", sep = ''))
source(paste(getwd(), "/Plot.R", sep = ''))       #on/off switch
source(paste(getwd(), "/Plot2.R", sep = ''))       #on/off switch
source(paste(getwd(), "/RepSucc.R", sep = ''))
source(paste(getwd(), "/FitBreed.R", sep = ''))
is.wholenumber <-
function(x, tol = .Machine$double.eps^0.5)  abs(x - round(x)) < tol
prj = "_proj_"
grp = "_group_"
k.V           = 100
nSNP.V        = 100
miggy.V       = c(0,"a","b","c")  #"a"=one mig per gen, "b"=1xof50@175, "c"=3xpf25@175|201|225  #migration parameter type
LBhet.V       = c(0.45, 0.07) #c(0.1, 0.45, 0.8) #lowerbound limit  #c(0.4, 0.6) #c(0.8, 0.9)   #THINK ABOUT THE BEST WAY TO SET THIS UP -- either give the values for lower bound and then in RunModel, +1 for upper bound. or change the lower and upper depending on the run
maxage.V      = 9 #c(15, 3) #9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2 #c(4, 6)  #2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = 1                   #age indv becomes reproductively mature
years.V       = 350  #scaleup               #total run time; 200 year run following 50 year stabilization period
r0.V          = 1 #c(1, 0.5, 0.1)  #c(1, .8, 1.2) #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #0/1 is stable, <0/1 is decreasing, >0/1 is increasing - currently checking cuz r0+1 in log growth eq
nSNP.mig.V    = 100                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons.V   = 0        #number of conserved alleles within species -- used to track mutation
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, miggy.V, LBhet.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "miggy", "LBhet", "maxage", "broodsize", "maturity", "years", "r0", "nSNP.mig", "nSNP.cons")
write.table(parameters, paste(directory, "/Output/parameters__proj___group_.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE)
#clean up, remember that these are still available in parameters
remove(k.V, nSNP.V, miggy.V, LBhet.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, nSNP.mig.V, nSNP.cons.V)
replicates    = 1 #20 #5 #10
plotit        = 0    #1=yes, 0=no
plotit2       = 0    #1=yes, 0=no
mutate        = 1    #1=yes, 0=no   #average mammalian genome mutation rate is 2.2 x 10^-9 per base pair per year, https://doi.org/10.1073/pnas.022629899
#krats = 2844.77 MB = 2844770000 bp x 2.2*10-9  = 6.258494 === does this matter here???
#bannertailed 0.0081 mutants/generation/locus, in Busch, Waser, and DeWoody 2007 doi: 10.1111/j.1365-294X.2007.03283.x.
mu            = 0.001  #mutation rate
styr          = 100 #year to start pop decline
nwk           = 300 #pop size after decline -- probs makes sense to keep these even in vary decline years and decline rate. should end @ same pt for all pop sizes
drp           = 10  #number of years for drop from k to nwk
dur           = 40  #duration of small pop size before pop growth
edyr          = styr+drp #150 #year to end pop decline, first year at low pop size (nwk)
s             = 5000 #(k.V*5) #size of source pop
r             = 1
#run model iterating over parameters
theEND = NULL
repEND = NULL
finalPOP = NULL
FINAL = NULL
REP   = NULL
POP   = NULL
k             = parameters$k[r]
#REMOVED###allele        = parameters$allele[r]
nSNP          = parameters$nSNP[r]
miggy         = parameters$miggy[r]
LBhet         = parameters$LBhet[r]
nMicro        = parameters$nMicro[r]
#REMOVED###sex           = parameters$sex[r]
maxage        = parameters$maxage[r]
broodsize     = parameters$broodsize[r]
#REMOVED###sexratio      = parameters$sexratio[r]
maturity      = parameters$maturity[r]
years         = parameters$years[r]
r0            = parameters$r0[r]
#REMOVED###ratemort      = parameters$ratemort[r]
nSNP.mig      = parameters$nSNP.mig[r]                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons     = parameters$nSNP.cons[r]                  #number of conserved alleles
#initialize population
pop = matrix(nrow=k, ncol=12)            #each individual gets its own row.. matrix > dataframe -- "ncol = 7 + (nloci)*2
colnames(pop) <- c("id", "mom", "dad", "age", "sex", "n offspring", "n adult offspring", "alive", "gen born", "gen died", "relative fitness", "prop migrant SNPs") #just to give a better understanding of what these variables are, set names
pop[,1] = seq(1,k,1)                    #each individual has unique ID name; sequence starting at 1, through k, with each 1 interation
pop[,2:3] = 0                            #at this point, we are putting all equal to zero because this is the initial generation and we dont know parents
#pop[,2] = rep(0,k)                      #mom id - later will not be 0, this is useful for debugging #saying replicate 0 100 times
#pop[,3] = rep(0,k)                      #dad id - later will not be 0, this is useful for debugging
pop[,4] = rpois(k,maturity)-1  ##sample(seq(0,maxage,1),k,replace=T)-1   #set age between 0 and 4 and subtract 1 because we add one at the first generation #FOR UNIFORM DIST: dunif(k, min =0, max = maturity, log = FALSE)-1
pop[,5] = sample(c(0,1),k,replace=T)    #each individual assigned male (1) or female (0) #sample from zero k times, with replacements. aka set sex
pop[,6] = NA #this will be for number of times as a parent  #REMOVED###sample(c(0,1),k,replace=T)    #set allele 1 as either A=1 or a=0
pop[,7] = NA #this will be for number of times offspring survive to maturity   #REMOVED###sample(c(0,1),k,replace=T)    #set allele 2 as either A=1 or a=0
pop[,8] = 1                             #alive or dead? alive = 1, dead = 0
pop[,9] = 0                             #generation born
pop[,10] = 0                            #generation died
pop[,11] = NA                            #relative fitness #at this point, we are putting all equal to zero because this is the initial generation
pop[,12] = 0                            #proportion of migrant SNPs - initial pop will all be 0
sz = k #to keep track of the number of indv for ID'ing later
sz_col = ncol(pop)
#generate SNPs for the starting pop -- taken from Janna's Captive breeding IBM
popgen = matrix(nrow=k, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = sample(seq(from=0.4, to=0.6, by=0.01),1) ##0.5 #sample(seq(from=0, to=1, by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(k*p*p, 0)),                                      #homozygous p*p
rep(1, round(k*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, k-(round(k*p*p, 0)+(round(k*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, k, replace = FALSE)
for(kk in 1:k){
if(gtype[kk]==0){                 #homo (0,0)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 0
next
}else if(gtype[kk]==1){           #hetero (0,1)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 1
}else{                            #homo (1,1)
popgen[kk,columns[l]]   = 1
popgen[kk,columns[l]+1] = 1
}
}
#for(qq in 1:ncol(popgen)){colnames(popgen[qq])<-c("SNP",qq)} #couldnt get this to work - 12/14/22 - issue was when merging dead and pop but wont even hold genotypes anymore
#colnames(popgen) <- c('SNP', name)
pool = NULL
#add genotypes to pop matrix
}
het <- matrix(nrow=nrow(popgen), ncol=1)
for(g in 1:nrow(popgen)){
w <- sum(popgen[g ,seq(1,ncol(popgen),2)]!=popgen[g,seq(2,ncol(popgen),2)])/(ncol(popgen)/2)
het[g,1] <- w
} #note to add the other SNPs in here if wanted
pop[,11] <- het
#create migrant and nonmigrant unique SNPs
popSNPs = matrix(nrow=k, ncol=nSNP.mig*2)
columnsb = seq(1,(nSNP.mig*2),2)
for(b in 1:nrow(popSNPs)){    #set up similar to above in case change the sequence or format later
popSNPs[b,] = 0
}
#REMOVE4EVOLUTION###create conserved SNPs
#REMOVE4EVOLUTION##conSNPs = matrix(nrow=k, ncol=nSNP.cons*2)
#REMOVE4EVOLUTION##columnsc = seq(1,(nSNP.cons*2),2)
#REMOVE4EVOLUTION##for(c in 1:nrow(conSNPs)){    #set up similar to above in case change the sequence or format later
#REMOVE4EVOLUTION##  conSNPs[c,] = 0
#REMOVE4EVOLUTION##}
#REMOVE4EVOLUTION##focalpop <- cbind(pop, popgen, popSNPs, conSNPs)   ##??not sure why, but not binding correctly???
focalpop <- cbind(pop, popgen, popSNPs)
pop <- focalpop
#calculate heterozygosity for each indv, put it in pop table
#write starting pop to table
####REMOVED### write.table(pop, paste(directory, "/Output/focal_population", r, ".csv", sep=""), sep=",", col.names=T, row.names=F)
#clean up
remove(popgen, popSNPs, het, b, g, w, columns, columnsb, gtype, kk, l, pool) #focalpop, conSNPs
#notes from talking with Janna 10/21 -- doesnt quite work yet
#plan is to add in additional SNPs to track genotypes. this will help set up Breed.R
#f = 0.2 #allele freq, means 20% of the time, allele 0, 80% of the time, allele 1
#x = sample(c(0,1), 2(nrow(pop)), freq = c(f,1-f))
#pop[,i] = x[1:nrow(pop)]
#pop[,i+1] = x[nrow(pop)+1:length(x)]
#for(i in 1:10){
#  seq(1,nSNP*2,2)
#  }
#make sure to add in additional SNPs for Source pop also!!
#options for SNPs = can do 0-2 values with 1 column per SNP OR 2 columns per SNP with 0-1
#implications of each decision is based on calculating heterozygosity vs generating offspring
#initialize source population
source = matrix(nrow=s, ncol=12)            #each individual gets its own row.. matrix > dataframe
colnames(source) <- c("id", "mom", "dad", "age", "sex", "n offspring", "n adult offspring", "alive", "gen born", "gen died", "relative fitness", "prop migrant SNPs") #just to give a better understanding of what these variables are, set names
source[,1] = seq(-(s),-1,1)                     #each individual has unique ID name; sequence starting at -1, through -k, with each 1 interation, negative flag for source pop
source[,2:3] = -1                           #at this point, we are putting all equal to negative 1 to flag from source pop, and we dont know parents/parents arent in focal pop
source[,4] = sample(seq(0,maxage,1),s,replace=T)   #set age between 0 and 4 (source isnt aged, so dont subtract 1); consider if age 0 should be able to migrate
source[,5] = sample(c(0,1),s,replace=T)    #each individual assigned male (1) or female (0) #sample from zero k times, with replacements. aka set sex
source[,6] = NA #this will be for number of times as a parent   #REMOVED##sample(c(0,1),k,replace=T)    #set allele 1 as either A=1 or a=0
source[,7] = NA #for number of offspring that reach maturity ##REMOVED#### sample(c(0,1),k,replace=T)    #set allele 2 as either A=1 or a=0
source[,8] = 1                             #alive or dead? alive = 1, dead = 0
source[,9] = -1                            #generation born
source[,10] = 0                            #generation died
source[,11] = NA                            #relative fitness
source[,12] = 1                            #proportion of migrant SNPs - initial pop will all be 1
#generate source gentoypes
sourcegen = matrix(nrow=s, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)
for(l in 1:nSNP){
p = sample(seq(from=LBhet, to=(LBhet+0.1), by=0.01), 1)
#create pool of genotypes in HWE
pool = c(rep(0, round(s*p*p, 0)),                                      #homozygous p*p
rep(1, round(s*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, s-(round(s*p*p, 0)+(round(s*(1-p)*(1-p), 0))))         #heterozygous
)
gtype = sample(pool, s, replace = FALSE)
for(ss in 1:s){
if(gtype[ss]==0){                 #homo (0,0)
sourcegen[ss,columns[l]]   = 0
sourcegen[ss,columns[l]+1] = 0
next
}else if(gtype[ss]==1){           #hetero (0,1)
sourcegen[ss,columns[l]]   = 0
sourcegen[ss,columns[l]+1] = 1
}else{                            #homo (1,1)
sourcegen[ss,columns[l]]   = 1
sourcegen[ss,columns[l]+1] = 1
}
}
#colnames(sourcegen) <- c('SNP', l)
#pool = NULL
#add genotypes to source matrix
}
sourcehet <- matrix(nrow=nrow(sourcegen), ncol=1)
for(j in 1:nrow(sourcegen)){
z <- sum(sourcegen[j ,seq(1,ncol(sourcegen),2)]!=sourcegen[j,seq(2,ncol(sourcegen),2)])/(ncol(sourcegen)/2)
sourcehet[j,1] <- z
} #note to add the other SNPs in here if wanted
source[,11] <- sourcehet
#create migrant and nonmigrant unique SNPs
migSNPs = matrix(nrow=s, ncol=nSNP.mig*2)
columnsd= seq(1,(nSNP.mig*2),2)
for(d in 1:nrow(migSNPs)){    #set up similar to above in case change the sequence or format later
migSNPs[d,] = 1
}
#REMOVE4EVOLUTION###create conserved SNPs
#REMOVE4EVOLUTION##conSNPs = matrix(nrow=s, ncol=nSNP.cons*2)
#REMOVE4EVOLUTION##columnse = seq(1,(nSNP.cons*2),2)
#REMOVE4EVOLUTION##for(e in 1:nrow(conSNPs)){    #set up similar to above in case change the sequence or format later
#REMOVE4EVOLUTION##  conSNPs[e,] = 0
#REMOVE4EVOLUTION##}
#REMOVE4EVOLUTION##source1 <- cbind(source, sourcegen, migSNPs, conSNPs)        #also doesnt work????
source1 <- cbind(source, sourcegen, migSNPs)
source <- source1
#prepare focal and source pop for Fst analysis in hierfstat (enacted in Analyze.R)
SNPS = (nSNP*2) + (nSNP.mig*2) + (nSNP.cons*2)                    #find number of SNPs
pos1 = seq(1, SNPS, 2) #allele 1 positions, aka odd values
pos2 = pos1+1
fstinit <- focalpop[, -c(ncol(focalpop)-(SNPS):ncol(focalpop))]               #grab SNPs
fstinit[fstinit[,]==0] <-2                                                    #change 0s to 2s
fstinit[,pos1] <- as.numeric(paste(fstinit[,pos1], fstinit[,pos2], sep=""))                     #merge SNPs
fstinit <- fstinit[,-c(pos2)]                                                 #remove single pos2 SNPs
initident <- matrix(nrow=nrow(fstinit), ncol=1)                               #add pop identifier
initident[,1] = 0
fstinit <- cbind(initident,fstinit)                                           #merge identifier and genotypes
fstsource <- source1[, -c(ncol(source1)-(SNPS):ncol(source1))]                    #grab SNPs
fstsource[fstsource[,]==0] <-2                                                    #change 0s to 2s
fstsource[,pos1] <- as.numeric(paste(fstsource[,pos1], fstsource[,pos2], sep=""))                     #merge SNPs
fstsource <- fstsource[,-c(pos2)]                                                 #remove single pos2 SNPs
sourceident <- matrix(nrow=nrow(fstsource), ncol=1)                               #add pop identifier
sourceident[,1] = -1
fstsource <- cbind(sourceident,fstsource)                                         #merge identifier and genotypes
remove(source1, focalpop, initident, sourceident)
#write starting source to table
#### REMOVED### write.table(source, paste(directory, "/Output/source", r, ".csv", sep=""), sep=",", col.names=T, row.names=F)
#clean up
remove(sourcegen, pool, migSNPs, l, d, ss, sourcehet, gtype, columns, columnsd, z, j) #currently holding p if needed
#REMOVE4EVOLUTION##remove( columnsb, columnsc,  columnse, c)
y=1
pop = AgeUp(pop)                        #age pop + 1 year
pop = FitnessDeath(pop, maturity, y)                #kill indv
#pop = DeathByAge(pop, maxage)           #age-dependent mortality
if(sum(pop[,8]) <= 10){
print(paste("Crash @ FitnessDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break
}
#REMOVE##tttt = Stochastic(pop, stoch, k, numboff, styr, endyr, nwk, dur, y, years, r0, parameters, r)
#REMOVE##pop = tttt[[1]]
#REMOVE##k = tttt[[2]]
#REMEMBER THE NEED TO TRACK NEW K !!!
#pop = RandomDeath(pop)                  #random mortality
tt = Migrate(pop, source, y, miggy)             #subpop migration
pop = tt[[1]]
mig = tt[[2]]  #0
sz = sz + mig #may need to edit since dead are not being removed from pop
source = tt[[3]]
if(sum(pop[,8]) <= 4){
print(paste("Population crash @ MateChoice, less than 4 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break
}
pairs = MateChoice(pop, sex, maturity)
if(is.null(pairs)==TRUE){
print(paste("skipping pop size next, breed due to no parents"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break  #consider whether this should be next or break
}
#REMOVED## if(sum(pairs[,1]) < 0 | sum(pairs[,2]) < 0){
#REMOVED##   print(paste("Only migrants available as parents"))
#REMOVED##   break
#REMOVED## }
pp = PopSizeNext(pop, k, r0, maturity, y, styr, endyr, nwk, dur, parameters, r, K) #ADD NEW K MODIFIER
numboff = pp[[1]]
K = pp[[2]]
if(numboff >= 1){
ttt = FitBreed(pop, pairs, numboff, k, sz, nSNP, nSNP.mig, broodsize, y, mu, mutate, nSNP.cons, pos1, pos2) #still needs work
pop = ttt[[1]]
bb = ttt[[2]]
sz = sz + bb
}else if(numboff <= 0){
print(paste("No new babies, skip breed"))
#next
}
pop = AgeDeath(pop, maxage, y)                #kill indv based on age
if(sum(pop[,8]) <= 10){
print(paste("CRASH @ AgeDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp) #remember to feed to all Analyze functions!
FINAL = rbind(FINAL, out[1,])
break
}
print(paste("DONE!", y, "param", r, "rep", rr))
y=2
pop = AgeUp(pop)                        #age pop + 1 year
pop = FitnessDeath(pop, maturity, y)                #kill indv
#pop = DeathByAge(pop, maxage)           #age-dependent mortality
if(sum(pop[,8]) <= 10){
print(paste("Crash @ FitnessDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break
}
#pop = RandomDeath(pop)                  #random mortality
tt = Migrate(pop, source, y, miggy)             #subpop migration
pop = tt[[1]]
mig = tt[[2]]  #0
sz = sz + mig #may need to edit since dead are not being removed from pop
source = tt[[3]]
if(sum(pop[,8]) <= 4){
print(paste("Population crash @ MateChoice, less than 4 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break
}
pairs = MateChoice(pop, sex, maturity)
if(is.null(pairs)==TRUE){
print(paste("skipping pop size next, breed due to no parents"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
FINAL = rbind(FINAL, out[1,])
break  #consider whether this should be next or break
}
#REMOVED## if(sum(pairs[,1]) < 0 | sum(pairs[,2]) < 0){
#REMOVED##   print(paste("Only migrants available as parents"))
#REMOVED##   break
#REMOVED## }
pp = PopSizeNext(pop, k, r0, maturity, y, styr, endyr, nwk, dur, parameters, r, K) #ADD NEW K MODIFIER
numboff = pp[[1]]
numboff=1
K = pp[[2]]
if(numboff >= 1){
ttt = FitBreed(pop, pairs, numboff, k, sz, nSNP, nSNP.mig, broodsize, y, mu, mutate, nSNP.cons, pos1, pos2) #still needs work
pop = ttt[[1]]
bb = ttt[[2]]
sz = sz + bb
}else if(numboff <= 0){
print(paste("No new babies, skip breed"))
#next
}
pop = AgeDeath(pop, maxage, y)                #kill indv based on age
if(sum(pop[,8]) <= 10){
print(paste("CRASH @ AgeDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp) #remember to feed to all Analyze functions!
FINAL = rbind(FINAL, out[1,])
break
}
print(paste("DONE!", y, "param", r, "rep", rr))
tab = read.table("run_g_quickie_summary.csv", header=T, sep=",")
head(tab)
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/Output_local/holding") #setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM")
tab = read.table("run_g_quickie_summary.csv", header=T, sep=",")
head(tab)
range(tab[5])
