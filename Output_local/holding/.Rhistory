#set working directory
setwd("C:/Users/ginab/Box/Old Computer/Grad School/BALL STATE/Thesis/2022") #set working directory
output = ("C:/Users/ginab/Box/Old Computer/Grad School/BALL STATE/Thesis/2022/Output")
#Load required packages
library(rcompanion)
library(car)
library(DescTools)
library(FSA)
library(dplyr)
library(lme4)
library(stargazer)
library(lmerTest)
library(scales)
library(gt)
ct=read.csv("lmCstartAngleFinal.csv",header=TRUE) #data uploaded
ct$Treatment = as.factor(ct$Treatment)
#ABSOLUTE ANGLE OVER TIME
b6<- lmer(AbsAngle.10 ~ Time+Treatment+Treatment*Time+(1|Clutch)+(1|ID), data = ct)
summary(b6)
anova(b6)
difflsmeans(b6, test.effs = "Treatment")
ls_means(b6)
#CUMULATIVE ANGLE OVER TIME
b7<- lmer(Sum ~ Time+Treatment+Treatment*Time+(1|Clutch)+(1|ID), data = ct)
summary(b7)
anova(b7)
difflsmeans(b7, test.effs = "Treatment")
ls_means(b7)
#ABSOLUTE ANGLE OVER TIME
b6<- lmer(AbsAngle.10 ~ Time+Treatment+Treatment*Time+(1|Clutch)+(1|ID), data = ct)
summary(b6)
anova(b6)
difflsmeans(b6, test.effs = "Treatment")
difflsmeans(b6, test.effs = "Time")
#ABSOLUTE ANGLE OVER TIME
b6<- lmer(AbsAngle.10 ~ Time+(1|Clutch)+(1|ID), data = ct)
summary(b6)
anova(b6)
difflsmeans(b6, test.effs = "Treatment")
difflsmeans(b6, test.effs = "Time")
ls_means(b6)
#CUMULATIVE ANGLE OVER TIME
b7<- lmer(Sum ~ Time+Treatment+Treatment*Time+(1|Clutch)+(1|ID), data = ct)
summary(b7)
anova(b7)
difflsmeans(b7, test.effs = "Treatment")
ls_means(b7)
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/Output/holding") #setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM")
directory = getwd()
outdir = paste(directory, "/figs/", sep = "")
rep7 = read.table("ABM_run.11.14.22_7a_all_repsuc.csv", header=T, sep=",")
head(rep7)
#give each parameter set a unique identifier
rep7[,10] <- "g"
head(rep7)
rep8[,12] <- "h"
rep9[,12] <- "i"
rep8 = read.table("ABM_run.11.14.22_8a_all_repsuc.csv", header=T, sep=",")
rep9 = read.table("ABM_run.11.14.22_9a_all_repsuc.csv", header=T, sep=",")
#give each parameter set a unique identifier
rep7[,10] <- "g"
rep8[,12] <- "h"
rep8[,10] <- "h"
rep9[,10] <- "i"
range(rep7[,3])
range(rep8[,3])
range(rep9[,3])
plot(-100, -100 , xlab="year", ylab="LRS", xlim=c(0, 250), ylim=c(0, 2.3))
points(rep7[,1],rep7[,3])
points(rep8[,1],rep8[,3], col="dodgerblue")
points(rep9[,1],rep9[,3], col="firebrick")
all<- rbind(rep7,rep8,rep9)
range(all[,2])
plot(-100, -100 , xlab="year", ylab="nborn", xlim=c(0, 250), ylim=c(0, 475))
points(rep7[,1],rep7[,2])
points(rep8[,1],rep8[,2], col="dodgerblue")
points(rep9[,1],rep9[,2], col="firebrick")
head(all)
range(all[,7])
plot(-100, -100 , xlab="year", ylab="RRS", xlim=c(0, 250), ylim=c(0, .25))
points(rep7[,1],rep7[,7])
points(rep8[,1],rep8[,7], col="dodgerblue")
points(rep9[,1],rep9[,7], col="firebrick")
miggy<-z
miggy<-"z"
if(miggy == "z"){
mig=0
}
mig
for(m in 1:mig)
{print(paste("m"))}
for(m in 0:mig){print(paste("m"))}
miggy <- "a"
if(miggy == "a"){
mig = 1
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
}else if(miggy == "b"){
if(y == 175){
mig = 50
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
}else{mig=0}
}else if(miggy == "c"){
if(y == 175|y == 201|y==225){
# if(y == 175){
mig = 25   #25 #1  #sample(c(1:15), 1, replace=T) #put in the number of migrants for this set of runs #OLD
#note that the 1:mig might affect the number. pay attention to this.
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
}else{mig=0}
}else{
mig = 0
}
miggy <- "b"
if(miggy == "a"){
mig = 1
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
}else if(miggy == "b"){
if(y == 175){
mig = 50
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
}else{mig=0}
}else if(miggy == "c"){
if(y == 175|y == 201|y==225){
# if(y == 175){
mig = 25   #25 #1  #sample(c(1:15), 1, replace=T) #put in the number of migrants for this set of runs #OLD
#note that the 1:mig might affect the number. pay attention to this.
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
}else{mig=0}
}else{
mig = 0
}
y=175
if(miggy == "a"){
mig = 1
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
}else if(miggy == "b"){
if(y == 175){
mig = 50
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
}else{mig=0}
}else if(miggy == "c"){
if(y == 175|y == 201|y==225){
# if(y == 175){
mig = 25   #25 #1  #sample(c(1:15), 1, replace=T) #put in the number of migrants for this set of runs #OLD
#note that the 1:mig might affect the number. pay attention to this.
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
}else{mig=0}
}else{
mig = 0
}
miggy <- "c"
if(miggy == "a"){
mig = 1
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
}else if(miggy == "b"){
if(y == 175){
mig = 50
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
}else{mig=0}
}else if(miggy == "c"){
if(y == 175|y == 201|y==225){
# if(y == 175){
mig = 25   #25 #1  #sample(c(1:15), 1, replace=T) #put in the number of migrants for this set of runs #OLD
#note that the 1:mig might affect the number. pay attention to this.
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
}else{mig=0}
}else{
mig = 0
}
miggy <- "d"
if(miggy == "a"){
mig = 1
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
}else if(miggy == "b"){
if(y == 175){
mig = 50
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
}else{mig=0}
}else if(miggy == "c"){
if(y == 175|y == 201|y==225){
# if(y == 175){
mig = 25   #25 #1  #sample(c(1:15), 1, replace=T) #put in the number of migrants for this set of runs #OLD
#note that the 1:mig might affect the number. pay attention to this.
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
}else{mig=0}
}else{
mig = 0
}
#parameters
k.V           = 500 #c(1000, 5000, 500) #c(500, 1000, 5000, 10000)                #carrying capacity
nSNP.V        = 1000  #scaleup                #number of SNPs simulated, used to track drift
maxage.V      = 9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = 1                   #age indv becomes reproductively mature
years.V       = 250  #scaleup               #total run time; 200 year run following 50 year stabilization period
r0.V          = 1 #c(1, .8, 1.2) #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #1 is stable, <1 is decreasing, >1 is increasing
ratemort.V    = 1/(maxage.V*2) ###0.2225 #??##(1/(maxage.V+2))      #proportion of adults that die each year --CHECK WITH JANNA WHERE THIS NUMBER CAME FROM; current value of .2225 is from Waser and Jones 1991
nSNP.mig.V    = 0                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons.V   = 0        #number of conserved alleles within species -- used to track mutation
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "maxage", "broodsize", "maturity", "years", "r0", "ratemort", "nSNP.mig", "nSNP.cons")
#clean up, remember that these are still available in parameters
remove(nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V) #k.V
replicates    = 1 #20 #5 #10
plotit        = 1    #1=yes, 0=no
plotit2       = 0    #1=yes, 0=no
mutate        = 1    #1=yes, 0=no   #average mammalian genome mutation rate is 2.2 x 10^-9 per base pair per year, https://doi.org/10.1073/pnas.022629899
#krats = 2844.77 MB = 2844770000 bp x 2.2*10-9  = 6.258494 === does this matter here???
#bannertailed 0.0081 mutants/generation/locus, in Busch, Waser, and DeWoody 2007 doi: 10.1111/j.1365-294X.2007.03283.x.
mu            = 0.001  #mutation rate
styr          = 100 #year to start pop decline
nwk           = 250 #pop size after decline -- probs makes sense to keep these even in vary decline years and decline rate. should end @ same pt for all pop sizes
dur           = 50  #duration of small pop size before pop growth
edyr          = styr+dur #150 #year to end pop decline, first year at low pop size
s             = 5000 #(k.V*5) #size of source pop
#parameters
k.V           = c("a","b") #c(1000, 5000, 500) #c(500, 1000, 5000, 10000)                #carrying capacity
nSNP.V        = 1000  #scaleup                #number of SNPs simulated, used to track drift
maxage.V      = 9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = 1                   #age indv becomes reproductively mature
years.V       = 250  #scaleup               #total run time; 200 year run following 50 year stabilization period
r0.V          = 1 #c(1, .8, 1.2) #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #1 is stable, <1 is decreasing, >1 is increasing
ratemort.V    = 1/(maxage.V*2) ###0.2225 #??##(1/(maxage.V+2))      #proportion of adults that die each year --CHECK WITH JANNA WHERE THIS NUMBER CAME FROM; current value of .2225 is from Waser and Jones 1991
nSNP.mig.V    = 0                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons.V   = 0        #number of conserved alleles within species -- used to track mutation
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "maxage", "broodsize", "maturity", "years", "r0", "ratemort", "nSNP.mig", "nSNP.cons")
#clean up, remember that these are still available in parameters
remove(nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V) #k.V
View(parameters)
if(k == a){print(paste("told ya"))}
if(k.V == a){print(paste("told ya"))}
if(k == "a"){print(paste("told ya"))}
if(k.V == "a"){print(paste("told ya"))}
r=1
k             = parameters$k[r]
if(k == a){print(paste("told ya"))}
if(k.V == a){print(paste("told ya"))}
if(k == "a"){print(paste("told ya"))}
if(k.V == a){print(paste("told ya"))}
sourceg=c(.1,.2)
sourceg[1]
sourceg[2]
typeof(sourceg)
c
f
f = seq(0.1,0.2)
f
f[1]
f[2]
f = seq(0.1,0.2,0.1)
f
f[1]
f[2]
sourcehet = c(seq(0.1,0.2,0.1), seq(0.4,0.6,0.2), seq(0.8,0.9,0.1))
sourcehet
#parameters
k.V           = 500 #c(1000, 5000, 500) #c(500, 1000, 5000, 10000)                #carrying capacity
nSNP.V        = 1000  #scaleup                #number of SNPs simulated, used to track drift
maxage.V      = 9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = c(seq(0.1,0.2,0.1), seq(0.4,0.6,0.2), seq(0.8,0.9,0.1))                   #age indv becomes reproductively mature
years.V       = 250  #scaleup               #total run time; 200 year run following 50 year stabilization period
r0.V          = 1 #c(1, .8, 1.2) #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #1 is stable, <1 is decreasing, >1 is increasing
ratemort.V    = 1/(maxage.V*2) ###0.2225 #??##(1/(maxage.V+2))      #proportion of adults that die each year --CHECK WITH JANNA WHERE THIS NUMBER CAME FROM; current value of .2225 is from Waser and Jones 1991
nSNP.mig.V    = 0                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons.V   = 0        #number of conserved alleles within species -- used to track mutation
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "maxage", "broodsize", "maturity", "years", "r0", "ratemort", "nSNP.mig", "nSNP.cons")
#clean up, remember that these are still available in parameters
remove(nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V) #k.V
View(parameters)
#parameters
k.V           = 500 #c(1000, 5000, 500) #c(500, 1000, 5000, 10000)                #carrying capacity
nSNP.V        = 1000  #scaleup                #number of SNPs simulated, used to track drift
maxage.V      = 9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = c(0.1,0.4,0.8)                   #age indv becomes reproductively mature
years.V       = 250  #scaleup               #total run time; 200 year run following 50 year stabilization period
r0.V          = c(0.2,0.6,0.9) #c(1, .8, 1.2) #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #1 is stable, <1 is decreasing, >1 is increasing
ratemort.V    = 1/(maxage.V*2) ###0.2225 #??##(1/(maxage.V+2))      #proportion of adults that die each year --CHECK WITH JANNA WHERE THIS NUMBER CAME FROM; current value of .2225 is from Waser and Jones 1991
nSNP.mig.V    = 0                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons.V   = 0        #number of conserved alleles within species -- used to track mutation
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "maxage", "broodsize", "maturity", "years", "r0", "ratemort", "nSNP.mig", "nSNP.cons")
#clean up, remember that these are still available in parameters
remove(nSNP.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, ratemort.V, nSNP.mig.V, nSNP.cons.V) #k.V
View(parameters)
sourcehet = c(0.1, 0.45, 0.8)
sourcehet+1
sourcehet+0.1
