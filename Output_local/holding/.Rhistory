next
}else if(gtype[ss]==1){           #hetero (0,1)
sourcegen[ss,columns[l]]   = 0
sourcegen[ss,columns[l]+1] = 1
}else{                            #homo (1,1)
sourcegen[ss,columns[l]]   = 1
sourcegen[ss,columns[l]+1] = 1
}
}
#colnames(sourcegen) <- c('SNP', l)
#pool = NULL
#add genotypes to source matrix
}
sourcehet <- matrix(nrow=nrow(sourcegen), ncol=1)
for(j in 1:nrow(sourcegen)){
z <- sum(sourcegen[j ,seq(1,ncol(sourcegen),2)]!=sourcegen[j,seq(2,ncol(sourcegen),2)])/(ncol(sourcegen)/2)
sourcehet[j,1] <- z
} #note to add the other SNPs in here if wanted
source[,11] <- sourcehet
#create migrant and nonmigrant unique SNPs
migSNPs = matrix(nrow=s, ncol=nSNP.mig*2)
columnsd= seq(1,(nSNP.mig*2),2)
for(d in 1:nrow(migSNPs)){    #set up similar to above in case change the sequence or format later
migSNPs[d,] = 1
}
#REMOVE4EVOLUTION###create conserved SNPs
#REMOVE4EVOLUTION##conSNPs = matrix(nrow=s, ncol=nSNP.cons*2)
#REMOVE4EVOLUTION##columnse = seq(1,(nSNP.cons*2),2)
#REMOVE4EVOLUTION##for(e in 1:nrow(conSNPs)){    #set up similar to above in case change the sequence or format later
#REMOVE4EVOLUTION##  conSNPs[e,] = 0
#REMOVE4EVOLUTION##}
#REMOVE4EVOLUTION##source1 <- cbind(source, sourcegen, migSNPs, conSNPs)        #also doesnt work????
source1 <- cbind(source, sourcegen, migSNPs)
source <- source1
#prepare focal and source pop for Fst analysis in hierfstat (enacted in Analyze.R)
SNPS = (nSNP*2) + (nSNP.mig*2) + (nSNP.cons*2)                    #find number of SNPs
pos1 = seq(1, SNPS, 2) #allele 1 positions, aka odd values
pos2 = pos1+1
fstinit <- focalpop[, -c(ncol(focalpop)-(SNPS):ncol(focalpop))]               #grab SNPs
fstinit[fstinit[,]==0] <-2                                                    #change 0s to 2s
fstinit[,pos1] <- as.numeric(paste(fstinit[,pos1], fstinit[,pos2], sep=""))                     #merge SNPs
fstinit <- fstinit[,-c(pos2)]                                                 #remove single pos2 SNPs
initident <- matrix(nrow=nrow(fstinit), ncol=1)                               #add pop identifier
initident[,1] = 0
fstinit <- cbind(initident,fstinit)                                           #merge identifier and genotypes
fstsource <- source1[, -c(ncol(source1)-(SNPS):ncol(source1))]                    #grab SNPs
fstsource[fstsource[,]==0] <-2                                                    #change 0s to 2s
fstsource[,pos1] <- as.numeric(paste(fstsource[,pos1], fstsource[,pos2], sep=""))                     #merge SNPs
fstsource <- fstsource[,-c(pos2)]                                                 #remove single pos2 SNPs
sourceident <- matrix(nrow=nrow(fstsource), ncol=1)                               #add pop identifier
sourceident[,1] = -1
fstsource <- cbind(sourceident,fstsource)                                         #merge identifier and genotypes
remove(source1, focalpop, initident, sourceident)
#write starting source to table
#### REMOVED### write.table(source, paste(directory, "/Output/source", r, ".csv", sep=""), sep=",", col.names=T, row.names=F)
#clean up
remove(sourcegen, pool, migSNPs, l, d, ss, sourcehet, gtype, columns, columnsd, z, j) #currently holding p if needed
#REMOVE4EVOLUTION##remove( columnsb, columnsc,  columnse, c)
#create for loop for each time step
for(y in 0:years){
if(y != 0){
pop = AgeUp(pop)                        #age pop + 1 year
pop = FitnessDeath(pop, maturity, y)                #kill indv
#pop = DeathByAge(pop, maxage)           #age-dependent mortality
if(sum(pop[,8]) <= 10){
print(paste("Crash @ FitnessDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2)
FINAL = rbind(FINAL, out[1,])
break
}
#REMOVE##tttt = Stochastic(pop, stoch, k, numboff, styr, endyr, nwk, dur, y, years, r0, parameters, r)
#REMOVE##pop = tttt[[1]]
#REMOVE##k = tttt[[2]]
#REMEMBER THE NEED TO TRACK NEW K !!!
#pop = RandomDeath(pop)                  #random mortality
tt = Migrate(pop, source, y, miggy)             #subpop migration
pop = tt[[1]]
mig = tt[[2]]  #0
sz = sz + mig #may need to edit since dead are not being removed from pop
source = tt[[3]]
if(sum(pop[,8]) <= 4){
print(paste("Population crash @ MateChoice, less than 4 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2)
FINAL = rbind(FINAL, out[1,])
break
}
pairs = MateChoice(pop, sex, maturity)
if(is.null(pairs)==TRUE){
print(paste("skipping pop size next, breed due to no parents"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2)
FINAL = rbind(FINAL, out[1,])
break  #consider whether this should be next or break
}
#REMOVED## if(sum(pairs[,1]) < 0 | sum(pairs[,2]) < 0){
#REMOVED##   print(paste("Only migrants available as parents"))
#REMOVED##   break
#REMOVED## }
pp = PopSizeNext(pop, k, r0, maturity, y, styr, endyr, nwk, dur, parameters, r, K) #ADD NEW K MODIFIER
numboff = pp[[1]]
K = pp[[2]]
if(numboff >= 1){
ttt = Breed(pop, pairs, numboff, k, sz, nSNP, nSNP.mig, broodsize, y, mu, mutate, nSNP.cons, pos1, pos2) #still needs work
pop = ttt[[1]]
bb = ttt[[2]]
sz = sz + bb
}else if(numboff <= 0){
print(paste("No new babies, skip breed"))
#next
}
pop = AgeDeath(pop, maxage, y)                #kill indv based on age
if(sum(pop[,8]) <= 10){
print(paste("CRASH @ AgeDeath - Population low, less than 10 indv"))
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2) #remember to feed to all Analyze functions!
FINAL = rbind(FINAL, out[1,])
break
}
print(paste("DONE!", y, "param", r, "rep", rr))
#clean up by removing dead indv every 25 years
if(is.wholenumber(y/25)==TRUE){
print(paste("Cleaning up dead!"))
dead <- pop[pop[,8]==0,,drop=FALSE]
deadindv <- dead[, c(1:sz_col)]  #remove indv genotypes
if(y==25){
write.table(deadindv, paste(directory, "/Output/dead.csv", sep=""), sep=",", col.names=FALSE, append=FALSE, quote=FALSE, row.names=FALSE) #create new dead for this parameter set
}else{
write.table(deadindv, paste(directory, "/Output/dead.csv", sep=""), sep=",", col.names=FALSE, append=TRUE, quote=FALSE, row.names=FALSE)
}
#write.matrix(deadindv, paste(directory, "/Output/dead.csv", sep=""), sep=",") #, col.names=TRUE, append=TRUE, quote=FALSE, row.names=FALSE
pop <- pop[pop[,8]==1,,drop=FALSE] #make new pop object with only alive indv
remove(dead, deadindv)
}
#   pop <- pop[pop[,8]==1,, drop=FALSE] #remove dead indv -- put in place for Evolution on 6/7/22 -- this will speed it up!!
#y <- y+1
}
if(y == 0){
K = k
}
#analyze each replicate
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2)
#out[1,1] = y
#out[1,ncol(out)+1] = rr
FINAL = rbind(FINAL, out[1,])
#will need to track K in Analyze for years during the pop drop
#consider if something needs to be changed in Analyze for the different death types or if that needs tracked at all.
}
#read in dead indv
died = read.table(paste(directory, "/Output/dead.csv", sep=""), header=F, sep=",")
indv = pop[, c(1:sz_col)]  #remove indv genotypes
colnames(died) = colnames(indv)
pop_indv = rbind(indv,died) #add dead to pop for repsucc calculations
remove(pop, indv, died)
#THIS IS WHERE I CALC RRS using pop data
aa = RepSucc(pop_indv, maturity, years, rr, r)
pop_indv = aa[[1]]  #this is the final pop with all indv and all indv data
rep = aa[[2]]
REP = rbind(REP, rep)
print(paste("REPLICATE", rr, "OF PARAM", r, "DONE!"))
nrow(parameters)
rep = read.table("ABM_run.1.11.23_E_all_repsuc.csv", header=T, sep=",")
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/Output_local/holding") #setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM")
rep = read.table("ABM_run.1.11.23_E_all_repsuc.csv", header=T, sep=",")
head(rep)
a1 <- rep[rep[,1]==0,,drop=FALSE]
a1
table(rep[,10])
6688/350
350*20
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/ABM_sep2022")
directory = getwd()
outdir = paste(directory, "/Output/", sep = "")   #  outdir = paste("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM", "/Output_local/", sep = "")
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
prj = "_proj_"
grp = "_group_"
#parameters
k.V           = 1000 #c(1000, 5000, 500) #c(500, 1000, 5000, 10000)                #carrying capacity
nSNP.V        = 1000  #scaleup                #number of SNPs simulated, used to track drift
miggy.V       = c(0,"a","b","c")  #"a"=one mig per gen, "b"=1xof50@175, "c"=3xpf25@175|201|225  #migration parameter type
LBhet.V       = c(0.45, 0.07) #c(0.1, 0.45, 0.8) #lowerbound limit  #c(0.4, 0.6) #c(0.8, 0.9)   #THINK ABOUT THE BEST WAY TO SET THIS UP -- either give the values for lower bound and then in RunModel, +1 for upper bound. or change the lower and upper depending on the run
maxage.V      = 9 #c(15, 3) #9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2 #c(4, 6)  #2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = 1                   #age indv becomes reproductively mature
years.V       = 350  #scaleup               #total run time; 200 year run following 50 year stabilization period
r0.V          = 1 #c(1, 0.5, 0.1)  #c(1, .8, 1.2) #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #0/1 is stable, <0/1 is decreasing, >0/1 is increasing - currently checking cuz r0+1 in log growth eq
nSNP.mig.V    = 100                   #number of special alleles for migrants -- these are ADDITIONAL alleles, migrants = 1, orig pop = 0, this will be easier to track than a random value
nSNP.cons.V   = 0        #number of conserved alleles within species -- used to track mutation
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, miggy.V, LBhet.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "miggy", "LBhet", "maxage", "broodsize", "maturity", "years", "r0", "nSNP.mig", "nSNP.cons")
write.table(parameters, paste(directory, "/Output/parameters__proj___group_.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE)
#clean up, remember that these are still available in parameters
remove(k.V, nSNP.V, miggy.V, LBhet.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, nSNP.mig.V, nSNP.cons.V)
View(parameters)
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/ABM_sep2022")
directory = getwd()
outdir = paste(directory, "/Output/", sep = "")   #  outdir = paste("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM", "/Output_local/", sep = "")
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
prj = "_proj_"
grp = "_group_"
#parameters
k.V           = 1000 #c(1000, 5000, 500) #c(500, 1000, 5000, 10000)                #carrying capacity
k.V           = 100
nSNP.V        = 10
miggy.V       =
0
LBhet.V       =
.45
maxage.V      = 9 #c(15, 3) #9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2 #c(4, 6)  #2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = 1                   #age indv becomes reproductively mature
years.V       = 35
r0.V          = 1 #c(1, 0.5, 0.1)  #c(1, .8, 1.2) #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #0/1 is stable, <0/1 is decreasing, >0/1 is increasing - currently checking cuz r0+1 in log growth eq
nSNP.mig.V    = 10
nSNP.cons.V   = 0        #number of conserved alleles within species -- used to track mutation
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, miggy.V, LBhet.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "miggy", "LBhet", "maxage", "broodsize", "maturity", "years", "r0", "nSNP.mig", "nSNP.cons")
write.table(parameters, paste(directory, "/Output/parameters__proj___group_.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE)
#clean up, remember that these are still available in parameters
remove(k.V, nSNP.V, miggy.V, LBhet.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, nSNP.mig.V, nSNP.cons.V)
replicates    = 1 #20 #5 #10
plotit        = 0    #1=yes, 0=no
plotit2       = 0    #1=yes, 0=no
mutate        = 1    #1=yes, 0=no   #average mammalian genome mutation rate is 2.2 x 10^-9 per base pair per year, https://doi.org/10.1073/pnas.022629899
#krats = 2844.77 MB = 2844770000 bp x 2.2*10-9  = 6.258494 === does this matter here???
#bannertailed 0.0081 mutants/generation/locus, in Busch, Waser, and DeWoody 2007 doi: 10.1111/j.1365-294X.2007.03283.x.
mu            = 0.001  #mutation rate
styr          = 100 #year to start pop decline
nwk           = 300 #pop size after decline -- probs makes sense to keep these even in vary decline years and decline rate. should end @ same pt for all pop sizes
drp           = 10  #number of years for drop from k to nwk
dur           = 40  #duration of small pop size before pop growth
edyr          = styr+drp #150 #year to end pop decline, first year at low pop size (nwk)
s             = 5000 #(k.V*5) #size of source pop
r             = 1
#run model iterating over parameters
theEND = NULL
repEND = NULL
finalPOP = NULL
for(r in 1:nrow(parameters)){
ALL = RunModel(parameters, r, directory, replicates, prj, grp)
FINAL = ALL[[1]]
REP = ALL[[2]]
#POP = ALL[[2]]
####REMOVED## POP = RunModel(parameters, r, directory, replicates)
####REMOVED## write.table(POP, paste(directory, "/Output/CoverPop", r, ".csv", sep=""), sep=",", col.names=TRUE, row.names=F)
#####REMOVED##write.table(POP, paste(directory, "/Output/CoverPop.txt", sep=""), sep="\t", col.names=TRUE, row.names=F)  #use this for a .txt file, good for in a text editor. ; "/t" for macs
theEND = rbind(theEND, FINAL)
repEND = rbind(repEND, REP)
#finalPOP = rbind(finalPOP, POP)
}
View(FINAL)
View(FINAL)
View(repEND)
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/ABM_sep2022")
directory = getwd()
outdir = paste(directory, "/Output/", sep = "")   #  outdir = paste("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM", "/Output_local/", sep = "")
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
prj = "_proj_"
grp = "_group_"
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/Output_local/holding") #setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM")
directory = getwd()
outdir = paste(directory, "/figs/", sep = "")
tab = read.table("ABM_run.1.11.23_E_all_summary.csv", header=T, sep=",")
head(tab)
range(tab[,13])
rep = read.table("ABM_run.1.11.23_E_all_repsuc.csv", header=T, sep=",")
head(rep)
range(rep[,2])
rep=na.omit(rep)
head(rep)
range(rep[,2])
ope <- rep[rep[,2]>=1000,,drop=FALSE]
head(ope)
tail(ope)
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/ABM_sep2022")
directory = getwd()
outdir = paste(directory, "/Output/", sep = "")   #  outdir = paste("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM", "/Output_local/", sep = "")
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
prj = "_proj_"
grp = "_group_"
#parameters
k.V           = 1000 #c(1000, 5000, 500) #c(500, 1000, 5000, 10000)                #carrying capacity
k.V           = 100
nSNP.V        = 100
miggy.V       = c(0,"a","b","c")  #"a"=one mig per gen, "b"=1xof50@175, "c"=3xpf25@175|201|225  #migration parameter type
LBhet.V       =
.45
maxage.V      = 9 #c(15, 3) #9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2 #c(4, 6)  #2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = 1                   #age indv becomes reproductively mature
years.V       =
250
r0.V          = 1 #c(1, 0.5, 0.1)  #c(1, .8, 1.2) #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #0/1 is stable, <0/1 is decreasing, >0/1 is increasing - currently checking cuz r0+1 in log growth eq
nSNP.mig.V    = 10
nSNP.cons.V   = 0        #number of conserved alleles within species -- used to track mutation
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, miggy.V, LBhet.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "miggy", "LBhet", "maxage", "broodsize", "maturity", "years", "r0", "nSNP.mig", "nSNP.cons")
write.table(parameters, paste(directory, "/Output/parameters__proj___group_.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE)
#clean up, remember that these are still available in parameters
remove(k.V, nSNP.V, miggy.V, LBhet.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, nSNP.mig.V, nSNP.cons.V)
replicates    = 1 #20 #5 #10
plotit        = 0    #1=yes, 0=no
plotit2       = 0    #1=yes, 0=no
mutate        = 1    #1=yes, 0=no   #average mammalian genome mutation rate is 2.2 x 10^-9 per base pair per year, https://doi.org/10.1073/pnas.022629899
#krats = 2844.77 MB = 2844770000 bp x 2.2*10-9  = 6.258494 === does this matter here???
#bannertailed 0.0081 mutants/generation/locus, in Busch, Waser, and DeWoody 2007 doi: 10.1111/j.1365-294X.2007.03283.x.
mu            = 0.001  #mutation rate
styr          = 100 #year to start pop decline
nwk           = 300 #pop size after decline -- probs makes sense to keep these even in vary decline years and decline rate. should end @ same pt for all pop sizes
drp           = 10  #number of years for drop from k to nwk
dur           = 40  #duration of small pop size before pop growth
edyr          = styr+drp #150 #year to end pop decline, first year at low pop size (nwk)
s             = 5000 #(k.V*5) #size of source pop
r             = 1
#run model iterating over parameters
theEND = NULL
repEND = NULL
finalPOP = NULL
for(r in 1:nrow(parameters)){
ALL = RunModel(parameters, r, directory, replicates, prj, grp)
FINAL = ALL[[1]]
REP = ALL[[2]]
#POP = ALL[[2]]
####REMOVED## POP = RunModel(parameters, r, directory, replicates)
####REMOVED## write.table(POP, paste(directory, "/Output/CoverPop", r, ".csv", sep=""), sep=",", col.names=TRUE, row.names=F)
#####REMOVED##write.table(POP, paste(directory, "/Output/CoverPop.txt", sep=""), sep="\t", col.names=TRUE, row.names=F)  #use this for a .txt file, good for in a text editor. ; "/t" for macs
theEND = rbind(theEND, FINAL)
repEND = rbind(repEND, REP)
#finalPOP = rbind(finalPOP, POP)
}
View(parameters)
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/ABM_sep2022")
directory = getwd()
outdir = paste(directory, "/Output/", sep = "")   #  outdir = paste("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM", "/Output_local/", sep = "")
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
prj = "_proj_"
grp = "_group_"
#parameters
k.V           = 1000 #c(1000, 5000, 500) #c(500, 1000, 5000, 10000)                #carrying capacity
nSNP.V        = 100
miggy.V       = c(0,"a","b","c")  #"a"=one mig per gen, "b"=1xof50@175, "c"=3xpf25@175|201|225  #migration parameter type
LBhet.V       =
.45
maxage.V      = 9 #c(15, 3) #9     #low ages dont work              #maximum age individuals can be; add one at first, so they will die at 4, start at -1
broodsize.V   = 2 #c(4, 6)  #2     #this is now the MAX brood size, aka max fecundity   #REMOVED##c(0:2)              #aka fecundity, remember that this is typically not constant in life; potentially Poisson distribution
maturity.V    = 1                   #age indv becomes reproductively mature
years.V       =
250
r0.V          = 1 #c(1, 0.5, 0.1)  #c(1, .8, 1.2) #0.1 #c(0.1, 0.2, 0.5)                 #per capita growth rate #0/1 is stable, <0/1 is decreasing, >0/1 is increasing - currently checking cuz r0+1 in log growth eq
nSNP.mig.V    = 10
nSNP.cons.V   = 0        #number of conserved alleles within species -- used to track mutation
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, miggy.V, LBhet.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "miggy", "LBhet", "maxage", "broodsize", "maturity", "years", "r0", "nSNP.mig", "nSNP.cons")
write.table(parameters, paste(directory, "/Output/parameters__proj___group_.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE)
#clean up, remember that these are still available in parameters
remove(k.V, nSNP.V, miggy.V, LBhet.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, nSNP.mig.V, nSNP.cons.V)
replicates    = 1 #20 #5 #10
plotit        = 0    #1=yes, 0=no
plotit2       = 0    #1=yes, 0=no
mutate        = 1    #1=yes, 0=no   #average mammalian genome mutation rate is 2.2 x 10^-9 per base pair per year, https://doi.org/10.1073/pnas.022629899
#krats = 2844.77 MB = 2844770000 bp x 2.2*10-9  = 6.258494 === does this matter here???
#bannertailed 0.0081 mutants/generation/locus, in Busch, Waser, and DeWoody 2007 doi: 10.1111/j.1365-294X.2007.03283.x.
mu            = 0.001  #mutation rate
styr          = 100 #year to start pop decline
nwk           = 300 #pop size after decline -- probs makes sense to keep these even in vary decline years and decline rate. should end @ same pt for all pop sizes
drp           = 10  #number of years for drop from k to nwk
dur           = 40  #duration of small pop size before pop growth
edyr          = styr+drp #150 #year to end pop decline, first year at low pop size (nwk)
s             = 5000 #(k.V*5) #size of source pop
r             = 1
#run model iterating over parameters
theEND = NULL
repEND = NULL
finalPOP = NULL
for(r in 1:nrow(parameters)){
ALL = RunModel(parameters, r, directory, replicates, prj, grp)
FINAL = ALL[[1]]
REP = ALL[[2]]
#POP = ALL[[2]]
####REMOVED## POP = RunModel(parameters, r, directory, replicates)
####REMOVED## write.table(POP, paste(directory, "/Output/CoverPop", r, ".csv", sep=""), sep=",", col.names=TRUE, row.names=F)
#####REMOVED##write.table(POP, paste(directory, "/Output/CoverPop.txt", sep=""), sep="\t", col.names=TRUE, row.names=F)  #use this for a .txt file, good for in a text editor. ; "/t" for macs
theEND = rbind(theEND, FINAL)
repEND = rbind(repEND, REP)
#finalPOP = rbind(finalPOP, POP)
}
View(parameters)
View(parameters)
View(parameters)
View(parameters)
View(theEND)
View(repEND)
rep<-repEND
library(ghibli)
library(scales)
head(rep)
as.numeric(rep)
rep<-as.numeric(repEND)
head(rep)
rep<-repEND
repEND[,1] <- as.numeric(repEND[,1])
head(rep)
rep<-repEND
head(rep)
col = rep[,10]  #color by parameter
yr  = rep[,1]   #year
n   = rep[,2]   #n born
LRS = rep[,3]   #mean LRS
SD  = rep[,4]   #SD of LRS
LRSf= rep[,5]   #female LRS
LRSm= rep[,6]   #male LRS
RRS = rep[,7]   #mean RRS
SDR = rep[,8]   #SD of RRS
rep = rep[,9]   #replicate
LRSmig=rep[,11] #LRS of migrants
LRSnat=rep[,12] #LRS of natives
plot(-100, -100 , xlab="year", ylab="LRS", xlim=c(min(yr), max(yr)), ylim=c(0, max(LRS)))
points(yr, LRS, col=gt.cols[col])
max(yr)
max(LRS)
min(yr)
plot(-100, -100 , xlab="year", ylab="LRS", xlim=c(min(yr), max(yr)), ylim=c(0, max(LRS)))
plot(-100, -100 , xlab="year", ylab="LRS", xlim=c(0, max(yr)), ylim=c(0, max(LRS)))
View(parameters)
write.table(theEND, paste(directory, "/Output/summary_TESTRUN_1.27.23.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE)
write.table(repEND, paste(directory, "/Output/rep_summary_TESTRUN_1.27.23.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE)
setwd("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM/Output_local/holding") #setwd("C:/Users/Gina/Desktop/2022/ComplexModel_ABM")
directory = getwd()
outdir = paste(directory, "/figs/", sep = "")
tab = read.table("ABM_run.1.11.23_E_all_summary.csv", header=T, sep=",")
head(tab)
table(tab[,12])
remove(tab)
rep = read.table("ABM_run.1.18.23_c_all_repsuc.csv", header=T, sep=",")
head(rep)
table(rep[,10])
table(rep[,1])
library(ghibli)
library(scales)
gt.cols <- ghibli_palette('PonyoMedium')#[4]
lt.gt.col <- ghibli_palette('PonyoLight')[4]
col = rep[,10]  #color by parameter
yr  = rep[,1]   #year
n   = rep[,2]   #n born
LRS = rep[,3]   #mean LRS
SD  = rep[,4]   #SD of LRS
LRSf= rep[,5]   #female LRS
LRSm= rep[,6]   #male LRS
RRS = rep[,7]   #mean RRS
SDR = rep[,8]   #SD of RRS
rep = rep[,9]   #replicate
LRSmig=rep[,11] #LRS of migrants
LRSnat=rep[,12] #LRS of natives
plot(-100, -100 , xlab="year", ylab="LRS", xlim=c(min(yr), max(yr)), ylim=c(0, max(LRS)))
points(yr, LRS, col=gt.cols[col])
plot(-100, -100 , xlab="year", ylab="LRS", xlim=c(min(yr), max(yr)), ylim=c(0, max(LRS)))
lines(yr, LRS, col=gt.cols[col])
plot(-100, -100 , xlab="year", ylab="nborn", xlim=c(min(yr), max(yr)), ylim=c(0, max(n)))
points(yr, n, col=gt.cols[col])
plot(-100, -100 , xlab="year", ylab="RRS", xlim=c(min(yr), max(yr)), ylim=c(0, max(RRS)))
points(yr, RRS, col=gt.cols[col])
plot(-100, -100 , xlab="year", ylab="LRS of migrants", xlim=c(min(yr), max(yr)), ylim=c(0, max(LRSmig)))
points(yr, LRSmig, col=gt.cols[col])
head(rep)
head(LRS)
rep = read.table("ABM_run.1.18.23_c_all_repsuc.csv", header=T, sep=",")
col = rep[,10]  #color by parameter
yr  = rep[,1]   #year
n   = rep[,2]   #n born
LRS = rep[,3]   #mean LRS
SD  = rep[,4]   #SD of LRS
LRSf= rep[,5]   #female LRS
LRSm= rep[,6]   #male LRS
RRS = rep[,7]   #mean RRS
SDR = rep[,8]   #SD of RRS
rep = rep[,9]   #replicate
head(LRS)
rep = read.table("ABM_run.1.11.23_E_all_repsuc.csv", header=T, sep=",")
col = rep[,10]  #color by parameter
yr  = rep[,1]   #year
n   = rep[,2]   #n born
LRS = rep[,3]   #mean LRS
SD  = rep[,4]   #SD of LRS
LRSf= rep[,5]   #female LRS
LRSm= rep[,6]   #male LRS
RRS = rep[,7]   #mean RRS
SDR = rep[,8]   #SD of RRS
rep = rep[,9]   #replicate
head(LRS)
plot(-100, -100 , xlab="year", ylab="LRS", xlim=c(min(yr), max(yr)), ylim=c(0, max(LRS)))
min(yr)
max(yr)
max(LRS)
rep = read.table("ABM_run.1.11.23_E_all_repsuc.csv", header=T, sep=",")
rep=na.omit(rep)
col = rep[,10]  #color by parameter
yr  = rep[,1]   #year
n   = rep[,2]   #n born
LRS = rep[,3]   #mean LRS
SD  = rep[,4]   #SD of LRS
LRSf= rep[,5]   #female LRS
LRSm= rep[,6]   #male LRS
RRS = rep[,7]   #mean RRS
SDR = rep[,8]   #SD of RRS
rep = rep[,9]   #rep
plot(-100, -100 , xlab="year", ylab="LRS", xlim=c(min(yr), max(yr)), ylim=c(0, max(LRS)))
points(yr, LRS, col=gt.cols[col])
plot(-100, -100 , xlab="year", ylab="RRS", xlim=c(min(yr), max(yr)), ylim=c(0, max(RRS)))
points(yr, RRS, col=gt.cols[col])
rep = read.table("ABM_run.1.11.23_E_all_repsuc.csv", header=T, sep=",")
head(rep)
